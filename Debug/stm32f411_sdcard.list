
stm32f411_sdcard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e8c  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08007024  08007024  00008024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007168  08007168  00009080  2**0
                  CONTENTS
  4 .ARM          00000008  08007168  08007168  00008168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007170  08007170  00009080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007170  08007170  00008170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007174  08007174  00008174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08007178  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  20000080  080071f8  00009080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000344  080071f8  00009344  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f3a6  00000000  00000000  000090b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b0d  00000000  00000000  00018456  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d90  00000000  00000000  0001af68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a4b  00000000  00000000  0001bcf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018cd2  00000000  00000000  0001c743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013092  00000000  00000000  00035415  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b218  00000000  00000000  000484a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d36bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c54  00000000  00000000  000d3704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000d7358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000080 	.word	0x20000080
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800700c 	.word	0x0800700c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000084 	.word	0x20000084
 80001d4:	0800700c 	.word	0x0800700c

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001fc:	f000 b96a 	b.w	80004d4 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	460c      	mov	r4, r1
 8000220:	2b00      	cmp	r3, #0
 8000222:	d14e      	bne.n	80002c2 <__udivmoddi4+0xaa>
 8000224:	4694      	mov	ip, r2
 8000226:	458c      	cmp	ip, r1
 8000228:	4686      	mov	lr, r0
 800022a:	fab2 f282 	clz	r2, r2
 800022e:	d962      	bls.n	80002f6 <__udivmoddi4+0xde>
 8000230:	b14a      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000232:	f1c2 0320 	rsb	r3, r2, #32
 8000236:	4091      	lsls	r1, r2
 8000238:	fa20 f303 	lsr.w	r3, r0, r3
 800023c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000240:	4319      	orrs	r1, r3
 8000242:	fa00 fe02 	lsl.w	lr, r0, r2
 8000246:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024a:	fa1f f68c 	uxth.w	r6, ip
 800024e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000252:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000256:	fb07 1114 	mls	r1, r7, r4, r1
 800025a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800025e:	fb04 f106 	mul.w	r1, r4, r6
 8000262:	4299      	cmp	r1, r3
 8000264:	d90a      	bls.n	800027c <__udivmoddi4+0x64>
 8000266:	eb1c 0303 	adds.w	r3, ip, r3
 800026a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800026e:	f080 8112 	bcs.w	8000496 <__udivmoddi4+0x27e>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 810f 	bls.w	8000496 <__udivmoddi4+0x27e>
 8000278:	3c02      	subs	r4, #2
 800027a:	4463      	add	r3, ip
 800027c:	1a59      	subs	r1, r3, r1
 800027e:	fa1f f38e 	uxth.w	r3, lr
 8000282:	fbb1 f0f7 	udiv	r0, r1, r7
 8000286:	fb07 1110 	mls	r1, r7, r0, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb00 f606 	mul.w	r6, r0, r6
 8000292:	429e      	cmp	r6, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x94>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800029e:	f080 80fc 	bcs.w	800049a <__udivmoddi4+0x282>
 80002a2:	429e      	cmp	r6, r3
 80002a4:	f240 80f9 	bls.w	800049a <__udivmoddi4+0x282>
 80002a8:	4463      	add	r3, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	1b9b      	subs	r3, r3, r6
 80002ae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa6>
 80002b6:	40d3      	lsrs	r3, r2
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xba>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb4>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa6>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x150>
 80002da:	42a3      	cmp	r3, r4
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xcc>
 80002de:	4290      	cmp	r0, r2
 80002e0:	f0c0 80f0 	bcc.w	80004c4 <__udivmoddi4+0x2ac>
 80002e4:	1a86      	subs	r6, r0, r2
 80002e6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	2d00      	cmp	r5, #0
 80002ee:	d0e6      	beq.n	80002be <__udivmoddi4+0xa6>
 80002f0:	e9c5 6300 	strd	r6, r3, [r5]
 80002f4:	e7e3      	b.n	80002be <__udivmoddi4+0xa6>
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	f040 8090 	bne.w	800041c <__udivmoddi4+0x204>
 80002fc:	eba1 040c 	sub.w	r4, r1, ip
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	fa1f f78c 	uxth.w	r7, ip
 8000308:	2101      	movs	r1, #1
 800030a:	fbb4 f6f8 	udiv	r6, r4, r8
 800030e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000312:	fb08 4416 	mls	r4, r8, r6, r4
 8000316:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031a:	fb07 f006 	mul.w	r0, r7, r6
 800031e:	4298      	cmp	r0, r3
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x11c>
 8000322:	eb1c 0303 	adds.w	r3, ip, r3
 8000326:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x11a>
 800032c:	4298      	cmp	r0, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2b4>
 8000332:	4626      	mov	r6, r4
 8000334:	1a1c      	subs	r4, r3, r0
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb4 f0f8 	udiv	r0, r4, r8
 800033e:	fb08 4410 	mls	r4, r8, r0, r4
 8000342:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000346:	fb00 f707 	mul.w	r7, r0, r7
 800034a:	429f      	cmp	r7, r3
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x148>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x146>
 8000358:	429f      	cmp	r7, r3
 800035a:	f200 80b0 	bhi.w	80004be <__udivmoddi4+0x2a6>
 800035e:	4620      	mov	r0, r4
 8000360:	1bdb      	subs	r3, r3, r7
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x9c>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa20 fc06 	lsr.w	ip, r0, r6
 8000378:	fa04 f301 	lsl.w	r3, r4, r1
 800037c:	ea43 030c 	orr.w	r3, r3, ip
 8000380:	40f4      	lsrs	r4, r6
 8000382:	fa00 f801 	lsl.w	r8, r0, r1
 8000386:	0c38      	lsrs	r0, r7, #16
 8000388:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800038c:	fbb4 fef0 	udiv	lr, r4, r0
 8000390:	fa1f fc87 	uxth.w	ip, r7
 8000394:	fb00 441e 	mls	r4, r0, lr, r4
 8000398:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800039c:	fb0e f90c 	mul.w	r9, lr, ip
 80003a0:	45a1      	cmp	r9, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d90a      	bls.n	80003be <__udivmoddi4+0x1a6>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003ae:	f080 8084 	bcs.w	80004ba <__udivmoddi4+0x2a2>
 80003b2:	45a1      	cmp	r9, r4
 80003b4:	f240 8081 	bls.w	80004ba <__udivmoddi4+0x2a2>
 80003b8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003bc:	443c      	add	r4, r7
 80003be:	eba4 0409 	sub.w	r4, r4, r9
 80003c2:	fa1f f983 	uxth.w	r9, r3
 80003c6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ca:	fb00 4413 	mls	r4, r0, r3, r4
 80003ce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d907      	bls.n	80003ea <__udivmoddi4+0x1d2>
 80003da:	193c      	adds	r4, r7, r4
 80003dc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003e0:	d267      	bcs.n	80004b2 <__udivmoddi4+0x29a>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d965      	bls.n	80004b2 <__udivmoddi4+0x29a>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ee:	fba0 9302 	umull	r9, r3, r0, r2
 80003f2:	eba4 040c 	sub.w	r4, r4, ip
 80003f6:	429c      	cmp	r4, r3
 80003f8:	46ce      	mov	lr, r9
 80003fa:	469c      	mov	ip, r3
 80003fc:	d351      	bcc.n	80004a2 <__udivmoddi4+0x28a>
 80003fe:	d04e      	beq.n	800049e <__udivmoddi4+0x286>
 8000400:	b155      	cbz	r5, 8000418 <__udivmoddi4+0x200>
 8000402:	ebb8 030e 	subs.w	r3, r8, lr
 8000406:	eb64 040c 	sbc.w	r4, r4, ip
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	40cb      	lsrs	r3, r1
 8000410:	431e      	orrs	r6, r3
 8000412:	40cc      	lsrs	r4, r1
 8000414:	e9c5 6400 	strd	r6, r4, [r5]
 8000418:	2100      	movs	r1, #0
 800041a:	e750      	b.n	80002be <__udivmoddi4+0xa6>
 800041c:	f1c2 0320 	rsb	r3, r2, #32
 8000420:	fa20 f103 	lsr.w	r1, r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa24 f303 	lsr.w	r3, r4, r3
 800042c:	4094      	lsls	r4, r2
 800042e:	430c      	orrs	r4, r1
 8000430:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000434:	fa00 fe02 	lsl.w	lr, r0, r2
 8000438:	fa1f f78c 	uxth.w	r7, ip
 800043c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000440:	fb08 3110 	mls	r1, r8, r0, r3
 8000444:	0c23      	lsrs	r3, r4, #16
 8000446:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044a:	fb00 f107 	mul.w	r1, r0, r7
 800044e:	4299      	cmp	r1, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x24c>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800045a:	d22c      	bcs.n	80004b6 <__udivmoddi4+0x29e>
 800045c:	4299      	cmp	r1, r3
 800045e:	d92a      	bls.n	80004b6 <__udivmoddi4+0x29e>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1a5b      	subs	r3, r3, r1
 8000466:	b2a4      	uxth	r4, r4
 8000468:	fbb3 f1f8 	udiv	r1, r3, r8
 800046c:	fb08 3311 	mls	r3, r8, r1, r3
 8000470:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000474:	fb01 f307 	mul.w	r3, r1, r7
 8000478:	42a3      	cmp	r3, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x276>
 800047c:	eb1c 0404 	adds.w	r4, ip, r4
 8000480:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000484:	d213      	bcs.n	80004ae <__udivmoddi4+0x296>
 8000486:	42a3      	cmp	r3, r4
 8000488:	d911      	bls.n	80004ae <__udivmoddi4+0x296>
 800048a:	3902      	subs	r1, #2
 800048c:	4464      	add	r4, ip
 800048e:	1ae4      	subs	r4, r4, r3
 8000490:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000494:	e739      	b.n	800030a <__udivmoddi4+0xf2>
 8000496:	4604      	mov	r4, r0
 8000498:	e6f0      	b.n	800027c <__udivmoddi4+0x64>
 800049a:	4608      	mov	r0, r1
 800049c:	e706      	b.n	80002ac <__udivmoddi4+0x94>
 800049e:	45c8      	cmp	r8, r9
 80004a0:	d2ae      	bcs.n	8000400 <__udivmoddi4+0x1e8>
 80004a2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004a6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004aa:	3801      	subs	r0, #1
 80004ac:	e7a8      	b.n	8000400 <__udivmoddi4+0x1e8>
 80004ae:	4631      	mov	r1, r6
 80004b0:	e7ed      	b.n	800048e <__udivmoddi4+0x276>
 80004b2:	4603      	mov	r3, r0
 80004b4:	e799      	b.n	80003ea <__udivmoddi4+0x1d2>
 80004b6:	4630      	mov	r0, r6
 80004b8:	e7d4      	b.n	8000464 <__udivmoddi4+0x24c>
 80004ba:	46d6      	mov	lr, sl
 80004bc:	e77f      	b.n	80003be <__udivmoddi4+0x1a6>
 80004be:	4463      	add	r3, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e74d      	b.n	8000360 <__udivmoddi4+0x148>
 80004c4:	4606      	mov	r6, r0
 80004c6:	4623      	mov	r3, r4
 80004c8:	4608      	mov	r0, r1
 80004ca:	e70f      	b.n	80002ec <__udivmoddi4+0xd4>
 80004cc:	3e02      	subs	r6, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	e730      	b.n	8000334 <__udivmoddi4+0x11c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <app>:

extern UART_HandleTypeDef huart2;

uint8_t value[3];

void app() {
 80004d8:	b580      	push	{r7, lr}
 80004da:	b09e      	sub	sp, #120	@ 0x78
 80004dc:	af00      	add	r7, sp, #0
	// uart 초기화
	initUart(&huart2);
 80004de:	4837      	ldr	r0, [pc, #220]	@ (80005bc <app+0xe4>)
 80004e0:	f001 f876 	bl	80015d0 <initUart>
	// fafs 설정
	FATFS		*fatfs;
	FIL			*file;
	FRESULT	fresult;

	char message[100] = {0,};
 80004e4:	2300      	movs	r3, #0
 80004e6:	60bb      	str	r3, [r7, #8]
 80004e8:	f107 030c 	add.w	r3, r7, #12
 80004ec:	2260      	movs	r2, #96	@ 0x60
 80004ee:	2100      	movs	r1, #0
 80004f0:	4618      	mov	r0, r3
 80004f2:	f006 faad 	bl	8006a50 <memset>
	unsigned int	writeSize;
	unsigned int	readSize;
	// 메모리 할당
	fatfs = malloc(sizeof(FATFS));
 80004f6:	f44f 700c 	mov.w	r0, #560	@ 0x230
 80004fa:	f006 f8d3 	bl	80066a4 <malloc>
 80004fe:	4603      	mov	r3, r0
 8000500:	677b      	str	r3, [r7, #116]	@ 0x74
	file = malloc(sizeof(FIL));
 8000502:	f44f 700c 	mov.w	r0, #560	@ 0x230
 8000506:	f006 f8cd 	bl	80066a4 <malloc>
 800050a:	4603      	mov	r3, r0
 800050c:	673b      	str	r3, [r7, #112]	@ 0x70
	// 디스크 마운트
	f_mount(fatfs, "0:", 0);
 800050e:	2200      	movs	r2, #0
 8000510:	492b      	ldr	r1, [pc, #172]	@ (80005c0 <app+0xe8>)
 8000512:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8000514:	f005 fb0e 	bl	8005b34 <f_mount>
	// 파일 읽기
	fresult = f_open(file, "message.txt", FA_READ);
 8000518:	2201      	movs	r2, #1
 800051a:	492a      	ldr	r1, [pc, #168]	@ (80005c4 <app+0xec>)
 800051c:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800051e:	f005 fb4f 	bl	8005bc0 <f_open>
 8000522:	4603      	mov	r3, r0
 8000524:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if(fresult) printf("fail open message.txt\n");
 8000528:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800052c:	2b00      	cmp	r3, #0
 800052e:	d002      	beq.n	8000536 <app+0x5e>
 8000530:	4825      	ldr	r0, [pc, #148]	@ (80005c8 <app+0xf0>)
 8000532:	f006 fa85 	bl	8006a40 <puts>
	fresult = f_read(file, message, 100, &readSize);
 8000536:	463b      	mov	r3, r7
 8000538:	f107 0108 	add.w	r1, r7, #8
 800053c:	2264      	movs	r2, #100	@ 0x64
 800053e:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8000540:	f005 fcf8 	bl	8005f34 <f_read>
 8000544:	4603      	mov	r3, r0
 8000546:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if(fresult) printf("fail read\n");
 800054a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800054e:	2b00      	cmp	r3, #0
 8000550:	d002      	beq.n	8000558 <app+0x80>
 8000552:	481e      	ldr	r0, [pc, #120]	@ (80005cc <app+0xf4>)
 8000554:	f006 fa74 	bl	8006a40 <puts>
	f_close(file);
 8000558:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800055a:	f006 f81d 	bl	8006598 <f_close>
	// 파일 쓰기
	fresult = f_open(file, "message2.txt", FA_WRITE | FA_CREATE_ALWAYS);
 800055e:	220a      	movs	r2, #10
 8000560:	491b      	ldr	r1, [pc, #108]	@ (80005d0 <app+0xf8>)
 8000562:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8000564:	f005 fb2c 	bl	8005bc0 <f_open>
 8000568:	4603      	mov	r3, r0
 800056a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if(fresult) printf("fail open message2.txt\n");
 800056e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000572:	2b00      	cmp	r3, #0
 8000574:	d002      	beq.n	800057c <app+0xa4>
 8000576:	4817      	ldr	r0, [pc, #92]	@ (80005d4 <app+0xfc>)
 8000578:	f006 fa62 	bl	8006a40 <puts>
	fresult = f_write(file, message, strlen(message), &writeSize);
 800057c:	f107 0308 	add.w	r3, r7, #8
 8000580:	4618      	mov	r0, r3
 8000582:	f7ff fe29 	bl	80001d8 <strlen>
 8000586:	4602      	mov	r2, r0
 8000588:	1d3b      	adds	r3, r7, #4
 800058a:	f107 0108 	add.w	r1, r7, #8
 800058e:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8000590:	f005 fe0f 	bl	80061b2 <f_write>
 8000594:	4603      	mov	r3, r0
 8000596:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if(fresult) printf("fail write\n");
 800059a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d002      	beq.n	80005a8 <app+0xd0>
 80005a2:	480d      	ldr	r0, [pc, #52]	@ (80005d8 <app+0x100>)
 80005a4:	f006 fa4c 	bl	8006a40 <puts>
	f_close(file);
 80005a8:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80005aa:	f005 fff5 	bl	8006598 <f_close>
	// 디스크 언마운트
	f_unmount("0:");
 80005ae:	2200      	movs	r2, #0
 80005b0:	4903      	ldr	r1, [pc, #12]	@ (80005c0 <app+0xe8>)
 80005b2:	2000      	movs	r0, #0
 80005b4:	f005 fabe 	bl	8005b34 <f_mount>
	while(1) {
 80005b8:	bf00      	nop
 80005ba:	e7fd      	b.n	80005b8 <app+0xe0>
 80005bc:	200000f8 	.word	0x200000f8
 80005c0:	08007024 	.word	0x08007024
 80005c4:	08007028 	.word	0x08007028
 80005c8:	08007034 	.word	0x08007034
 80005cc:	0800704c 	.word	0x0800704c
 80005d0:	08007058 	.word	0x08007058
 80005d4:	08007068 	.word	0x08007068
 80005d8:	08007080 	.word	0x08007080

080005dc <SELECT>:
static uint8_t CardType;                                /* SD 타입 0:MMC, 1:SDC, 2:Block addressing */
static uint8_t PowerFlag = 0;                           /* Power 상태 Flag */

/* SPI Chip Select */
static void SELECT(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80005e0:	2200      	movs	r2, #0
 80005e2:	2110      	movs	r1, #16
 80005e4:	4802      	ldr	r0, [pc, #8]	@ (80005f0 <SELECT+0x14>)
 80005e6:	f001 fbcd 	bl	8001d84 <HAL_GPIO_WritePin>
}
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40020000 	.word	0x40020000

080005f4 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80005f8:	2201      	movs	r2, #1
 80005fa:	2110      	movs	r1, #16
 80005fc:	4802      	ldr	r0, [pc, #8]	@ (8000608 <DESELECT+0x14>)
 80005fe:	f001 fbc1 	bl	8001d84 <HAL_GPIO_WritePin>
}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40020000 	.word	0x40020000

0800060c <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000616:	bf00      	nop
 8000618:	4808      	ldr	r0, [pc, #32]	@ (800063c <SPI_TxByte+0x30>)
 800061a:	f002 fb9b 	bl	8002d54 <HAL_SPI_GetState>
 800061e:	4603      	mov	r3, r0
 8000620:	2b01      	cmp	r3, #1
 8000622:	d1f9      	bne.n	8000618 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8000624:	1df9      	adds	r1, r7, #7
 8000626:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800062a:	2201      	movs	r2, #1
 800062c:	4803      	ldr	r0, [pc, #12]	@ (800063c <SPI_TxByte+0x30>)
 800062e:	f002 f8a4 	bl	800277a <HAL_SPI_Transmit>
}
 8000632:	bf00      	nop
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	200000a0 	.word	0x200000a0

08000640 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000646:	23ff      	movs	r3, #255	@ 0xff
 8000648:	71fb      	strb	r3, [r7, #7]
  data = 0;
 800064a:	2300      	movs	r3, #0
 800064c:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 800064e:	bf00      	nop
 8000650:	4809      	ldr	r0, [pc, #36]	@ (8000678 <SPI_RxByte+0x38>)
 8000652:	f002 fb7f 	bl	8002d54 <HAL_SPI_GetState>
 8000656:	4603      	mov	r3, r0
 8000658:	2b01      	cmp	r3, #1
 800065a:	d1f9      	bne.n	8000650 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 800065c:	1dba      	adds	r2, r7, #6
 800065e:	1df9      	adds	r1, r7, #7
 8000660:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000664:	9300      	str	r3, [sp, #0]
 8000666:	2301      	movs	r3, #1
 8000668:	4803      	ldr	r0, [pc, #12]	@ (8000678 <SPI_RxByte+0x38>)
 800066a:	f002 f9ca 	bl	8002a02 <HAL_SPI_TransmitReceive>

  return data;
 800066e:	79bb      	ldrb	r3, [r7, #6]
}
 8000670:	4618      	mov	r0, r3
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	200000a0 	.word	0x200000a0

0800067c <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000684:	f7ff ffdc 	bl	8000640 <SPI_RxByte>
 8000688:	4603      	mov	r3, r0
 800068a:	461a      	mov	r2, r3
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	701a      	strb	r2, [r3, #0]
}
 8000690:	bf00      	nop
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}

08000698 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 800069e:	4b0b      	ldr	r3, [pc, #44]	@ (80006cc <SD_ReadyWait+0x34>)
 80006a0:	2232      	movs	r2, #50	@ 0x32
 80006a2:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 80006a4:	f7ff ffcc 	bl	8000640 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 80006a8:	f7ff ffca 	bl	8000640 <SPI_RxByte>
 80006ac:	4603      	mov	r3, r0
 80006ae:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	2bff      	cmp	r3, #255	@ 0xff
 80006b4:	d004      	beq.n	80006c0 <SD_ReadyWait+0x28>
 80006b6:	4b05      	ldr	r3, [pc, #20]	@ (80006cc <SD_ReadyWait+0x34>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d1f3      	bne.n	80006a8 <SD_ReadyWait+0x10>

  return res;
 80006c0:	79fb      	ldrb	r3, [r7, #7]
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20000146 	.word	0x20000146

080006d0 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b086      	sub	sp, #24
 80006d4:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 80006d6:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80006da:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 80006dc:	f7ff ff8a 	bl	80005f4 <DESELECT>

  for(int i = 0; i < 10; i++)
 80006e0:	2300      	movs	r3, #0
 80006e2:	613b      	str	r3, [r7, #16]
 80006e4:	e005      	b.n	80006f2 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80006e6:	20ff      	movs	r0, #255	@ 0xff
 80006e8:	f7ff ff90 	bl	800060c <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80006ec:	693b      	ldr	r3, [r7, #16]
 80006ee:	3301      	adds	r3, #1
 80006f0:	613b      	str	r3, [r7, #16]
 80006f2:	693b      	ldr	r3, [r7, #16]
 80006f4:	2b09      	cmp	r3, #9
 80006f6:	ddf6      	ble.n	80006e6 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 80006f8:	f7ff ff70 	bl	80005dc <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 80006fc:	2340      	movs	r3, #64	@ 0x40
 80006fe:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000700:	2300      	movs	r3, #0
 8000702:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000704:	2300      	movs	r3, #0
 8000706:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000708:	2300      	movs	r3, #0
 800070a:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 800070c:	2300      	movs	r3, #0
 800070e:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8000710:	2395      	movs	r3, #149	@ 0x95
 8000712:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8000714:	2300      	movs	r3, #0
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	e009      	b.n	800072e <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 800071a:	1d3a      	adds	r2, r7, #4
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	4413      	add	r3, r2
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	4618      	mov	r0, r3
 8000724:	f7ff ff72 	bl	800060c <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	3301      	adds	r3, #1
 800072c:	60fb      	str	r3, [r7, #12]
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	2b05      	cmp	r3, #5
 8000732:	ddf2      	ble.n	800071a <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8000734:	e002      	b.n	800073c <SD_PowerOn+0x6c>
  {
    Count--;
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	3b01      	subs	r3, #1
 800073a:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 800073c:	f7ff ff80 	bl	8000640 <SPI_RxByte>
 8000740:	4603      	mov	r3, r0
 8000742:	2b01      	cmp	r3, #1
 8000744:	d002      	beq.n	800074c <SD_PowerOn+0x7c>
 8000746:	697b      	ldr	r3, [r7, #20]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d1f4      	bne.n	8000736 <SD_PowerOn+0x66>
  }

  DESELECT();
 800074c:	f7ff ff52 	bl	80005f4 <DESELECT>
  SPI_TxByte(0XFF);
 8000750:	20ff      	movs	r0, #255	@ 0xff
 8000752:	f7ff ff5b 	bl	800060c <SPI_TxByte>

  PowerFlag = 1;
 8000756:	4b03      	ldr	r3, [pc, #12]	@ (8000764 <SD_PowerOn+0x94>)
 8000758:	2201      	movs	r2, #1
 800075a:	701a      	strb	r2, [r3, #0]
}
 800075c:	bf00      	nop
 800075e:	3718      	adds	r7, #24
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	2000009d 	.word	0x2000009d

08000768 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 800076c:	4b03      	ldr	r3, [pc, #12]	@ (800077c <SD_PowerOff+0x14>)
 800076e:	2200      	movs	r2, #0
 8000770:	701a      	strb	r2, [r3, #0]
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	2000009d 	.word	0x2000009d

08000780 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000784:	4b03      	ldr	r3, [pc, #12]	@ (8000794 <SD_CheckPower+0x14>)
 8000786:	781b      	ldrb	r3, [r3, #0]
}
 8000788:	4618      	mov	r0, r3
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	2000009d 	.word	0x2000009d

08000798 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 80007a2:	4b17      	ldr	r3, [pc, #92]	@ (8000800 <SD_RxDataBlock+0x68>)
 80007a4:	220a      	movs	r2, #10
 80007a6:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 80007a8:	f7ff ff4a 	bl	8000640 <SPI_RxByte>
 80007ac:	4603      	mov	r3, r0
 80007ae:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 80007b0:	7bfb      	ldrb	r3, [r7, #15]
 80007b2:	2bff      	cmp	r3, #255	@ 0xff
 80007b4:	d104      	bne.n	80007c0 <SD_RxDataBlock+0x28>
 80007b6:	4b12      	ldr	r3, [pc, #72]	@ (8000800 <SD_RxDataBlock+0x68>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d1f3      	bne.n	80007a8 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 80007c0:	7bfb      	ldrb	r3, [r7, #15]
 80007c2:	2bfe      	cmp	r3, #254	@ 0xfe
 80007c4:	d001      	beq.n	80007ca <SD_RxDataBlock+0x32>
    return FALSE;
 80007c6:	2300      	movs	r3, #0
 80007c8:	e016      	b.n	80007f8 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	1c5a      	adds	r2, r3, #1
 80007ce:	607a      	str	r2, [r7, #4]
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff ff53 	bl	800067c <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	1c5a      	adds	r2, r3, #1
 80007da:	607a      	str	r2, [r7, #4]
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff ff4d 	bl	800067c <SPI_RxBytePtr>
  } while(btr -= 2);
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	3b02      	subs	r3, #2
 80007e6:	603b      	str	r3, [r7, #0]
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d1ed      	bne.n	80007ca <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 80007ee:	f7ff ff27 	bl	8000640 <SPI_RxByte>
  SPI_RxByte();
 80007f2:	f7ff ff25 	bl	8000640 <SPI_RxByte>

  return TRUE;
 80007f6:	2301      	movs	r3, #1
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3710      	adds	r7, #16
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000145 	.word	0x20000145

08000804 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	460b      	mov	r3, r1
 800080e:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8000810:	2300      	movs	r3, #0
 8000812:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000814:	f7ff ff40 	bl	8000698 <SD_ReadyWait>
 8000818:	4603      	mov	r3, r0
 800081a:	2bff      	cmp	r3, #255	@ 0xff
 800081c:	d001      	beq.n	8000822 <SD_TxDataBlock+0x1e>
    return FALSE;
 800081e:	2300      	movs	r3, #0
 8000820:	e040      	b.n	80008a4 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 8000822:	78fb      	ldrb	r3, [r7, #3]
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff fef1 	bl	800060c <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 800082a:	78fb      	ldrb	r3, [r7, #3]
 800082c:	2bfd      	cmp	r3, #253	@ 0xfd
 800082e:	d031      	beq.n	8000894 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	1c5a      	adds	r2, r3, #1
 8000838:	607a      	str	r2, [r7, #4]
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff fee5 	bl	800060c <SPI_TxByte>
      SPI_TxByte(*buff++);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	1c5a      	adds	r2, r3, #1
 8000846:	607a      	str	r2, [r7, #4]
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff fede 	bl	800060c <SPI_TxByte>
    } while (--wc);
 8000850:	7bbb      	ldrb	r3, [r7, #14]
 8000852:	3b01      	subs	r3, #1
 8000854:	73bb      	strb	r3, [r7, #14]
 8000856:	7bbb      	ldrb	r3, [r7, #14]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d1eb      	bne.n	8000834 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 800085c:	f7ff fef0 	bl	8000640 <SPI_RxByte>
    SPI_RxByte();
 8000860:	f7ff feee 	bl	8000640 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8000864:	e00b      	b.n	800087e <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 8000866:	f7ff feeb 	bl	8000640 <SPI_RxByte>
 800086a:	4603      	mov	r3, r0
 800086c:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 800086e:	7bfb      	ldrb	r3, [r7, #15]
 8000870:	f003 031f 	and.w	r3, r3, #31
 8000874:	2b05      	cmp	r3, #5
 8000876:	d006      	beq.n	8000886 <SD_TxDataBlock+0x82>
        break;

      i++;
 8000878:	7b7b      	ldrb	r3, [r7, #13]
 800087a:	3301      	adds	r3, #1
 800087c:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 800087e:	7b7b      	ldrb	r3, [r7, #13]
 8000880:	2b40      	cmp	r3, #64	@ 0x40
 8000882:	d9f0      	bls.n	8000866 <SD_TxDataBlock+0x62>
 8000884:	e000      	b.n	8000888 <SD_TxDataBlock+0x84>
        break;
 8000886:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8000888:	bf00      	nop
 800088a:	f7ff fed9 	bl	8000640 <SPI_RxByte>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d0fa      	beq.n	800088a <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8000894:	7bfb      	ldrb	r3, [r7, #15]
 8000896:	f003 031f 	and.w	r3, r3, #31
 800089a:	2b05      	cmp	r3, #5
 800089c:	d101      	bne.n	80008a2 <SD_TxDataBlock+0x9e>
    return TRUE;
 800089e:	2301      	movs	r3, #1
 80008a0:	e000      	b.n	80008a4 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 80008a2:	2300      	movs	r3, #0
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3710      	adds	r7, #16
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}

080008ac <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	6039      	str	r1, [r7, #0]
 80008b6:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 80008b8:	f7ff feee 	bl	8000698 <SD_ReadyWait>
 80008bc:	4603      	mov	r3, r0
 80008be:	2bff      	cmp	r3, #255	@ 0xff
 80008c0:	d001      	beq.n	80008c6 <SD_SendCmd+0x1a>
    return 0xFF;
 80008c2:	23ff      	movs	r3, #255	@ 0xff
 80008c4:	e040      	b.n	8000948 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff fe9f 	bl	800060c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	0e1b      	lsrs	r3, r3, #24
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff fe99 	bl	800060c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	0c1b      	lsrs	r3, r3, #16
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff fe93 	bl	800060c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	0a1b      	lsrs	r3, r3, #8
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff fe8d 	bl	800060c <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff fe88 	bl	800060c <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	2b40      	cmp	r3, #64	@ 0x40
 8000904:	d101      	bne.n	800090a <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8000906:	2395      	movs	r3, #149	@ 0x95
 8000908:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	2b48      	cmp	r3, #72	@ 0x48
 800090e:	d101      	bne.n	8000914 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8000910:	2387      	movs	r3, #135	@ 0x87
 8000912:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8000914:	7bfb      	ldrb	r3, [r7, #15]
 8000916:	4618      	mov	r0, r3
 8000918:	f7ff fe78 	bl	800060c <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 800091c:	79fb      	ldrb	r3, [r7, #7]
 800091e:	2b4c      	cmp	r3, #76	@ 0x4c
 8000920:	d101      	bne.n	8000926 <SD_SendCmd+0x7a>
    SPI_RxByte();
 8000922:	f7ff fe8d 	bl	8000640 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 8000926:	230a      	movs	r3, #10
 8000928:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 800092a:	f7ff fe89 	bl	8000640 <SPI_RxByte>
 800092e:	4603      	mov	r3, r0
 8000930:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8000932:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000936:	2b00      	cmp	r3, #0
 8000938:	da05      	bge.n	8000946 <SD_SendCmd+0x9a>
 800093a:	7bbb      	ldrb	r3, [r7, #14]
 800093c:	3b01      	subs	r3, #1
 800093e:	73bb      	strb	r3, [r7, #14]
 8000940:	7bbb      	ldrb	r3, [r7, #14]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d1f1      	bne.n	800092a <SD_SendCmd+0x7e>

  return res;
 8000946:	7b7b      	ldrb	r3, [r7, #13]
}
 8000948:	4618      	mov	r0, r3
 800094a:	3710      	adds	r7, #16
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}

08000950 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000950:	b590      	push	{r4, r7, lr}
 8000952:	b085      	sub	sp, #20
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 800095a:	79fb      	ldrb	r3, [r7, #7]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8000960:	2301      	movs	r3, #1
 8000962:	e0d5      	b.n	8000b10 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8000964:	4b6c      	ldr	r3, [pc, #432]	@ (8000b18 <SD_disk_initialize+0x1c8>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	b2db      	uxtb	r3, r3
 800096a:	f003 0302 	and.w	r3, r3, #2
 800096e:	2b00      	cmp	r3, #0
 8000970:	d003      	beq.n	800097a <SD_disk_initialize+0x2a>
    return Stat;
 8000972:	4b69      	ldr	r3, [pc, #420]	@ (8000b18 <SD_disk_initialize+0x1c8>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	b2db      	uxtb	r3, r3
 8000978:	e0ca      	b.n	8000b10 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 800097a:	f7ff fea9 	bl	80006d0 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 800097e:	f7ff fe2d 	bl	80005dc <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8000982:	2300      	movs	r3, #0
 8000984:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8000986:	2100      	movs	r1, #0
 8000988:	2040      	movs	r0, #64	@ 0x40
 800098a:	f7ff ff8f 	bl	80008ac <SD_SendCmd>
 800098e:	4603      	mov	r3, r0
 8000990:	2b01      	cmp	r3, #1
 8000992:	f040 80a5 	bne.w	8000ae0 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8000996:	4b61      	ldr	r3, [pc, #388]	@ (8000b1c <SD_disk_initialize+0x1cc>)
 8000998:	2264      	movs	r2, #100	@ 0x64
 800099a:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800099c:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80009a0:	2048      	movs	r0, #72	@ 0x48
 80009a2:	f7ff ff83 	bl	80008ac <SD_SendCmd>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d158      	bne.n	8000a5e <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 80009ac:	2300      	movs	r3, #0
 80009ae:	73fb      	strb	r3, [r7, #15]
 80009b0:	e00c      	b.n	80009cc <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 80009b2:	7bfc      	ldrb	r4, [r7, #15]
 80009b4:	f7ff fe44 	bl	8000640 <SPI_RxByte>
 80009b8:	4603      	mov	r3, r0
 80009ba:	461a      	mov	r2, r3
 80009bc:	f104 0310 	add.w	r3, r4, #16
 80009c0:	443b      	add	r3, r7
 80009c2:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80009c6:	7bfb      	ldrb	r3, [r7, #15]
 80009c8:	3301      	adds	r3, #1
 80009ca:	73fb      	strb	r3, [r7, #15]
 80009cc:	7bfb      	ldrb	r3, [r7, #15]
 80009ce:	2b03      	cmp	r3, #3
 80009d0:	d9ef      	bls.n	80009b2 <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80009d2:	7abb      	ldrb	r3, [r7, #10]
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	f040 8083 	bne.w	8000ae0 <SD_disk_initialize+0x190>
 80009da:	7afb      	ldrb	r3, [r7, #11]
 80009dc:	2baa      	cmp	r3, #170	@ 0xaa
 80009de:	d17f      	bne.n	8000ae0 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 80009e0:	2100      	movs	r1, #0
 80009e2:	2077      	movs	r0, #119	@ 0x77
 80009e4:	f7ff ff62 	bl	80008ac <SD_SendCmd>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d807      	bhi.n	80009fe <SD_disk_initialize+0xae>
 80009ee:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80009f2:	2069      	movs	r0, #105	@ 0x69
 80009f4:	f7ff ff5a 	bl	80008ac <SD_SendCmd>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d005      	beq.n	8000a0a <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 80009fe:	4b47      	ldr	r3, [pc, #284]	@ (8000b1c <SD_disk_initialize+0x1cc>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d1eb      	bne.n	80009e0 <SD_disk_initialize+0x90>
 8000a08:	e000      	b.n	8000a0c <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8000a0a:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000a0c:	4b43      	ldr	r3, [pc, #268]	@ (8000b1c <SD_disk_initialize+0x1cc>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d064      	beq.n	8000ae0 <SD_disk_initialize+0x190>
 8000a16:	2100      	movs	r1, #0
 8000a18:	207a      	movs	r0, #122	@ 0x7a
 8000a1a:	f7ff ff47 	bl	80008ac <SD_SendCmd>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d15d      	bne.n	8000ae0 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8000a24:	2300      	movs	r3, #0
 8000a26:	73fb      	strb	r3, [r7, #15]
 8000a28:	e00c      	b.n	8000a44 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8000a2a:	7bfc      	ldrb	r4, [r7, #15]
 8000a2c:	f7ff fe08 	bl	8000640 <SPI_RxByte>
 8000a30:	4603      	mov	r3, r0
 8000a32:	461a      	mov	r2, r3
 8000a34:	f104 0310 	add.w	r3, r4, #16
 8000a38:	443b      	add	r3, r7
 8000a3a:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8000a3e:	7bfb      	ldrb	r3, [r7, #15]
 8000a40:	3301      	adds	r3, #1
 8000a42:	73fb      	strb	r3, [r7, #15]
 8000a44:	7bfb      	ldrb	r3, [r7, #15]
 8000a46:	2b03      	cmp	r3, #3
 8000a48:	d9ef      	bls.n	8000a2a <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8000a4a:	7a3b      	ldrb	r3, [r7, #8]
 8000a4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <SD_disk_initialize+0x108>
 8000a54:	2306      	movs	r3, #6
 8000a56:	e000      	b.n	8000a5a <SD_disk_initialize+0x10a>
 8000a58:	2302      	movs	r3, #2
 8000a5a:	73bb      	strb	r3, [r7, #14]
 8000a5c:	e040      	b.n	8000ae0 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8000a5e:	2100      	movs	r1, #0
 8000a60:	2077      	movs	r0, #119	@ 0x77
 8000a62:	f7ff ff23 	bl	80008ac <SD_SendCmd>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d808      	bhi.n	8000a7e <SD_disk_initialize+0x12e>
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	2069      	movs	r0, #105	@ 0x69
 8000a70:	f7ff ff1c 	bl	80008ac <SD_SendCmd>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d801      	bhi.n	8000a7e <SD_disk_initialize+0x12e>
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	e000      	b.n	8000a80 <SD_disk_initialize+0x130>
 8000a7e:	2301      	movs	r3, #1
 8000a80:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8000a82:	7bbb      	ldrb	r3, [r7, #14]
 8000a84:	2b02      	cmp	r3, #2
 8000a86:	d10e      	bne.n	8000aa6 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8000a88:	2100      	movs	r1, #0
 8000a8a:	2077      	movs	r0, #119	@ 0x77
 8000a8c:	f7ff ff0e 	bl	80008ac <SD_SendCmd>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d80e      	bhi.n	8000ab4 <SD_disk_initialize+0x164>
 8000a96:	2100      	movs	r1, #0
 8000a98:	2069      	movs	r0, #105	@ 0x69
 8000a9a:	f7ff ff07 	bl	80008ac <SD_SendCmd>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d107      	bne.n	8000ab4 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8000aa4:	e00d      	b.n	8000ac2 <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	2041      	movs	r0, #65	@ 0x41
 8000aaa:	f7ff feff 	bl	80008ac <SD_SendCmd>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d005      	beq.n	8000ac0 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8000ab4:	4b19      	ldr	r3, [pc, #100]	@ (8000b1c <SD_disk_initialize+0x1cc>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d1e1      	bne.n	8000a82 <SD_disk_initialize+0x132>
 8000abe:	e000      	b.n	8000ac2 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8000ac0:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8000ac2:	4b16      	ldr	r3, [pc, #88]	@ (8000b1c <SD_disk_initialize+0x1cc>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d007      	beq.n	8000adc <SD_disk_initialize+0x18c>
 8000acc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ad0:	2050      	movs	r0, #80	@ 0x50
 8000ad2:	f7ff feeb 	bl	80008ac <SD_SendCmd>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8000ae0:	4a0f      	ldr	r2, [pc, #60]	@ (8000b20 <SD_disk_initialize+0x1d0>)
 8000ae2:	7bbb      	ldrb	r3, [r7, #14]
 8000ae4:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8000ae6:	f7ff fd85 	bl	80005f4 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8000aea:	f7ff fda9 	bl	8000640 <SPI_RxByte>

  if (type)
 8000aee:	7bbb      	ldrb	r3, [r7, #14]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d008      	beq.n	8000b06 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8000af4:	4b08      	ldr	r3, [pc, #32]	@ (8000b18 <SD_disk_initialize+0x1c8>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	f023 0301 	bic.w	r3, r3, #1
 8000afe:	b2da      	uxtb	r2, r3
 8000b00:	4b05      	ldr	r3, [pc, #20]	@ (8000b18 <SD_disk_initialize+0x1c8>)
 8000b02:	701a      	strb	r2, [r3, #0]
 8000b04:	e001      	b.n	8000b0a <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8000b06:	f7ff fe2f 	bl	8000768 <SD_PowerOff>
  }

  return Stat;
 8000b0a:	4b03      	ldr	r3, [pc, #12]	@ (8000b18 <SD_disk_initialize+0x1c8>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	b2db      	uxtb	r3, r3
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3714      	adds	r7, #20
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd90      	pop	{r4, r7, pc}
 8000b18:	20000000 	.word	0x20000000
 8000b1c:	20000145 	.word	0x20000145
 8000b20:	2000009c 	.word	0x2000009c

08000b24 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <SD_disk_status+0x14>
    return STA_NOINIT;
 8000b34:	2301      	movs	r3, #1
 8000b36:	e002      	b.n	8000b3e <SD_disk_status+0x1a>

  return Stat;
 8000b38:	4b04      	ldr	r3, [pc, #16]	@ (8000b4c <SD_disk_status+0x28>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	b2db      	uxtb	r3, r3
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	20000000 	.word	0x20000000

08000b50 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	60b9      	str	r1, [r7, #8]
 8000b58:	607a      	str	r2, [r7, #4]
 8000b5a:	603b      	str	r3, [r7, #0]
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000b60:	7bfb      	ldrb	r3, [r7, #15]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d102      	bne.n	8000b6c <SD_disk_read+0x1c>
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d101      	bne.n	8000b70 <SD_disk_read+0x20>
    return RES_PARERR;
 8000b6c:	2304      	movs	r3, #4
 8000b6e:	e051      	b.n	8000c14 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8000b70:	4b2a      	ldr	r3, [pc, #168]	@ (8000c1c <SD_disk_read+0xcc>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	e048      	b.n	8000c14 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8000b82:	4b27      	ldr	r3, [pc, #156]	@ (8000c20 <SD_disk_read+0xd0>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	f003 0304 	and.w	r3, r3, #4
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d102      	bne.n	8000b94 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	025b      	lsls	r3, r3, #9
 8000b92:	607b      	str	r3, [r7, #4]

  SELECT();
 8000b94:	f7ff fd22 	bl	80005dc <SELECT>

  if (count == 1)
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d111      	bne.n	8000bc2 <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8000b9e:	6879      	ldr	r1, [r7, #4]
 8000ba0:	2051      	movs	r0, #81	@ 0x51
 8000ba2:	f7ff fe83 	bl	80008ac <SD_SendCmd>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d129      	bne.n	8000c00 <SD_disk_read+0xb0>
 8000bac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bb0:	68b8      	ldr	r0, [r7, #8]
 8000bb2:	f7ff fdf1 	bl	8000798 <SD_RxDataBlock>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d021      	beq.n	8000c00 <SD_disk_read+0xb0>
      count = 0;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	603b      	str	r3, [r7, #0]
 8000bc0:	e01e      	b.n	8000c00 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8000bc2:	6879      	ldr	r1, [r7, #4]
 8000bc4:	2052      	movs	r0, #82	@ 0x52
 8000bc6:	f7ff fe71 	bl	80008ac <SD_SendCmd>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d117      	bne.n	8000c00 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8000bd0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bd4:	68b8      	ldr	r0, [r7, #8]
 8000bd6:	f7ff fddf 	bl	8000798 <SD_RxDataBlock>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d00a      	beq.n	8000bf6 <SD_disk_read+0xa6>
          break;

        buff += 512;
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000be6:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	3b01      	subs	r3, #1
 8000bec:	603b      	str	r3, [r7, #0]
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d1ed      	bne.n	8000bd0 <SD_disk_read+0x80>
 8000bf4:	e000      	b.n	8000bf8 <SD_disk_read+0xa8>
          break;
 8000bf6:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	204c      	movs	r0, #76	@ 0x4c
 8000bfc:	f7ff fe56 	bl	80008ac <SD_SendCmd>
    }
  }

  DESELECT();
 8000c00:	f7ff fcf8 	bl	80005f4 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8000c04:	f7ff fd1c 	bl	8000640 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	bf14      	ite	ne
 8000c0e:	2301      	movne	r3, #1
 8000c10:	2300      	moveq	r3, #0
 8000c12:	b2db      	uxtb	r3, r3
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3710      	adds	r7, #16
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20000000 	.word	0x20000000
 8000c20:	2000009c 	.word	0x2000009c

08000c24 <SD_disk_write>:
/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60b9      	str	r1, [r7, #8]
 8000c2c:	607a      	str	r2, [r7, #4]
 8000c2e:	603b      	str	r3, [r7, #0]
 8000c30:	4603      	mov	r3, r0
 8000c32:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000c34:	7bfb      	ldrb	r3, [r7, #15]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d102      	bne.n	8000c40 <SD_disk_write+0x1c>
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d101      	bne.n	8000c44 <SD_disk_write+0x20>
    return RES_PARERR;
 8000c40:	2304      	movs	r3, #4
 8000c42:	e06b      	b.n	8000d1c <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8000c44:	4b37      	ldr	r3, [pc, #220]	@ (8000d24 <SD_disk_write+0x100>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8000c52:	2303      	movs	r3, #3
 8000c54:	e062      	b.n	8000d1c <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 8000c56:	4b33      	ldr	r3, [pc, #204]	@ (8000d24 <SD_disk_write+0x100>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	f003 0304 	and.w	r3, r3, #4
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <SD_disk_write+0x44>
    return RES_WRPRT;
 8000c64:	2302      	movs	r3, #2
 8000c66:	e059      	b.n	8000d1c <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8000c68:	4b2f      	ldr	r3, [pc, #188]	@ (8000d28 <SD_disk_write+0x104>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	f003 0304 	and.w	r3, r3, #4
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d102      	bne.n	8000c7a <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	025b      	lsls	r3, r3, #9
 8000c78:	607b      	str	r3, [r7, #4]

  SELECT();
 8000c7a:	f7ff fcaf 	bl	80005dc <SELECT>

  if (count == 1)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d110      	bne.n	8000ca6 <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000c84:	6879      	ldr	r1, [r7, #4]
 8000c86:	2058      	movs	r0, #88	@ 0x58
 8000c88:	f7ff fe10 	bl	80008ac <SD_SendCmd>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d13a      	bne.n	8000d08 <SD_disk_write+0xe4>
 8000c92:	21fe      	movs	r1, #254	@ 0xfe
 8000c94:	68b8      	ldr	r0, [r7, #8]
 8000c96:	f7ff fdb5 	bl	8000804 <SD_TxDataBlock>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d033      	beq.n	8000d08 <SD_disk_write+0xe4>
      count = 0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	603b      	str	r3, [r7, #0]
 8000ca4:	e030      	b.n	8000d08 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8000ca6:	4b20      	ldr	r3, [pc, #128]	@ (8000d28 <SD_disk_write+0x104>)
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	f003 0302 	and.w	r3, r3, #2
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d007      	beq.n	8000cc2 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	2077      	movs	r0, #119	@ 0x77
 8000cb6:	f7ff fdf9 	bl	80008ac <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8000cba:	6839      	ldr	r1, [r7, #0]
 8000cbc:	2057      	movs	r0, #87	@ 0x57
 8000cbe:	f7ff fdf5 	bl	80008ac <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8000cc2:	6879      	ldr	r1, [r7, #4]
 8000cc4:	2059      	movs	r0, #89	@ 0x59
 8000cc6:	f7ff fdf1 	bl	80008ac <SD_SendCmd>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d11b      	bne.n	8000d08 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8000cd0:	21fc      	movs	r1, #252	@ 0xfc
 8000cd2:	68b8      	ldr	r0, [r7, #8]
 8000cd4:	f7ff fd96 	bl	8000804 <SD_TxDataBlock>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d00a      	beq.n	8000cf4 <SD_disk_write+0xd0>
          break;

        buff += 512;
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000ce4:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	603b      	str	r3, [r7, #0]
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d1ee      	bne.n	8000cd0 <SD_disk_write+0xac>
 8000cf2:	e000      	b.n	8000cf6 <SD_disk_write+0xd2>
          break;
 8000cf4:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8000cf6:	21fd      	movs	r1, #253	@ 0xfd
 8000cf8:	2000      	movs	r0, #0
 8000cfa:	f7ff fd83 	bl	8000804 <SD_TxDataBlock>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d101      	bne.n	8000d08 <SD_disk_write+0xe4>
      {
        count = 1;
 8000d04:	2301      	movs	r3, #1
 8000d06:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8000d08:	f7ff fc74 	bl	80005f4 <DESELECT>
  SPI_RxByte();
 8000d0c:	f7ff fc98 	bl	8000640 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	bf14      	ite	ne
 8000d16:	2301      	movne	r3, #1
 8000d18:	2300      	moveq	r3, #0
 8000d1a:	b2db      	uxtb	r3, r3
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3710      	adds	r7, #16
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20000000 	.word	0x20000000
 8000d28:	2000009c 	.word	0x2000009c

08000d2c <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000d2c:	b590      	push	{r4, r7, lr}
 8000d2e:	b08b      	sub	sp, #44	@ 0x2c
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	603a      	str	r2, [r7, #0]
 8000d36:	71fb      	strb	r3, [r7, #7]
 8000d38:	460b      	mov	r3, r1
 8000d3a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8000d46:	2304      	movs	r3, #4
 8000d48:	e119      	b.n	8000f7e <SD_disk_ioctl+0x252>

  res = RES_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 8000d50:	79bb      	ldrb	r3, [r7, #6]
 8000d52:	2b05      	cmp	r3, #5
 8000d54:	d129      	bne.n	8000daa <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 8000d56:	6a3b      	ldr	r3, [r7, #32]
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	2b02      	cmp	r3, #2
 8000d5c:	d017      	beq.n	8000d8e <SD_disk_ioctl+0x62>
 8000d5e:	2b02      	cmp	r3, #2
 8000d60:	dc1f      	bgt.n	8000da2 <SD_disk_ioctl+0x76>
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d002      	beq.n	8000d6c <SD_disk_ioctl+0x40>
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d00b      	beq.n	8000d82 <SD_disk_ioctl+0x56>
 8000d6a:	e01a      	b.n	8000da2 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8000d6c:	f7ff fd08 	bl	8000780 <SD_CheckPower>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8000d76:	f7ff fcf7 	bl	8000768 <SD_PowerOff>
      res = RES_OK;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000d80:	e0fb      	b.n	8000f7a <SD_disk_ioctl+0x24e>
    case 1:
      SD_PowerOn();             /* Power On */
 8000d82:	f7ff fca5 	bl	80006d0 <SD_PowerOn>
      res = RES_OK;
 8000d86:	2300      	movs	r3, #0
 8000d88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000d8c:	e0f5      	b.n	8000f7a <SD_disk_ioctl+0x24e>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8000d8e:	6a3b      	ldr	r3, [r7, #32]
 8000d90:	1c5c      	adds	r4, r3, #1
 8000d92:	f7ff fcf5 	bl	8000780 <SD_CheckPower>
 8000d96:	4603      	mov	r3, r0
 8000d98:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000da0:	e0eb      	b.n	8000f7a <SD_disk_ioctl+0x24e>
    default:
      res = RES_PARERR;
 8000da2:	2304      	movs	r3, #4
 8000da4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000da8:	e0e7      	b.n	8000f7a <SD_disk_ioctl+0x24e>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8000daa:	4b77      	ldr	r3, [pc, #476]	@ (8000f88 <SD_disk_ioctl+0x25c>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	f003 0301 	and.w	r3, r3, #1
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8000db8:	2303      	movs	r3, #3
 8000dba:	e0e0      	b.n	8000f7e <SD_disk_ioctl+0x252>

    SELECT();
 8000dbc:	f7ff fc0e 	bl	80005dc <SELECT>

    switch (ctrl)
 8000dc0:	79bb      	ldrb	r3, [r7, #6]
 8000dc2:	2b0d      	cmp	r3, #13
 8000dc4:	f200 80ca 	bhi.w	8000f5c <SD_disk_ioctl+0x230>
 8000dc8:	a201      	add	r2, pc, #4	@ (adr r2, 8000dd0 <SD_disk_ioctl+0xa4>)
 8000dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dce:	bf00      	nop
 8000dd0:	08000ec7 	.word	0x08000ec7
 8000dd4:	08000e09 	.word	0x08000e09
 8000dd8:	08000eb7 	.word	0x08000eb7
 8000ddc:	08000f5d 	.word	0x08000f5d
 8000de0:	08000f5d 	.word	0x08000f5d
 8000de4:	08000f5d 	.word	0x08000f5d
 8000de8:	08000f5d 	.word	0x08000f5d
 8000dec:	08000f5d 	.word	0x08000f5d
 8000df0:	08000f5d 	.word	0x08000f5d
 8000df4:	08000f5d 	.word	0x08000f5d
 8000df8:	08000f5d 	.word	0x08000f5d
 8000dfc:	08000ed9 	.word	0x08000ed9
 8000e00:	08000efd 	.word	0x08000efd
 8000e04:	08000f21 	.word	0x08000f21
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000e08:	2100      	movs	r1, #0
 8000e0a:	2049      	movs	r0, #73	@ 0x49
 8000e0c:	f7ff fd4e 	bl	80008ac <SD_SendCmd>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	f040 80a6 	bne.w	8000f64 <SD_disk_ioctl+0x238>
 8000e18:	f107 030c 	add.w	r3, r7, #12
 8000e1c:	2110      	movs	r1, #16
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff fcba 	bl	8000798 <SD_RxDataBlock>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	f000 809c 	beq.w	8000f64 <SD_disk_ioctl+0x238>
      {
        if ((csd[0] >> 6) == 1)
 8000e2c:	7b3b      	ldrb	r3, [r7, #12]
 8000e2e:	099b      	lsrs	r3, r3, #6
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d10d      	bne.n	8000e52 <SD_disk_ioctl+0x126>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000e36:	7d7b      	ldrb	r3, [r7, #21]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	7d3b      	ldrb	r3, [r7, #20]
 8000e3c:	021b      	lsls	r3, r3, #8
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	4413      	add	r3, r2
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	3301      	adds	r3, #1
 8000e46:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8000e48:	8bfb      	ldrh	r3, [r7, #30]
 8000e4a:	029a      	lsls	r2, r3, #10
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	e02d      	b.n	8000eae <SD_disk_ioctl+0x182>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000e52:	7c7b      	ldrb	r3, [r7, #17]
 8000e54:	f003 030f 	and.w	r3, r3, #15
 8000e58:	b2da      	uxtb	r2, r3
 8000e5a:	7dbb      	ldrb	r3, [r7, #22]
 8000e5c:	09db      	lsrs	r3, r3, #7
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	4413      	add	r3, r2
 8000e62:	b2da      	uxtb	r2, r3
 8000e64:	7d7b      	ldrb	r3, [r7, #21]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	f003 0306 	and.w	r3, r3, #6
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	4413      	add	r3, r2
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	3302      	adds	r3, #2
 8000e76:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000e7a:	7d3b      	ldrb	r3, [r7, #20]
 8000e7c:	099b      	lsrs	r3, r3, #6
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	461a      	mov	r2, r3
 8000e82:	7cfb      	ldrb	r3, [r7, #19]
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	4413      	add	r3, r2
 8000e8a:	b29a      	uxth	r2, r3
 8000e8c:	7cbb      	ldrb	r3, [r7, #18]
 8000e8e:	029b      	lsls	r3, r3, #10
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000e96:	b29b      	uxth	r3, r3
 8000e98:	4413      	add	r3, r2
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8000ea0:	8bfa      	ldrh	r2, [r7, #30]
 8000ea2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000ea6:	3b09      	subs	r3, #9
 8000ea8:	409a      	lsls	r2, r3
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8000eb4:	e056      	b.n	8000f64 <SD_disk_ioctl+0x238>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ebc:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000ec4:	e055      	b.n	8000f72 <SD_disk_ioctl+0x246>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8000ec6:	f7ff fbe7 	bl	8000698 <SD_ReadyWait>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2bff      	cmp	r3, #255	@ 0xff
 8000ece:	d14b      	bne.n	8000f68 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000ed6:	e047      	b.n	8000f68 <SD_disk_ioctl+0x23c>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000ed8:	2100      	movs	r1, #0
 8000eda:	2049      	movs	r0, #73	@ 0x49
 8000edc:	f7ff fce6 	bl	80008ac <SD_SendCmd>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d142      	bne.n	8000f6c <SD_disk_ioctl+0x240>
 8000ee6:	2110      	movs	r1, #16
 8000ee8:	6a38      	ldr	r0, [r7, #32]
 8000eea:	f7ff fc55 	bl	8000798 <SD_RxDataBlock>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d03b      	beq.n	8000f6c <SD_disk_ioctl+0x240>
        res = RES_OK;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000efa:	e037      	b.n	8000f6c <SD_disk_ioctl+0x240>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000efc:	2100      	movs	r1, #0
 8000efe:	204a      	movs	r0, #74	@ 0x4a
 8000f00:	f7ff fcd4 	bl	80008ac <SD_SendCmd>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d132      	bne.n	8000f70 <SD_disk_ioctl+0x244>
 8000f0a:	2110      	movs	r1, #16
 8000f0c:	6a38      	ldr	r0, [r7, #32]
 8000f0e:	f7ff fc43 	bl	8000798 <SD_RxDataBlock>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d02b      	beq.n	8000f70 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000f1e:	e027      	b.n	8000f70 <SD_disk_ioctl+0x244>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8000f20:	2100      	movs	r1, #0
 8000f22:	207a      	movs	r0, #122	@ 0x7a
 8000f24:	f7ff fcc2 	bl	80008ac <SD_SendCmd>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d116      	bne.n	8000f5c <SD_disk_ioctl+0x230>
      {
        for (n = 0; n < 4; n++)
 8000f2e:	2300      	movs	r3, #0
 8000f30:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000f34:	e00b      	b.n	8000f4e <SD_disk_ioctl+0x222>
        {
          *ptr++ = SPI_RxByte();
 8000f36:	6a3c      	ldr	r4, [r7, #32]
 8000f38:	1c63      	adds	r3, r4, #1
 8000f3a:	623b      	str	r3, [r7, #32]
 8000f3c:	f7ff fb80 	bl	8000640 <SPI_RxByte>
 8000f40:	4603      	mov	r3, r0
 8000f42:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8000f44:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000f48:	3301      	adds	r3, #1
 8000f4a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000f4e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000f52:	2b03      	cmp	r3, #3
 8000f54:	d9ef      	bls.n	8000f36 <SD_disk_ioctl+0x20a>
        }

        res = RES_OK;
 8000f56:	2300      	movs	r3, #0
 8000f58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }

    default:
      res = RES_PARERR;
 8000f5c:	2304      	movs	r3, #4
 8000f5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000f62:	e006      	b.n	8000f72 <SD_disk_ioctl+0x246>
      break;
 8000f64:	bf00      	nop
 8000f66:	e004      	b.n	8000f72 <SD_disk_ioctl+0x246>
      break;
 8000f68:	bf00      	nop
 8000f6a:	e002      	b.n	8000f72 <SD_disk_ioctl+0x246>
      break;
 8000f6c:	bf00      	nop
 8000f6e:	e000      	b.n	8000f72 <SD_disk_ioctl+0x246>
      break;
 8000f70:	bf00      	nop
    }

    DESELECT();
 8000f72:	f7ff fb3f 	bl	80005f4 <DESELECT>
    SPI_RxByte();
 8000f76:	f7ff fb63 	bl	8000640 <SPI_RxByte>
  }

  return res;
 8000f7a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	372c      	adds	r7, #44	@ 0x2c
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd90      	pop	{r4, r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000000 	.word	0x20000000

08000f8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f90:	f000 fb5e 	bl	8001650 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f94:	f000 f80c 	bl	8000fb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f98:	f000 f8c8 	bl	800112c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000f9c:	f000 f866 	bl	800106c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000fa0:	f000 f89a 	bl	80010d8 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8000fa4:	f003 f816 	bl	8003fd4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  app();
 8000fa8:	f7ff fa96 	bl	80004d8 <app>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fac:	bf00      	nop
 8000fae:	e7fd      	b.n	8000fac <main+0x20>

08000fb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b094      	sub	sp, #80	@ 0x50
 8000fb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fb6:	f107 0320 	add.w	r3, r7, #32
 8000fba:	2230      	movs	r2, #48	@ 0x30
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f005 fd46 	bl	8006a50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc4:	f107 030c 	add.w	r3, r7, #12
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60bb      	str	r3, [r7, #8]
 8000fd8:	4b22      	ldr	r3, [pc, #136]	@ (8001064 <SystemClock_Config+0xb4>)
 8000fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fdc:	4a21      	ldr	r2, [pc, #132]	@ (8001064 <SystemClock_Config+0xb4>)
 8000fde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fe2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fe4:	4b1f      	ldr	r3, [pc, #124]	@ (8001064 <SystemClock_Config+0xb4>)
 8000fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fec:	60bb      	str	r3, [r7, #8]
 8000fee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	4b1c      	ldr	r3, [pc, #112]	@ (8001068 <SystemClock_Config+0xb8>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a1b      	ldr	r2, [pc, #108]	@ (8001068 <SystemClock_Config+0xb8>)
 8000ffa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000ffe:	6013      	str	r3, [r2, #0]
 8001000:	4b19      	ldr	r3, [pc, #100]	@ (8001068 <SystemClock_Config+0xb8>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001008:	607b      	str	r3, [r7, #4]
 800100a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800100c:	2302      	movs	r3, #2
 800100e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001010:	2301      	movs	r3, #1
 8001012:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001014:	2310      	movs	r3, #16
 8001016:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001018:	2300      	movs	r3, #0
 800101a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800101c:	f107 0320 	add.w	r3, r7, #32
 8001020:	4618      	mov	r0, r3
 8001022:	f000 fec9 	bl	8001db8 <HAL_RCC_OscConfig>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800102c:	f000 f8b0 	bl	8001190 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001030:	230f      	movs	r3, #15
 8001032:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001034:	2300      	movs	r3, #0
 8001036:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800103c:	2300      	movs	r3, #0
 800103e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001040:	2300      	movs	r3, #0
 8001042:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001044:	f107 030c 	add.w	r3, r7, #12
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f001 f92c 	bl	80022a8 <HAL_RCC_ClockConfig>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001056:	f000 f89b 	bl	8001190 <Error_Handler>
  }
}
 800105a:	bf00      	nop
 800105c:	3750      	adds	r7, #80	@ 0x50
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40023800 	.word	0x40023800
 8001068:	40007000 	.word	0x40007000

0800106c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001070:	4b17      	ldr	r3, [pc, #92]	@ (80010d0 <MX_SPI1_Init+0x64>)
 8001072:	4a18      	ldr	r2, [pc, #96]	@ (80010d4 <MX_SPI1_Init+0x68>)
 8001074:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001076:	4b16      	ldr	r3, [pc, #88]	@ (80010d0 <MX_SPI1_Init+0x64>)
 8001078:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800107c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800107e:	4b14      	ldr	r3, [pc, #80]	@ (80010d0 <MX_SPI1_Init+0x64>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001084:	4b12      	ldr	r3, [pc, #72]	@ (80010d0 <MX_SPI1_Init+0x64>)
 8001086:	2200      	movs	r2, #0
 8001088:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800108a:	4b11      	ldr	r3, [pc, #68]	@ (80010d0 <MX_SPI1_Init+0x64>)
 800108c:	2200      	movs	r2, #0
 800108e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001090:	4b0f      	ldr	r3, [pc, #60]	@ (80010d0 <MX_SPI1_Init+0x64>)
 8001092:	2200      	movs	r2, #0
 8001094:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001096:	4b0e      	ldr	r3, [pc, #56]	@ (80010d0 <MX_SPI1_Init+0x64>)
 8001098:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800109c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800109e:	4b0c      	ldr	r3, [pc, #48]	@ (80010d0 <MX_SPI1_Init+0x64>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010a4:	4b0a      	ldr	r3, [pc, #40]	@ (80010d0 <MX_SPI1_Init+0x64>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010aa:	4b09      	ldr	r3, [pc, #36]	@ (80010d0 <MX_SPI1_Init+0x64>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010b0:	4b07      	ldr	r3, [pc, #28]	@ (80010d0 <MX_SPI1_Init+0x64>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010b6:	4b06      	ldr	r3, [pc, #24]	@ (80010d0 <MX_SPI1_Init+0x64>)
 80010b8:	220a      	movs	r2, #10
 80010ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010bc:	4804      	ldr	r0, [pc, #16]	@ (80010d0 <MX_SPI1_Init+0x64>)
 80010be:	f001 fad3 	bl	8002668 <HAL_SPI_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80010c8:	f000 f862 	bl	8001190 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010cc:	bf00      	nop
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	200000a0 	.word	0x200000a0
 80010d4:	40013000 	.word	0x40013000

080010d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010dc:	4b11      	ldr	r3, [pc, #68]	@ (8001124 <MX_USART2_UART_Init+0x4c>)
 80010de:	4a12      	ldr	r2, [pc, #72]	@ (8001128 <MX_USART2_UART_Init+0x50>)
 80010e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010e2:	4b10      	ldr	r3, [pc, #64]	@ (8001124 <MX_USART2_UART_Init+0x4c>)
 80010e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001124 <MX_USART2_UART_Init+0x4c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001124 <MX_USART2_UART_Init+0x4c>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001124 <MX_USART2_UART_Init+0x4c>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010fc:	4b09      	ldr	r3, [pc, #36]	@ (8001124 <MX_USART2_UART_Init+0x4c>)
 80010fe:	220c      	movs	r2, #12
 8001100:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001102:	4b08      	ldr	r3, [pc, #32]	@ (8001124 <MX_USART2_UART_Init+0x4c>)
 8001104:	2200      	movs	r2, #0
 8001106:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001108:	4b06      	ldr	r3, [pc, #24]	@ (8001124 <MX_USART2_UART_Init+0x4c>)
 800110a:	2200      	movs	r2, #0
 800110c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800110e:	4805      	ldr	r0, [pc, #20]	@ (8001124 <MX_USART2_UART_Init+0x4c>)
 8001110:	f001 ff0a 	bl	8002f28 <HAL_UART_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800111a:	f000 f839 	bl	8001190 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	200000f8 	.word	0x200000f8
 8001128:	40004400 	.word	0x40004400

0800112c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001132:	1d3b      	adds	r3, r7, #4
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001140:	2300      	movs	r3, #0
 8001142:	603b      	str	r3, [r7, #0]
 8001144:	4b10      	ldr	r3, [pc, #64]	@ (8001188 <MX_GPIO_Init+0x5c>)
 8001146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001148:	4a0f      	ldr	r2, [pc, #60]	@ (8001188 <MX_GPIO_Init+0x5c>)
 800114a:	f043 0301 	orr.w	r3, r3, #1
 800114e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001150:	4b0d      	ldr	r3, [pc, #52]	@ (8001188 <MX_GPIO_Init+0x5c>)
 8001152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001154:	f003 0301 	and.w	r3, r3, #1
 8001158:	603b      	str	r3, [r7, #0]
 800115a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800115c:	2200      	movs	r2, #0
 800115e:	2110      	movs	r1, #16
 8001160:	480a      	ldr	r0, [pc, #40]	@ (800118c <MX_GPIO_Init+0x60>)
 8001162:	f000 fe0f 	bl	8001d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001166:	2310      	movs	r3, #16
 8001168:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116a:	2301      	movs	r3, #1
 800116c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001172:	2300      	movs	r3, #0
 8001174:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001176:	1d3b      	adds	r3, r7, #4
 8001178:	4619      	mov	r1, r3
 800117a:	4804      	ldr	r0, [pc, #16]	@ (800118c <MX_GPIO_Init+0x60>)
 800117c:	f000 fc7e 	bl	8001a7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001180:	bf00      	nop
 8001182:	3718      	adds	r7, #24
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40023800 	.word	0x40023800
 800118c:	40020000 	.word	0x40020000

08001190 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001194:	b672      	cpsid	i
}
 8001196:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001198:	bf00      	nop
 800119a:	e7fd      	b.n	8001198 <Error_Handler+0x8>

0800119c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	4b10      	ldr	r3, [pc, #64]	@ (80011e8 <HAL_MspInit+0x4c>)
 80011a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011aa:	4a0f      	ldr	r2, [pc, #60]	@ (80011e8 <HAL_MspInit+0x4c>)
 80011ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80011b2:	4b0d      	ldr	r3, [pc, #52]	@ (80011e8 <HAL_MspInit+0x4c>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	603b      	str	r3, [r7, #0]
 80011c2:	4b09      	ldr	r3, [pc, #36]	@ (80011e8 <HAL_MspInit+0x4c>)
 80011c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c6:	4a08      	ldr	r2, [pc, #32]	@ (80011e8 <HAL_MspInit+0x4c>)
 80011c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80011ce:	4b06      	ldr	r3, [pc, #24]	@ (80011e8 <HAL_MspInit+0x4c>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011d6:	603b      	str	r3, [r7, #0]
 80011d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	40023800 	.word	0x40023800

080011ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08a      	sub	sp, #40	@ 0x28
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
 8001202:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a19      	ldr	r2, [pc, #100]	@ (8001270 <HAL_SPI_MspInit+0x84>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d12b      	bne.n	8001266 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	613b      	str	r3, [r7, #16]
 8001212:	4b18      	ldr	r3, [pc, #96]	@ (8001274 <HAL_SPI_MspInit+0x88>)
 8001214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001216:	4a17      	ldr	r2, [pc, #92]	@ (8001274 <HAL_SPI_MspInit+0x88>)
 8001218:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800121c:	6453      	str	r3, [r2, #68]	@ 0x44
 800121e:	4b15      	ldr	r3, [pc, #84]	@ (8001274 <HAL_SPI_MspInit+0x88>)
 8001220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001222:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001226:	613b      	str	r3, [r7, #16]
 8001228:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	60fb      	str	r3, [r7, #12]
 800122e:	4b11      	ldr	r3, [pc, #68]	@ (8001274 <HAL_SPI_MspInit+0x88>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001232:	4a10      	ldr	r2, [pc, #64]	@ (8001274 <HAL_SPI_MspInit+0x88>)
 8001234:	f043 0301 	orr.w	r3, r3, #1
 8001238:	6313      	str	r3, [r2, #48]	@ 0x30
 800123a:	4b0e      	ldr	r3, [pc, #56]	@ (8001274 <HAL_SPI_MspInit+0x88>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001246:	23e0      	movs	r3, #224	@ 0xe0
 8001248:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124a:	2302      	movs	r3, #2
 800124c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001252:	2303      	movs	r3, #3
 8001254:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001256:	2305      	movs	r3, #5
 8001258:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125a:	f107 0314 	add.w	r3, r7, #20
 800125e:	4619      	mov	r1, r3
 8001260:	4805      	ldr	r0, [pc, #20]	@ (8001278 <HAL_SPI_MspInit+0x8c>)
 8001262:	f000 fc0b 	bl	8001a7c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001266:	bf00      	nop
 8001268:	3728      	adds	r7, #40	@ 0x28
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40013000 	.word	0x40013000
 8001274:	40023800 	.word	0x40023800
 8001278:	40020000 	.word	0x40020000

0800127c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08a      	sub	sp, #40	@ 0x28
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001284:	f107 0314 	add.w	r3, r7, #20
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a1d      	ldr	r2, [pc, #116]	@ (8001310 <HAL_UART_MspInit+0x94>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d133      	bne.n	8001306 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001314 <HAL_UART_MspInit+0x98>)
 80012a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a6:	4a1b      	ldr	r2, [pc, #108]	@ (8001314 <HAL_UART_MspInit+0x98>)
 80012a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80012ae:	4b19      	ldr	r3, [pc, #100]	@ (8001314 <HAL_UART_MspInit+0x98>)
 80012b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012b6:	613b      	str	r3, [r7, #16]
 80012b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	4b15      	ldr	r3, [pc, #84]	@ (8001314 <HAL_UART_MspInit+0x98>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c2:	4a14      	ldr	r2, [pc, #80]	@ (8001314 <HAL_UART_MspInit+0x98>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ca:	4b12      	ldr	r3, [pc, #72]	@ (8001314 <HAL_UART_MspInit+0x98>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012d6:	230c      	movs	r3, #12
 80012d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012da:	2302      	movs	r3, #2
 80012dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e2:	2303      	movs	r3, #3
 80012e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012e6:	2307      	movs	r3, #7
 80012e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ea:	f107 0314 	add.w	r3, r7, #20
 80012ee:	4619      	mov	r1, r3
 80012f0:	4809      	ldr	r0, [pc, #36]	@ (8001318 <HAL_UART_MspInit+0x9c>)
 80012f2:	f000 fbc3 	bl	8001a7c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2100      	movs	r1, #0
 80012fa:	2026      	movs	r0, #38	@ 0x26
 80012fc:	f000 faf5 	bl	80018ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001300:	2026      	movs	r0, #38	@ 0x26
 8001302:	f000 fb0e 	bl	8001922 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001306:	bf00      	nop
 8001308:	3728      	adds	r7, #40	@ 0x28
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40004400 	.word	0x40004400
 8001314:	40023800 	.word	0x40023800
 8001318:	40020000 	.word	0x40020000

0800131c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001320:	bf00      	nop
 8001322:	e7fd      	b.n	8001320 <NMI_Handler+0x4>

08001324 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001328:	bf00      	nop
 800132a:	e7fd      	b.n	8001328 <HardFault_Handler+0x4>

0800132c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001330:	bf00      	nop
 8001332:	e7fd      	b.n	8001330 <MemManage_Handler+0x4>

08001334 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001338:	bf00      	nop
 800133a:	e7fd      	b.n	8001338 <BusFault_Handler+0x4>

0800133c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001340:	bf00      	nop
 8001342:	e7fd      	b.n	8001340 <UsageFault_Handler+0x4>

08001344 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr

08001352 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001372:	f000 f9bf 	bl	80016f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  SystickCallback();
 8001376:	f000 f8cb 	bl	8001510 <SystickCallback>
  /* USER CODE END SysTick_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
	...

08001380 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001384:	4802      	ldr	r0, [pc, #8]	@ (8001390 <USART2_IRQHandler+0x10>)
 8001386:	f001 fecf 	bl	8003128 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	200000f8 	.word	0x200000f8

08001394 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]
 80013a4:	e00a      	b.n	80013bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013a6:	f3af 8000 	nop.w
 80013aa:	4601      	mov	r1, r0
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	1c5a      	adds	r2, r3, #1
 80013b0:	60ba      	str	r2, [r7, #8]
 80013b2:	b2ca      	uxtb	r2, r1
 80013b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	3301      	adds	r3, #1
 80013ba:	617b      	str	r3, [r7, #20]
 80013bc:	697a      	ldr	r2, [r7, #20]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	dbf0      	blt.n	80013a6 <_read+0x12>
  }

  return len;
 80013c4:	687b      	ldr	r3, [r7, #4]
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <_close>:
  }
  return len;
}

int _close(int file)
{
 80013ce:	b480      	push	{r7}
 80013d0:	b083      	sub	sp, #12
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80013da:	4618      	mov	r0, r3
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr

080013e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013e6:	b480      	push	{r7}
 80013e8:	b083      	sub	sp, #12
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
 80013ee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013f6:	605a      	str	r2, [r3, #4]
  return 0;
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <_isatty>:

int _isatty(int file)
{
 8001406:	b480      	push	{r7}
 8001408:	b083      	sub	sp, #12
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800140e:	2301      	movs	r3, #1
}
 8001410:	4618      	mov	r0, r3
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3714      	adds	r7, #20
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
	...

08001438 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001440:	4a14      	ldr	r2, [pc, #80]	@ (8001494 <_sbrk+0x5c>)
 8001442:	4b15      	ldr	r3, [pc, #84]	@ (8001498 <_sbrk+0x60>)
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800144c:	4b13      	ldr	r3, [pc, #76]	@ (800149c <_sbrk+0x64>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d102      	bne.n	800145a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001454:	4b11      	ldr	r3, [pc, #68]	@ (800149c <_sbrk+0x64>)
 8001456:	4a12      	ldr	r2, [pc, #72]	@ (80014a0 <_sbrk+0x68>)
 8001458:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800145a:	4b10      	ldr	r3, [pc, #64]	@ (800149c <_sbrk+0x64>)
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4413      	add	r3, r2
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	429a      	cmp	r2, r3
 8001466:	d207      	bcs.n	8001478 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001468:	f005 fb0a 	bl	8006a80 <__errno>
 800146c:	4603      	mov	r3, r0
 800146e:	220c      	movs	r2, #12
 8001470:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001472:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001476:	e009      	b.n	800148c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001478:	4b08      	ldr	r3, [pc, #32]	@ (800149c <_sbrk+0x64>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800147e:	4b07      	ldr	r3, [pc, #28]	@ (800149c <_sbrk+0x64>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4413      	add	r3, r2
 8001486:	4a05      	ldr	r2, [pc, #20]	@ (800149c <_sbrk+0x64>)
 8001488:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800148a:	68fb      	ldr	r3, [r7, #12]
}
 800148c:	4618      	mov	r0, r3
 800148e:	3718      	adds	r7, #24
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	20020000 	.word	0x20020000
 8001498:	00000400 	.word	0x00000400
 800149c:	20000140 	.word	0x20000140
 80014a0:	20000348 	.word	0x20000348

080014a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014a8:	4b06      	ldr	r3, [pc, #24]	@ (80014c4 <SystemInit+0x20>)
 80014aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014ae:	4a05      	ldr	r2, [pc, #20]	@ (80014c4 <SystemInit+0x20>)
 80014b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <SDTimer_Handler>:

volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 80014cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001508 <SDTimer_Handler+0x40>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d006      	beq.n	80014e4 <SDTimer_Handler+0x1c>
    Timer1--;
 80014d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001508 <SDTimer_Handler+0x40>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	3b01      	subs	r3, #1
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	4b09      	ldr	r3, [pc, #36]	@ (8001508 <SDTimer_Handler+0x40>)
 80014e2:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 80014e4:	4b09      	ldr	r3, [pc, #36]	@ (800150c <SDTimer_Handler+0x44>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d006      	beq.n	80014fc <SDTimer_Handler+0x34>
    Timer2--;
 80014ee:	4b07      	ldr	r3, [pc, #28]	@ (800150c <SDTimer_Handler+0x44>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	3b01      	subs	r3, #1
 80014f6:	b2da      	uxtb	r2, r3
 80014f8:	4b04      	ldr	r3, [pc, #16]	@ (800150c <SDTimer_Handler+0x44>)
 80014fa:	701a      	strb	r2, [r3, #0]
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	20000145 	.word	0x20000145
 800150c:	20000146 	.word	0x20000146

08001510 <SystickCallback>:

void SystickCallback() {
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
	FatFsCnt++;
 8001514:	4b09      	ldr	r3, [pc, #36]	@ (800153c <SystickCallback+0x2c>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	b2db      	uxtb	r3, r3
 800151a:	3301      	adds	r3, #1
 800151c:	b2da      	uxtb	r2, r3
 800151e:	4b07      	ldr	r3, [pc, #28]	@ (800153c <SystickCallback+0x2c>)
 8001520:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 8001522:	4b06      	ldr	r3, [pc, #24]	@ (800153c <SystickCallback+0x2c>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	b2db      	uxtb	r3, r3
 8001528:	2b09      	cmp	r3, #9
 800152a:	d904      	bls.n	8001536 <SystickCallback+0x26>
	{
		FatFsCnt = 0;
 800152c:	4b03      	ldr	r3, [pc, #12]	@ (800153c <SystickCallback+0x2c>)
 800152e:	2200      	movs	r2, #0
 8001530:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8001532:	f7ff ffc9 	bl	80014c8 <SDTimer_Handler>
	}
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20000144 	.word	0x20000144

08001540 <_write>:
char rxChar;
char rxBuffer[rxBufferMax];
uint8_t	rxBufferWriteIndex;
uint8_t rxBufferReadIndex;

int _write(int file, char* p, int len){
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(myHuart, p, len, 10);
 800154c:	4b06      	ldr	r3, [pc, #24]	@ (8001568 <_write+0x28>)
 800154e:	6818      	ldr	r0, [r3, #0]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	b29a      	uxth	r2, r3
 8001554:	230a      	movs	r3, #10
 8001556:	68b9      	ldr	r1, [r7, #8]
 8001558:	f001 fd36 	bl	8002fc8 <HAL_UART_Transmit>
	return len;
 800155c:	687b      	ldr	r3, [r7, #4]
}
 800155e:	4618      	mov	r0, r3
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000148 	.word	0x20000148

0800156c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
	rxBuffer[rxBufferWriteIndex++] = rxChar;
 8001574:	4b11      	ldr	r3, [pc, #68]	@ (80015bc <HAL_UART_RxCpltCallback+0x50>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	1c5a      	adds	r2, r3, #1
 800157a:	b2d1      	uxtb	r1, r2
 800157c:	4a0f      	ldr	r2, [pc, #60]	@ (80015bc <HAL_UART_RxCpltCallback+0x50>)
 800157e:	7011      	strb	r1, [r2, #0]
 8001580:	461a      	mov	r2, r3
 8001582:	4b0f      	ldr	r3, [pc, #60]	@ (80015c0 <HAL_UART_RxCpltCallback+0x54>)
 8001584:	7819      	ldrb	r1, [r3, #0]
 8001586:	4b0f      	ldr	r3, [pc, #60]	@ (80015c4 <HAL_UART_RxCpltCallback+0x58>)
 8001588:	5499      	strb	r1, [r3, r2]
	rxBufferWriteIndex %= rxBufferMax;
 800158a:	4b0c      	ldr	r3, [pc, #48]	@ (80015bc <HAL_UART_RxCpltCallback+0x50>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	4a0e      	ldr	r2, [pc, #56]	@ (80015c8 <HAL_UART_RxCpltCallback+0x5c>)
 8001590:	fba2 1203 	umull	r1, r2, r2, r3
 8001594:	0952      	lsrs	r2, r2, #5
 8001596:	2164      	movs	r1, #100	@ 0x64
 8001598:	fb01 f202 	mul.w	r2, r1, r2
 800159c:	1a9b      	subs	r3, r3, r2
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	4b06      	ldr	r3, [pc, #24]	@ (80015bc <HAL_UART_RxCpltCallback+0x50>)
 80015a2:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(myHuart, (uint8_t *)&rxChar,	1);
 80015a4:	4b09      	ldr	r3, [pc, #36]	@ (80015cc <HAL_UART_RxCpltCallback+0x60>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2201      	movs	r2, #1
 80015aa:	4905      	ldr	r1, [pc, #20]	@ (80015c0 <HAL_UART_RxCpltCallback+0x54>)
 80015ac:	4618      	mov	r0, r3
 80015ae:	f001 fd96 	bl	80030de <HAL_UART_Receive_IT>
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	200001b4 	.word	0x200001b4
 80015c0:	2000014c 	.word	0x2000014c
 80015c4:	20000150 	.word	0x20000150
 80015c8:	51eb851f 	.word	0x51eb851f
 80015cc:	20000148 	.word	0x20000148

080015d0 <initUart>:

void initUart(UART_HandleTypeDef *inHuart) {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
	myHuart = inHuart;
 80015d8:	4a06      	ldr	r2, [pc, #24]	@ (80015f4 <initUart+0x24>)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(myHuart, (uint8_t *)&rxChar, 1);
 80015de:	4b05      	ldr	r3, [pc, #20]	@ (80015f4 <initUart+0x24>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2201      	movs	r2, #1
 80015e4:	4904      	ldr	r1, [pc, #16]	@ (80015f8 <initUart+0x28>)
 80015e6:	4618      	mov	r0, r3
 80015e8:	f001 fd79 	bl	80030de <HAL_UART_Receive_IT>
}
 80015ec:	bf00      	nop
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20000148 	.word	0x20000148
 80015f8:	2000014c 	.word	0x2000014c

080015fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80015fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001634 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001600:	f7ff ff50 	bl	80014a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001604:	480c      	ldr	r0, [pc, #48]	@ (8001638 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001606:	490d      	ldr	r1, [pc, #52]	@ (800163c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001608:	4a0d      	ldr	r2, [pc, #52]	@ (8001640 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800160a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800160c:	e002      	b.n	8001614 <LoopCopyDataInit>

0800160e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800160e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001610:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001612:	3304      	adds	r3, #4

08001614 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001614:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001616:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001618:	d3f9      	bcc.n	800160e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800161a:	4a0a      	ldr	r2, [pc, #40]	@ (8001644 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800161c:	4c0a      	ldr	r4, [pc, #40]	@ (8001648 <LoopFillZerobss+0x22>)
  movs r3, #0
 800161e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001620:	e001      	b.n	8001626 <LoopFillZerobss>

08001622 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001622:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001624:	3204      	adds	r2, #4

08001626 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001626:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001628:	d3fb      	bcc.n	8001622 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800162a:	f005 fa2f 	bl	8006a8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800162e:	f7ff fcad 	bl	8000f8c <main>
  bx  lr    
 8001632:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001634:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001638:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800163c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001640:	08007178 	.word	0x08007178
  ldr r2, =_sbss
 8001644:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001648:	20000344 	.word	0x20000344

0800164c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800164c:	e7fe      	b.n	800164c <ADC_IRQHandler>
	...

08001650 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001654:	4b0e      	ldr	r3, [pc, #56]	@ (8001690 <HAL_Init+0x40>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a0d      	ldr	r2, [pc, #52]	@ (8001690 <HAL_Init+0x40>)
 800165a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800165e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001660:	4b0b      	ldr	r3, [pc, #44]	@ (8001690 <HAL_Init+0x40>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a0a      	ldr	r2, [pc, #40]	@ (8001690 <HAL_Init+0x40>)
 8001666:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800166a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800166c:	4b08      	ldr	r3, [pc, #32]	@ (8001690 <HAL_Init+0x40>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a07      	ldr	r2, [pc, #28]	@ (8001690 <HAL_Init+0x40>)
 8001672:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001676:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001678:	2003      	movs	r0, #3
 800167a:	f000 f92b 	bl	80018d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800167e:	200f      	movs	r0, #15
 8001680:	f000 f808 	bl	8001694 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001684:	f7ff fd8a 	bl	800119c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40023c00 	.word	0x40023c00

08001694 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800169c:	4b12      	ldr	r3, [pc, #72]	@ (80016e8 <HAL_InitTick+0x54>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	4b12      	ldr	r3, [pc, #72]	@ (80016ec <HAL_InitTick+0x58>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	4619      	mov	r1, r3
 80016a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b2:	4618      	mov	r0, r3
 80016b4:	f000 f943 	bl	800193e <HAL_SYSTICK_Config>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e00e      	b.n	80016e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2b0f      	cmp	r3, #15
 80016c6:	d80a      	bhi.n	80016de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016c8:	2200      	movs	r2, #0
 80016ca:	6879      	ldr	r1, [r7, #4]
 80016cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80016d0:	f000 f90b 	bl	80018ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016d4:	4a06      	ldr	r2, [pc, #24]	@ (80016f0 <HAL_InitTick+0x5c>)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016da:	2300      	movs	r3, #0
 80016dc:	e000      	b.n	80016e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	20000004 	.word	0x20000004
 80016ec:	2000000c 	.word	0x2000000c
 80016f0:	20000008 	.word	0x20000008

080016f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016f8:	4b06      	ldr	r3, [pc, #24]	@ (8001714 <HAL_IncTick+0x20>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	461a      	mov	r2, r3
 80016fe:	4b06      	ldr	r3, [pc, #24]	@ (8001718 <HAL_IncTick+0x24>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4413      	add	r3, r2
 8001704:	4a04      	ldr	r2, [pc, #16]	@ (8001718 <HAL_IncTick+0x24>)
 8001706:	6013      	str	r3, [r2, #0]
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	2000000c 	.word	0x2000000c
 8001718:	200001b8 	.word	0x200001b8

0800171c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  return uwTick;
 8001720:	4b03      	ldr	r3, [pc, #12]	@ (8001730 <HAL_GetTick+0x14>)
 8001722:	681b      	ldr	r3, [r3, #0]
}
 8001724:	4618      	mov	r0, r3
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	200001b8 	.word	0x200001b8

08001734 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001744:	4b0c      	ldr	r3, [pc, #48]	@ (8001778 <__NVIC_SetPriorityGrouping+0x44>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800174a:	68ba      	ldr	r2, [r7, #8]
 800174c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001750:	4013      	ands	r3, r2
 8001752:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800175c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001760:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001764:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001766:	4a04      	ldr	r2, [pc, #16]	@ (8001778 <__NVIC_SetPriorityGrouping+0x44>)
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	60d3      	str	r3, [r2, #12]
}
 800176c:	bf00      	nop
 800176e:	3714      	adds	r7, #20
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	e000ed00 	.word	0xe000ed00

0800177c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001780:	4b04      	ldr	r3, [pc, #16]	@ (8001794 <__NVIC_GetPriorityGrouping+0x18>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	0a1b      	lsrs	r3, r3, #8
 8001786:	f003 0307 	and.w	r3, r3, #7
}
 800178a:	4618      	mov	r0, r3
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	db0b      	blt.n	80017c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017aa:	79fb      	ldrb	r3, [r7, #7]
 80017ac:	f003 021f 	and.w	r2, r3, #31
 80017b0:	4907      	ldr	r1, [pc, #28]	@ (80017d0 <__NVIC_EnableIRQ+0x38>)
 80017b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b6:	095b      	lsrs	r3, r3, #5
 80017b8:	2001      	movs	r0, #1
 80017ba:	fa00 f202 	lsl.w	r2, r0, r2
 80017be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017c2:	bf00      	nop
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	e000e100 	.word	0xe000e100

080017d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	6039      	str	r1, [r7, #0]
 80017de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	db0a      	blt.n	80017fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	490c      	ldr	r1, [pc, #48]	@ (8001820 <__NVIC_SetPriority+0x4c>)
 80017ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f2:	0112      	lsls	r2, r2, #4
 80017f4:	b2d2      	uxtb	r2, r2
 80017f6:	440b      	add	r3, r1
 80017f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017fc:	e00a      	b.n	8001814 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	b2da      	uxtb	r2, r3
 8001802:	4908      	ldr	r1, [pc, #32]	@ (8001824 <__NVIC_SetPriority+0x50>)
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	f003 030f 	and.w	r3, r3, #15
 800180a:	3b04      	subs	r3, #4
 800180c:	0112      	lsls	r2, r2, #4
 800180e:	b2d2      	uxtb	r2, r2
 8001810:	440b      	add	r3, r1
 8001812:	761a      	strb	r2, [r3, #24]
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	e000e100 	.word	0xe000e100
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001828:	b480      	push	{r7}
 800182a:	b089      	sub	sp, #36	@ 0x24
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f003 0307 	and.w	r3, r3, #7
 800183a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	f1c3 0307 	rsb	r3, r3, #7
 8001842:	2b04      	cmp	r3, #4
 8001844:	bf28      	it	cs
 8001846:	2304      	movcs	r3, #4
 8001848:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	3304      	adds	r3, #4
 800184e:	2b06      	cmp	r3, #6
 8001850:	d902      	bls.n	8001858 <NVIC_EncodePriority+0x30>
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	3b03      	subs	r3, #3
 8001856:	e000      	b.n	800185a <NVIC_EncodePriority+0x32>
 8001858:	2300      	movs	r3, #0
 800185a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800185c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	43da      	mvns	r2, r3
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	401a      	ands	r2, r3
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001870:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	fa01 f303 	lsl.w	r3, r1, r3
 800187a:	43d9      	mvns	r1, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001880:	4313      	orrs	r3, r2
         );
}
 8001882:	4618      	mov	r0, r3
 8001884:	3724      	adds	r7, #36	@ 0x24
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
	...

08001890 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	3b01      	subs	r3, #1
 800189c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018a0:	d301      	bcc.n	80018a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018a2:	2301      	movs	r3, #1
 80018a4:	e00f      	b.n	80018c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018a6:	4a0a      	ldr	r2, [pc, #40]	@ (80018d0 <SysTick_Config+0x40>)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3b01      	subs	r3, #1
 80018ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ae:	210f      	movs	r1, #15
 80018b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80018b4:	f7ff ff8e 	bl	80017d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018b8:	4b05      	ldr	r3, [pc, #20]	@ (80018d0 <SysTick_Config+0x40>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018be:	4b04      	ldr	r3, [pc, #16]	@ (80018d0 <SysTick_Config+0x40>)
 80018c0:	2207      	movs	r2, #7
 80018c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	e000e010 	.word	0xe000e010

080018d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f7ff ff29 	bl	8001734 <__NVIC_SetPriorityGrouping>
}
 80018e2:	bf00      	nop
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b086      	sub	sp, #24
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	4603      	mov	r3, r0
 80018f2:	60b9      	str	r1, [r7, #8]
 80018f4:	607a      	str	r2, [r7, #4]
 80018f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018fc:	f7ff ff3e 	bl	800177c <__NVIC_GetPriorityGrouping>
 8001900:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	68b9      	ldr	r1, [r7, #8]
 8001906:	6978      	ldr	r0, [r7, #20]
 8001908:	f7ff ff8e 	bl	8001828 <NVIC_EncodePriority>
 800190c:	4602      	mov	r2, r0
 800190e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001912:	4611      	mov	r1, r2
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff ff5d 	bl	80017d4 <__NVIC_SetPriority>
}
 800191a:	bf00      	nop
 800191c:	3718      	adds	r7, #24
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b082      	sub	sp, #8
 8001926:	af00      	add	r7, sp, #0
 8001928:	4603      	mov	r3, r0
 800192a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800192c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff ff31 	bl	8001798 <__NVIC_EnableIRQ>
}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b082      	sub	sp, #8
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f7ff ffa2 	bl	8001890 <SysTick_Config>
 800194c:	4603      	mov	r3, r0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b084      	sub	sp, #16
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001962:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001964:	f7ff feda 	bl	800171c <HAL_GetTick>
 8001968:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d008      	beq.n	8001988 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2280      	movs	r2, #128	@ 0x80
 800197a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e052      	b.n	8001a2e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f022 0216 	bic.w	r2, r2, #22
 8001996:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	695a      	ldr	r2, [r3, #20]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80019a6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d103      	bne.n	80019b8 <HAL_DMA_Abort+0x62>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d007      	beq.n	80019c8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f022 0208 	bic.w	r2, r2, #8
 80019c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f022 0201 	bic.w	r2, r2, #1
 80019d6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019d8:	e013      	b.n	8001a02 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019da:	f7ff fe9f 	bl	800171c <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b05      	cmp	r3, #5
 80019e6:	d90c      	bls.n	8001a02 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2220      	movs	r2, #32
 80019ec:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2203      	movs	r2, #3
 80019f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e015      	b.n	8001a2e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0301 	and.w	r3, r3, #1
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d1e4      	bne.n	80019da <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a14:	223f      	movs	r2, #63	@ 0x3f
 8001a16:	409a      	lsls	r2, r3
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a36:	b480      	push	{r7}
 8001a38:	b083      	sub	sp, #12
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d004      	beq.n	8001a54 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2280      	movs	r2, #128	@ 0x80
 8001a4e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e00c      	b.n	8001a6e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2205      	movs	r2, #5
 8001a58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f022 0201 	bic.w	r2, r2, #1
 8001a6a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
	...

08001a7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b089      	sub	sp, #36	@ 0x24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a92:	2300      	movs	r3, #0
 8001a94:	61fb      	str	r3, [r7, #28]
 8001a96:	e159      	b.n	8001d4c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a98:	2201      	movs	r2, #1
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	697a      	ldr	r2, [r7, #20]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	f040 8148 	bne.w	8001d46 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f003 0303 	and.w	r3, r3, #3
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d005      	beq.n	8001ace <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d130      	bne.n	8001b30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	2203      	movs	r2, #3
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	68da      	ldr	r2, [r3, #12]
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b04:	2201      	movs	r2, #1
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4013      	ands	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	091b      	lsrs	r3, r3, #4
 8001b1a:	f003 0201 	and.w	r2, r3, #1
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f003 0303 	and.w	r3, r3, #3
 8001b38:	2b03      	cmp	r3, #3
 8001b3a:	d017      	beq.n	8001b6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	2203      	movs	r2, #3
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	4013      	ands	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	689a      	ldr	r2, [r3, #8]
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f003 0303 	and.w	r3, r3, #3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d123      	bne.n	8001bc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	08da      	lsrs	r2, r3, #3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	3208      	adds	r2, #8
 8001b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	f003 0307 	and.w	r3, r3, #7
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	220f      	movs	r2, #15
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	43db      	mvns	r3, r3
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	691a      	ldr	r2, [r3, #16]
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	08da      	lsrs	r2, r3, #3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	3208      	adds	r2, #8
 8001bba:	69b9      	ldr	r1, [r7, #24]
 8001bbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	2203      	movs	r2, #3
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f003 0203 	and.w	r2, r3, #3
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	f000 80a2 	beq.w	8001d46 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	4b57      	ldr	r3, [pc, #348]	@ (8001d64 <HAL_GPIO_Init+0x2e8>)
 8001c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c0a:	4a56      	ldr	r2, [pc, #344]	@ (8001d64 <HAL_GPIO_Init+0x2e8>)
 8001c0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c10:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c12:	4b54      	ldr	r3, [pc, #336]	@ (8001d64 <HAL_GPIO_Init+0x2e8>)
 8001c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c1e:	4a52      	ldr	r2, [pc, #328]	@ (8001d68 <HAL_GPIO_Init+0x2ec>)
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	089b      	lsrs	r3, r3, #2
 8001c24:	3302      	adds	r3, #2
 8001c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f003 0303 	and.w	r3, r3, #3
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	220f      	movs	r2, #15
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a49      	ldr	r2, [pc, #292]	@ (8001d6c <HAL_GPIO_Init+0x2f0>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d019      	beq.n	8001c7e <HAL_GPIO_Init+0x202>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a48      	ldr	r2, [pc, #288]	@ (8001d70 <HAL_GPIO_Init+0x2f4>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d013      	beq.n	8001c7a <HAL_GPIO_Init+0x1fe>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a47      	ldr	r2, [pc, #284]	@ (8001d74 <HAL_GPIO_Init+0x2f8>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d00d      	beq.n	8001c76 <HAL_GPIO_Init+0x1fa>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a46      	ldr	r2, [pc, #280]	@ (8001d78 <HAL_GPIO_Init+0x2fc>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d007      	beq.n	8001c72 <HAL_GPIO_Init+0x1f6>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a45      	ldr	r2, [pc, #276]	@ (8001d7c <HAL_GPIO_Init+0x300>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d101      	bne.n	8001c6e <HAL_GPIO_Init+0x1f2>
 8001c6a:	2304      	movs	r3, #4
 8001c6c:	e008      	b.n	8001c80 <HAL_GPIO_Init+0x204>
 8001c6e:	2307      	movs	r3, #7
 8001c70:	e006      	b.n	8001c80 <HAL_GPIO_Init+0x204>
 8001c72:	2303      	movs	r3, #3
 8001c74:	e004      	b.n	8001c80 <HAL_GPIO_Init+0x204>
 8001c76:	2302      	movs	r3, #2
 8001c78:	e002      	b.n	8001c80 <HAL_GPIO_Init+0x204>
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e000      	b.n	8001c80 <HAL_GPIO_Init+0x204>
 8001c7e:	2300      	movs	r3, #0
 8001c80:	69fa      	ldr	r2, [r7, #28]
 8001c82:	f002 0203 	and.w	r2, r2, #3
 8001c86:	0092      	lsls	r2, r2, #2
 8001c88:	4093      	lsls	r3, r2
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c90:	4935      	ldr	r1, [pc, #212]	@ (8001d68 <HAL_GPIO_Init+0x2ec>)
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	089b      	lsrs	r3, r3, #2
 8001c96:	3302      	adds	r3, #2
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c9e:	4b38      	ldr	r3, [pc, #224]	@ (8001d80 <HAL_GPIO_Init+0x304>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4013      	ands	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cc2:	4a2f      	ldr	r2, [pc, #188]	@ (8001d80 <HAL_GPIO_Init+0x304>)
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cc8:	4b2d      	ldr	r3, [pc, #180]	@ (8001d80 <HAL_GPIO_Init+0x304>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d003      	beq.n	8001cec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cec:	4a24      	ldr	r2, [pc, #144]	@ (8001d80 <HAL_GPIO_Init+0x304>)
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cf2:	4b23      	ldr	r3, [pc, #140]	@ (8001d80 <HAL_GPIO_Init+0x304>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d003      	beq.n	8001d16 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d16:	4a1a      	ldr	r2, [pc, #104]	@ (8001d80 <HAL_GPIO_Init+0x304>)
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d1c:	4b18      	ldr	r3, [pc, #96]	@ (8001d80 <HAL_GPIO_Init+0x304>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	43db      	mvns	r3, r3
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d003      	beq.n	8001d40 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d40:	4a0f      	ldr	r2, [pc, #60]	@ (8001d80 <HAL_GPIO_Init+0x304>)
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	61fb      	str	r3, [r7, #28]
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	2b0f      	cmp	r3, #15
 8001d50:	f67f aea2 	bls.w	8001a98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d54:	bf00      	nop
 8001d56:	bf00      	nop
 8001d58:	3724      	adds	r7, #36	@ 0x24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	40023800 	.word	0x40023800
 8001d68:	40013800 	.word	0x40013800
 8001d6c:	40020000 	.word	0x40020000
 8001d70:	40020400 	.word	0x40020400
 8001d74:	40020800 	.word	0x40020800
 8001d78:	40020c00 	.word	0x40020c00
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	40013c00 	.word	0x40013c00

08001d84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	807b      	strh	r3, [r7, #2]
 8001d90:	4613      	mov	r3, r2
 8001d92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d94:	787b      	ldrb	r3, [r7, #1]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d9a:	887a      	ldrh	r2, [r7, #2]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001da0:	e003      	b.n	8001daa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001da2:	887b      	ldrh	r3, [r7, #2]
 8001da4:	041a      	lsls	r2, r3, #16
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	619a      	str	r2, [r3, #24]
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
	...

08001db8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e267      	b.n	800229a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d075      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001dd6:	4b88      	ldr	r3, [pc, #544]	@ (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f003 030c 	and.w	r3, r3, #12
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	d00c      	beq.n	8001dfc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001de2:	4b85      	ldr	r3, [pc, #532]	@ (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001dea:	2b08      	cmp	r3, #8
 8001dec:	d112      	bne.n	8001e14 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dee:	4b82      	ldr	r3, [pc, #520]	@ (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001df6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001dfa:	d10b      	bne.n	8001e14 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dfc:	4b7e      	ldr	r3, [pc, #504]	@ (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d05b      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x108>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d157      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e242      	b.n	800229a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e1c:	d106      	bne.n	8001e2c <HAL_RCC_OscConfig+0x74>
 8001e1e:	4b76      	ldr	r3, [pc, #472]	@ (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a75      	ldr	r2, [pc, #468]	@ (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001e24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e28:	6013      	str	r3, [r2, #0]
 8001e2a:	e01d      	b.n	8001e68 <HAL_RCC_OscConfig+0xb0>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e34:	d10c      	bne.n	8001e50 <HAL_RCC_OscConfig+0x98>
 8001e36:	4b70      	ldr	r3, [pc, #448]	@ (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a6f      	ldr	r2, [pc, #444]	@ (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001e3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e40:	6013      	str	r3, [r2, #0]
 8001e42:	4b6d      	ldr	r3, [pc, #436]	@ (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a6c      	ldr	r2, [pc, #432]	@ (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001e48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e4c:	6013      	str	r3, [r2, #0]
 8001e4e:	e00b      	b.n	8001e68 <HAL_RCC_OscConfig+0xb0>
 8001e50:	4b69      	ldr	r3, [pc, #420]	@ (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a68      	ldr	r2, [pc, #416]	@ (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001e56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e5a:	6013      	str	r3, [r2, #0]
 8001e5c:	4b66      	ldr	r3, [pc, #408]	@ (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a65      	ldr	r2, [pc, #404]	@ (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001e62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d013      	beq.n	8001e98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e70:	f7ff fc54 	bl	800171c <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e76:	e008      	b.n	8001e8a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e78:	f7ff fc50 	bl	800171c <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b64      	cmp	r3, #100	@ 0x64
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e207      	b.n	800229a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e8a:	4b5b      	ldr	r3, [pc, #364]	@ (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d0f0      	beq.n	8001e78 <HAL_RCC_OscConfig+0xc0>
 8001e96:	e014      	b.n	8001ec2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e98:	f7ff fc40 	bl	800171c <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ea0:	f7ff fc3c 	bl	800171c <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b64      	cmp	r3, #100	@ 0x64
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e1f3      	b.n	800229a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eb2:	4b51      	ldr	r3, [pc, #324]	@ (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1f0      	bne.n	8001ea0 <HAL_RCC_OscConfig+0xe8>
 8001ebe:	e000      	b.n	8001ec2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ec0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d063      	beq.n	8001f96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001ece:	4b4a      	ldr	r3, [pc, #296]	@ (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f003 030c 	and.w	r3, r3, #12
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00b      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eda:	4b47      	ldr	r3, [pc, #284]	@ (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001ee2:	2b08      	cmp	r3, #8
 8001ee4:	d11c      	bne.n	8001f20 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ee6:	4b44      	ldr	r3, [pc, #272]	@ (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d116      	bne.n	8001f20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ef2:	4b41      	ldr	r3, [pc, #260]	@ (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d005      	beq.n	8001f0a <HAL_RCC_OscConfig+0x152>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d001      	beq.n	8001f0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e1c7      	b.n	800229a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f0a:	4b3b      	ldr	r3, [pc, #236]	@ (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	4937      	ldr	r1, [pc, #220]	@ (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f1e:	e03a      	b.n	8001f96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d020      	beq.n	8001f6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f28:	4b34      	ldr	r3, [pc, #208]	@ (8001ffc <HAL_RCC_OscConfig+0x244>)
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f2e:	f7ff fbf5 	bl	800171c <HAL_GetTick>
 8001f32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f34:	e008      	b.n	8001f48 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f36:	f7ff fbf1 	bl	800171c <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e1a8      	b.n	800229a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f48:	4b2b      	ldr	r3, [pc, #172]	@ (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d0f0      	beq.n	8001f36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f54:	4b28      	ldr	r3, [pc, #160]	@ (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	4925      	ldr	r1, [pc, #148]	@ (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	600b      	str	r3, [r1, #0]
 8001f68:	e015      	b.n	8001f96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f6a:	4b24      	ldr	r3, [pc, #144]	@ (8001ffc <HAL_RCC_OscConfig+0x244>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f70:	f7ff fbd4 	bl	800171c <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f78:	f7ff fbd0 	bl	800171c <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e187      	b.n	800229a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f8a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d1f0      	bne.n	8001f78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0308 	and.w	r3, r3, #8
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d036      	beq.n	8002010 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d016      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001faa:	4b15      	ldr	r3, [pc, #84]	@ (8002000 <HAL_RCC_OscConfig+0x248>)
 8001fac:	2201      	movs	r2, #1
 8001fae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fb0:	f7ff fbb4 	bl	800171c <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fb8:	f7ff fbb0 	bl	800171c <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e167      	b.n	800229a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fca:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff8 <HAL_RCC_OscConfig+0x240>)
 8001fcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d0f0      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x200>
 8001fd6:	e01b      	b.n	8002010 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fd8:	4b09      	ldr	r3, [pc, #36]	@ (8002000 <HAL_RCC_OscConfig+0x248>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fde:	f7ff fb9d 	bl	800171c <HAL_GetTick>
 8001fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fe4:	e00e      	b.n	8002004 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fe6:	f7ff fb99 	bl	800171c <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d907      	bls.n	8002004 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e150      	b.n	800229a <HAL_RCC_OscConfig+0x4e2>
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	42470000 	.word	0x42470000
 8002000:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002004:	4b88      	ldr	r3, [pc, #544]	@ (8002228 <HAL_RCC_OscConfig+0x470>)
 8002006:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1ea      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0304 	and.w	r3, r3, #4
 8002018:	2b00      	cmp	r3, #0
 800201a:	f000 8097 	beq.w	800214c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800201e:	2300      	movs	r3, #0
 8002020:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002022:	4b81      	ldr	r3, [pc, #516]	@ (8002228 <HAL_RCC_OscConfig+0x470>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002026:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d10f      	bne.n	800204e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	60bb      	str	r3, [r7, #8]
 8002032:	4b7d      	ldr	r3, [pc, #500]	@ (8002228 <HAL_RCC_OscConfig+0x470>)
 8002034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002036:	4a7c      	ldr	r2, [pc, #496]	@ (8002228 <HAL_RCC_OscConfig+0x470>)
 8002038:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800203c:	6413      	str	r3, [r2, #64]	@ 0x40
 800203e:	4b7a      	ldr	r3, [pc, #488]	@ (8002228 <HAL_RCC_OscConfig+0x470>)
 8002040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002042:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002046:	60bb      	str	r3, [r7, #8]
 8002048:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800204a:	2301      	movs	r3, #1
 800204c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800204e:	4b77      	ldr	r3, [pc, #476]	@ (800222c <HAL_RCC_OscConfig+0x474>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002056:	2b00      	cmp	r3, #0
 8002058:	d118      	bne.n	800208c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800205a:	4b74      	ldr	r3, [pc, #464]	@ (800222c <HAL_RCC_OscConfig+0x474>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a73      	ldr	r2, [pc, #460]	@ (800222c <HAL_RCC_OscConfig+0x474>)
 8002060:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002064:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002066:	f7ff fb59 	bl	800171c <HAL_GetTick>
 800206a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800206c:	e008      	b.n	8002080 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800206e:	f7ff fb55 	bl	800171c <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d901      	bls.n	8002080 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e10c      	b.n	800229a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002080:	4b6a      	ldr	r3, [pc, #424]	@ (800222c <HAL_RCC_OscConfig+0x474>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002088:	2b00      	cmp	r3, #0
 800208a:	d0f0      	beq.n	800206e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d106      	bne.n	80020a2 <HAL_RCC_OscConfig+0x2ea>
 8002094:	4b64      	ldr	r3, [pc, #400]	@ (8002228 <HAL_RCC_OscConfig+0x470>)
 8002096:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002098:	4a63      	ldr	r2, [pc, #396]	@ (8002228 <HAL_RCC_OscConfig+0x470>)
 800209a:	f043 0301 	orr.w	r3, r3, #1
 800209e:	6713      	str	r3, [r2, #112]	@ 0x70
 80020a0:	e01c      	b.n	80020dc <HAL_RCC_OscConfig+0x324>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	2b05      	cmp	r3, #5
 80020a8:	d10c      	bne.n	80020c4 <HAL_RCC_OscConfig+0x30c>
 80020aa:	4b5f      	ldr	r3, [pc, #380]	@ (8002228 <HAL_RCC_OscConfig+0x470>)
 80020ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ae:	4a5e      	ldr	r2, [pc, #376]	@ (8002228 <HAL_RCC_OscConfig+0x470>)
 80020b0:	f043 0304 	orr.w	r3, r3, #4
 80020b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80020b6:	4b5c      	ldr	r3, [pc, #368]	@ (8002228 <HAL_RCC_OscConfig+0x470>)
 80020b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ba:	4a5b      	ldr	r2, [pc, #364]	@ (8002228 <HAL_RCC_OscConfig+0x470>)
 80020bc:	f043 0301 	orr.w	r3, r3, #1
 80020c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80020c2:	e00b      	b.n	80020dc <HAL_RCC_OscConfig+0x324>
 80020c4:	4b58      	ldr	r3, [pc, #352]	@ (8002228 <HAL_RCC_OscConfig+0x470>)
 80020c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020c8:	4a57      	ldr	r2, [pc, #348]	@ (8002228 <HAL_RCC_OscConfig+0x470>)
 80020ca:	f023 0301 	bic.w	r3, r3, #1
 80020ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80020d0:	4b55      	ldr	r3, [pc, #340]	@ (8002228 <HAL_RCC_OscConfig+0x470>)
 80020d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020d4:	4a54      	ldr	r2, [pc, #336]	@ (8002228 <HAL_RCC_OscConfig+0x470>)
 80020d6:	f023 0304 	bic.w	r3, r3, #4
 80020da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d015      	beq.n	8002110 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020e4:	f7ff fb1a 	bl	800171c <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ea:	e00a      	b.n	8002102 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ec:	f7ff fb16 	bl	800171c <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e0cb      	b.n	800229a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002102:	4b49      	ldr	r3, [pc, #292]	@ (8002228 <HAL_RCC_OscConfig+0x470>)
 8002104:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d0ee      	beq.n	80020ec <HAL_RCC_OscConfig+0x334>
 800210e:	e014      	b.n	800213a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002110:	f7ff fb04 	bl	800171c <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002116:	e00a      	b.n	800212e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002118:	f7ff fb00 	bl	800171c <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002126:	4293      	cmp	r3, r2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e0b5      	b.n	800229a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800212e:	4b3e      	ldr	r3, [pc, #248]	@ (8002228 <HAL_RCC_OscConfig+0x470>)
 8002130:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1ee      	bne.n	8002118 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800213a:	7dfb      	ldrb	r3, [r7, #23]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d105      	bne.n	800214c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002140:	4b39      	ldr	r3, [pc, #228]	@ (8002228 <HAL_RCC_OscConfig+0x470>)
 8002142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002144:	4a38      	ldr	r2, [pc, #224]	@ (8002228 <HAL_RCC_OscConfig+0x470>)
 8002146:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800214a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	2b00      	cmp	r3, #0
 8002152:	f000 80a1 	beq.w	8002298 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002156:	4b34      	ldr	r3, [pc, #208]	@ (8002228 <HAL_RCC_OscConfig+0x470>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f003 030c 	and.w	r3, r3, #12
 800215e:	2b08      	cmp	r3, #8
 8002160:	d05c      	beq.n	800221c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	2b02      	cmp	r3, #2
 8002168:	d141      	bne.n	80021ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800216a:	4b31      	ldr	r3, [pc, #196]	@ (8002230 <HAL_RCC_OscConfig+0x478>)
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002170:	f7ff fad4 	bl	800171c <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002178:	f7ff fad0 	bl	800171c <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b02      	cmp	r3, #2
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e087      	b.n	800229a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800218a:	4b27      	ldr	r3, [pc, #156]	@ (8002228 <HAL_RCC_OscConfig+0x470>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1f0      	bne.n	8002178 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	69da      	ldr	r2, [r3, #28]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a1b      	ldr	r3, [r3, #32]
 800219e:	431a      	orrs	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a4:	019b      	lsls	r3, r3, #6
 80021a6:	431a      	orrs	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ac:	085b      	lsrs	r3, r3, #1
 80021ae:	3b01      	subs	r3, #1
 80021b0:	041b      	lsls	r3, r3, #16
 80021b2:	431a      	orrs	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021b8:	061b      	lsls	r3, r3, #24
 80021ba:	491b      	ldr	r1, [pc, #108]	@ (8002228 <HAL_RCC_OscConfig+0x470>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002230 <HAL_RCC_OscConfig+0x478>)
 80021c2:	2201      	movs	r2, #1
 80021c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c6:	f7ff faa9 	bl	800171c <HAL_GetTick>
 80021ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021cc:	e008      	b.n	80021e0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ce:	f7ff faa5 	bl	800171c <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e05c      	b.n	800229a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021e0:	4b11      	ldr	r3, [pc, #68]	@ (8002228 <HAL_RCC_OscConfig+0x470>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d0f0      	beq.n	80021ce <HAL_RCC_OscConfig+0x416>
 80021ec:	e054      	b.n	8002298 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ee:	4b10      	ldr	r3, [pc, #64]	@ (8002230 <HAL_RCC_OscConfig+0x478>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f4:	f7ff fa92 	bl	800171c <HAL_GetTick>
 80021f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021fc:	f7ff fa8e 	bl	800171c <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e045      	b.n	800229a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800220e:	4b06      	ldr	r3, [pc, #24]	@ (8002228 <HAL_RCC_OscConfig+0x470>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1f0      	bne.n	80021fc <HAL_RCC_OscConfig+0x444>
 800221a:	e03d      	b.n	8002298 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d107      	bne.n	8002234 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e038      	b.n	800229a <HAL_RCC_OscConfig+0x4e2>
 8002228:	40023800 	.word	0x40023800
 800222c:	40007000 	.word	0x40007000
 8002230:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002234:	4b1b      	ldr	r3, [pc, #108]	@ (80022a4 <HAL_RCC_OscConfig+0x4ec>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d028      	beq.n	8002294 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800224c:	429a      	cmp	r2, r3
 800224e:	d121      	bne.n	8002294 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800225a:	429a      	cmp	r2, r3
 800225c:	d11a      	bne.n	8002294 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002264:	4013      	ands	r3, r2
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800226a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800226c:	4293      	cmp	r3, r2
 800226e:	d111      	bne.n	8002294 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800227a:	085b      	lsrs	r3, r3, #1
 800227c:	3b01      	subs	r3, #1
 800227e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002280:	429a      	cmp	r2, r3
 8002282:	d107      	bne.n	8002294 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800228e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002290:	429a      	cmp	r2, r3
 8002292:	d001      	beq.n	8002298 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e000      	b.n	800229a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3718      	adds	r7, #24
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40023800 	.word	0x40023800

080022a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d101      	bne.n	80022bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e0cc      	b.n	8002456 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022bc:	4b68      	ldr	r3, [pc, #416]	@ (8002460 <HAL_RCC_ClockConfig+0x1b8>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0307 	and.w	r3, r3, #7
 80022c4:	683a      	ldr	r2, [r7, #0]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d90c      	bls.n	80022e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ca:	4b65      	ldr	r3, [pc, #404]	@ (8002460 <HAL_RCC_ClockConfig+0x1b8>)
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	b2d2      	uxtb	r2, r2
 80022d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022d2:	4b63      	ldr	r3, [pc, #396]	@ (8002460 <HAL_RCC_ClockConfig+0x1b8>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0307 	and.w	r3, r3, #7
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d001      	beq.n	80022e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e0b8      	b.n	8002456 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d020      	beq.n	8002332 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0304 	and.w	r3, r3, #4
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d005      	beq.n	8002308 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022fc:	4b59      	ldr	r3, [pc, #356]	@ (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	4a58      	ldr	r2, [pc, #352]	@ (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 8002302:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002306:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0308 	and.w	r3, r3, #8
 8002310:	2b00      	cmp	r3, #0
 8002312:	d005      	beq.n	8002320 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002314:	4b53      	ldr	r3, [pc, #332]	@ (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	4a52      	ldr	r2, [pc, #328]	@ (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 800231a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800231e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002320:	4b50      	ldr	r3, [pc, #320]	@ (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	494d      	ldr	r1, [pc, #308]	@ (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 800232e:	4313      	orrs	r3, r2
 8002330:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	2b00      	cmp	r3, #0
 800233c:	d044      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d107      	bne.n	8002356 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002346:	4b47      	ldr	r3, [pc, #284]	@ (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d119      	bne.n	8002386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e07f      	b.n	8002456 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	2b02      	cmp	r3, #2
 800235c:	d003      	beq.n	8002366 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002362:	2b03      	cmp	r3, #3
 8002364:	d107      	bne.n	8002376 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002366:	4b3f      	ldr	r3, [pc, #252]	@ (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d109      	bne.n	8002386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e06f      	b.n	8002456 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002376:	4b3b      	ldr	r3, [pc, #236]	@ (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e067      	b.n	8002456 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002386:	4b37      	ldr	r3, [pc, #220]	@ (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f023 0203 	bic.w	r2, r3, #3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	4934      	ldr	r1, [pc, #208]	@ (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 8002394:	4313      	orrs	r3, r2
 8002396:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002398:	f7ff f9c0 	bl	800171c <HAL_GetTick>
 800239c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800239e:	e00a      	b.n	80023b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023a0:	f7ff f9bc 	bl	800171c <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e04f      	b.n	8002456 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023b6:	4b2b      	ldr	r3, [pc, #172]	@ (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f003 020c 	and.w	r2, r3, #12
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d1eb      	bne.n	80023a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023c8:	4b25      	ldr	r3, [pc, #148]	@ (8002460 <HAL_RCC_ClockConfig+0x1b8>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0307 	and.w	r3, r3, #7
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d20c      	bcs.n	80023f0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023d6:	4b22      	ldr	r3, [pc, #136]	@ (8002460 <HAL_RCC_ClockConfig+0x1b8>)
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	b2d2      	uxtb	r2, r2
 80023dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023de:	4b20      	ldr	r3, [pc, #128]	@ (8002460 <HAL_RCC_ClockConfig+0x1b8>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0307 	and.w	r3, r3, #7
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d001      	beq.n	80023f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e032      	b.n	8002456 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0304 	and.w	r3, r3, #4
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d008      	beq.n	800240e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023fc:	4b19      	ldr	r3, [pc, #100]	@ (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	4916      	ldr	r1, [pc, #88]	@ (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 800240a:	4313      	orrs	r3, r2
 800240c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0308 	and.w	r3, r3, #8
 8002416:	2b00      	cmp	r3, #0
 8002418:	d009      	beq.n	800242e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800241a:	4b12      	ldr	r3, [pc, #72]	@ (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	490e      	ldr	r1, [pc, #56]	@ (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 800242a:	4313      	orrs	r3, r2
 800242c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800242e:	f000 f821 	bl	8002474 <HAL_RCC_GetSysClockFreq>
 8002432:	4602      	mov	r2, r0
 8002434:	4b0b      	ldr	r3, [pc, #44]	@ (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	091b      	lsrs	r3, r3, #4
 800243a:	f003 030f 	and.w	r3, r3, #15
 800243e:	490a      	ldr	r1, [pc, #40]	@ (8002468 <HAL_RCC_ClockConfig+0x1c0>)
 8002440:	5ccb      	ldrb	r3, [r1, r3]
 8002442:	fa22 f303 	lsr.w	r3, r2, r3
 8002446:	4a09      	ldr	r2, [pc, #36]	@ (800246c <HAL_RCC_ClockConfig+0x1c4>)
 8002448:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800244a:	4b09      	ldr	r3, [pc, #36]	@ (8002470 <HAL_RCC_ClockConfig+0x1c8>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff f920 	bl	8001694 <HAL_InitTick>

  return HAL_OK;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	40023c00 	.word	0x40023c00
 8002464:	40023800 	.word	0x40023800
 8002468:	080070d0 	.word	0x080070d0
 800246c:	20000004 	.word	0x20000004
 8002470:	20000008 	.word	0x20000008

08002474 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002474:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002478:	b090      	sub	sp, #64	@ 0x40
 800247a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800247c:	2300      	movs	r3, #0
 800247e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002480:	2300      	movs	r3, #0
 8002482:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002484:	2300      	movs	r3, #0
 8002486:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002488:	2300      	movs	r3, #0
 800248a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800248c:	4b59      	ldr	r3, [pc, #356]	@ (80025f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f003 030c 	and.w	r3, r3, #12
 8002494:	2b08      	cmp	r3, #8
 8002496:	d00d      	beq.n	80024b4 <HAL_RCC_GetSysClockFreq+0x40>
 8002498:	2b08      	cmp	r3, #8
 800249a:	f200 80a1 	bhi.w	80025e0 <HAL_RCC_GetSysClockFreq+0x16c>
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d002      	beq.n	80024a8 <HAL_RCC_GetSysClockFreq+0x34>
 80024a2:	2b04      	cmp	r3, #4
 80024a4:	d003      	beq.n	80024ae <HAL_RCC_GetSysClockFreq+0x3a>
 80024a6:	e09b      	b.n	80025e0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024a8:	4b53      	ldr	r3, [pc, #332]	@ (80025f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80024aa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80024ac:	e09b      	b.n	80025e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024ae:	4b53      	ldr	r3, [pc, #332]	@ (80025fc <HAL_RCC_GetSysClockFreq+0x188>)
 80024b0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80024b2:	e098      	b.n	80025e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024b4:	4b4f      	ldr	r3, [pc, #316]	@ (80025f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80024bc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024be:	4b4d      	ldr	r3, [pc, #308]	@ (80025f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d028      	beq.n	800251c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024ca:	4b4a      	ldr	r3, [pc, #296]	@ (80025f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	099b      	lsrs	r3, r3, #6
 80024d0:	2200      	movs	r2, #0
 80024d2:	623b      	str	r3, [r7, #32]
 80024d4:	627a      	str	r2, [r7, #36]	@ 0x24
 80024d6:	6a3b      	ldr	r3, [r7, #32]
 80024d8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80024dc:	2100      	movs	r1, #0
 80024de:	4b47      	ldr	r3, [pc, #284]	@ (80025fc <HAL_RCC_GetSysClockFreq+0x188>)
 80024e0:	fb03 f201 	mul.w	r2, r3, r1
 80024e4:	2300      	movs	r3, #0
 80024e6:	fb00 f303 	mul.w	r3, r0, r3
 80024ea:	4413      	add	r3, r2
 80024ec:	4a43      	ldr	r2, [pc, #268]	@ (80025fc <HAL_RCC_GetSysClockFreq+0x188>)
 80024ee:	fba0 1202 	umull	r1, r2, r0, r2
 80024f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80024f4:	460a      	mov	r2, r1
 80024f6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80024f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80024fa:	4413      	add	r3, r2
 80024fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80024fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002500:	2200      	movs	r2, #0
 8002502:	61bb      	str	r3, [r7, #24]
 8002504:	61fa      	str	r2, [r7, #28]
 8002506:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800250a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800250e:	f7fd fe6b 	bl	80001e8 <__aeabi_uldivmod>
 8002512:	4602      	mov	r2, r0
 8002514:	460b      	mov	r3, r1
 8002516:	4613      	mov	r3, r2
 8002518:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800251a:	e053      	b.n	80025c4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800251c:	4b35      	ldr	r3, [pc, #212]	@ (80025f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	099b      	lsrs	r3, r3, #6
 8002522:	2200      	movs	r2, #0
 8002524:	613b      	str	r3, [r7, #16]
 8002526:	617a      	str	r2, [r7, #20]
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800252e:	f04f 0b00 	mov.w	fp, #0
 8002532:	4652      	mov	r2, sl
 8002534:	465b      	mov	r3, fp
 8002536:	f04f 0000 	mov.w	r0, #0
 800253a:	f04f 0100 	mov.w	r1, #0
 800253e:	0159      	lsls	r1, r3, #5
 8002540:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002544:	0150      	lsls	r0, r2, #5
 8002546:	4602      	mov	r2, r0
 8002548:	460b      	mov	r3, r1
 800254a:	ebb2 080a 	subs.w	r8, r2, sl
 800254e:	eb63 090b 	sbc.w	r9, r3, fp
 8002552:	f04f 0200 	mov.w	r2, #0
 8002556:	f04f 0300 	mov.w	r3, #0
 800255a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800255e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002562:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002566:	ebb2 0408 	subs.w	r4, r2, r8
 800256a:	eb63 0509 	sbc.w	r5, r3, r9
 800256e:	f04f 0200 	mov.w	r2, #0
 8002572:	f04f 0300 	mov.w	r3, #0
 8002576:	00eb      	lsls	r3, r5, #3
 8002578:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800257c:	00e2      	lsls	r2, r4, #3
 800257e:	4614      	mov	r4, r2
 8002580:	461d      	mov	r5, r3
 8002582:	eb14 030a 	adds.w	r3, r4, sl
 8002586:	603b      	str	r3, [r7, #0]
 8002588:	eb45 030b 	adc.w	r3, r5, fp
 800258c:	607b      	str	r3, [r7, #4]
 800258e:	f04f 0200 	mov.w	r2, #0
 8002592:	f04f 0300 	mov.w	r3, #0
 8002596:	e9d7 4500 	ldrd	r4, r5, [r7]
 800259a:	4629      	mov	r1, r5
 800259c:	028b      	lsls	r3, r1, #10
 800259e:	4621      	mov	r1, r4
 80025a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025a4:	4621      	mov	r1, r4
 80025a6:	028a      	lsls	r2, r1, #10
 80025a8:	4610      	mov	r0, r2
 80025aa:	4619      	mov	r1, r3
 80025ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025ae:	2200      	movs	r2, #0
 80025b0:	60bb      	str	r3, [r7, #8]
 80025b2:	60fa      	str	r2, [r7, #12]
 80025b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025b8:	f7fd fe16 	bl	80001e8 <__aeabi_uldivmod>
 80025bc:	4602      	mov	r2, r0
 80025be:	460b      	mov	r3, r1
 80025c0:	4613      	mov	r3, r2
 80025c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80025c4:	4b0b      	ldr	r3, [pc, #44]	@ (80025f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	0c1b      	lsrs	r3, r3, #16
 80025ca:	f003 0303 	and.w	r3, r3, #3
 80025ce:	3301      	adds	r3, #1
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80025d4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80025d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025dc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80025de:	e002      	b.n	80025e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025e0:	4b05      	ldr	r3, [pc, #20]	@ (80025f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80025e2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80025e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3740      	adds	r7, #64	@ 0x40
 80025ec:	46bd      	mov	sp, r7
 80025ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025f2:	bf00      	nop
 80025f4:	40023800 	.word	0x40023800
 80025f8:	00f42400 	.word	0x00f42400
 80025fc:	017d7840 	.word	0x017d7840

08002600 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002604:	4b03      	ldr	r3, [pc, #12]	@ (8002614 <HAL_RCC_GetHCLKFreq+0x14>)
 8002606:	681b      	ldr	r3, [r3, #0]
}
 8002608:	4618      	mov	r0, r3
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	20000004 	.word	0x20000004

08002618 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800261c:	f7ff fff0 	bl	8002600 <HAL_RCC_GetHCLKFreq>
 8002620:	4602      	mov	r2, r0
 8002622:	4b05      	ldr	r3, [pc, #20]	@ (8002638 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	0a9b      	lsrs	r3, r3, #10
 8002628:	f003 0307 	and.w	r3, r3, #7
 800262c:	4903      	ldr	r1, [pc, #12]	@ (800263c <HAL_RCC_GetPCLK1Freq+0x24>)
 800262e:	5ccb      	ldrb	r3, [r1, r3]
 8002630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002634:	4618      	mov	r0, r3
 8002636:	bd80      	pop	{r7, pc}
 8002638:	40023800 	.word	0x40023800
 800263c:	080070e0 	.word	0x080070e0

08002640 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002644:	f7ff ffdc 	bl	8002600 <HAL_RCC_GetHCLKFreq>
 8002648:	4602      	mov	r2, r0
 800264a:	4b05      	ldr	r3, [pc, #20]	@ (8002660 <HAL_RCC_GetPCLK2Freq+0x20>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	0b5b      	lsrs	r3, r3, #13
 8002650:	f003 0307 	and.w	r3, r3, #7
 8002654:	4903      	ldr	r1, [pc, #12]	@ (8002664 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002656:	5ccb      	ldrb	r3, [r1, r3]
 8002658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800265c:	4618      	mov	r0, r3
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40023800 	.word	0x40023800
 8002664:	080070e0 	.word	0x080070e0

08002668 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e07b      	b.n	8002772 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267e:	2b00      	cmp	r3, #0
 8002680:	d108      	bne.n	8002694 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800268a:	d009      	beq.n	80026a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	61da      	str	r2, [r3, #28]
 8002692:	e005      	b.n	80026a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d106      	bne.n	80026c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f7fe fd96 	bl	80011ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2202      	movs	r2, #2
 80026c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80026d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80026e8:	431a      	orrs	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026f2:	431a      	orrs	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	691b      	ldr	r3, [r3, #16]
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	431a      	orrs	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	431a      	orrs	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002710:	431a      	orrs	r2, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800271a:	431a      	orrs	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002724:	ea42 0103 	orr.w	r1, r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800272c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	430a      	orrs	r2, r1
 8002736:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	0c1b      	lsrs	r3, r3, #16
 800273e:	f003 0104 	and.w	r1, r3, #4
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002746:	f003 0210 	and.w	r2, r3, #16
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	430a      	orrs	r2, r1
 8002750:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	69da      	ldr	r2, [r3, #28]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002760:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b088      	sub	sp, #32
 800277e:	af00      	add	r7, sp, #0
 8002780:	60f8      	str	r0, [r7, #12]
 8002782:	60b9      	str	r1, [r7, #8]
 8002784:	603b      	str	r3, [r7, #0]
 8002786:	4613      	mov	r3, r2
 8002788:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800278a:	f7fe ffc7 	bl	800171c <HAL_GetTick>
 800278e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002790:	88fb      	ldrh	r3, [r7, #6]
 8002792:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800279a:	b2db      	uxtb	r3, r3
 800279c:	2b01      	cmp	r3, #1
 800279e:	d001      	beq.n	80027a4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80027a0:	2302      	movs	r3, #2
 80027a2:	e12a      	b.n	80029fa <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d002      	beq.n	80027b0 <HAL_SPI_Transmit+0x36>
 80027aa:	88fb      	ldrh	r3, [r7, #6]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d101      	bne.n	80027b4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e122      	b.n	80029fa <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d101      	bne.n	80027c2 <HAL_SPI_Transmit+0x48>
 80027be:	2302      	movs	r3, #2
 80027c0:	e11b      	b.n	80029fa <HAL_SPI_Transmit+0x280>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2201      	movs	r2, #1
 80027c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2203      	movs	r2, #3
 80027ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	68ba      	ldr	r2, [r7, #8]
 80027dc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	88fa      	ldrh	r2, [r7, #6]
 80027e2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	88fa      	ldrh	r2, [r7, #6]
 80027e8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2200      	movs	r2, #0
 8002806:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002810:	d10f      	bne.n	8002832 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002820:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002830:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800283c:	2b40      	cmp	r3, #64	@ 0x40
 800283e:	d007      	beq.n	8002850 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800284e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002858:	d152      	bne.n	8002900 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d002      	beq.n	8002868 <HAL_SPI_Transmit+0xee>
 8002862:	8b7b      	ldrh	r3, [r7, #26]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d145      	bne.n	80028f4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800286c:	881a      	ldrh	r2, [r3, #0]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002878:	1c9a      	adds	r2, r3, #2
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002882:	b29b      	uxth	r3, r3
 8002884:	3b01      	subs	r3, #1
 8002886:	b29a      	uxth	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800288c:	e032      	b.n	80028f4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b02      	cmp	r3, #2
 800289a:	d112      	bne.n	80028c2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a0:	881a      	ldrh	r2, [r3, #0]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ac:	1c9a      	adds	r2, r3, #2
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	3b01      	subs	r3, #1
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	86da      	strh	r2, [r3, #54]	@ 0x36
 80028c0:	e018      	b.n	80028f4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028c2:	f7fe ff2b 	bl	800171c <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	683a      	ldr	r2, [r7, #0]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d803      	bhi.n	80028da <HAL_SPI_Transmit+0x160>
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80028d8:	d102      	bne.n	80028e0 <HAL_SPI_Transmit+0x166>
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d109      	bne.n	80028f4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e082      	b.n	80029fa <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1c7      	bne.n	800288e <HAL_SPI_Transmit+0x114>
 80028fe:	e053      	b.n	80029a8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d002      	beq.n	800290e <HAL_SPI_Transmit+0x194>
 8002908:	8b7b      	ldrh	r3, [r7, #26]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d147      	bne.n	800299e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	330c      	adds	r3, #12
 8002918:	7812      	ldrb	r2, [r2, #0]
 800291a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002920:	1c5a      	adds	r2, r3, #1
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800292a:	b29b      	uxth	r3, r3
 800292c:	3b01      	subs	r3, #1
 800292e:	b29a      	uxth	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002934:	e033      	b.n	800299e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b02      	cmp	r3, #2
 8002942:	d113      	bne.n	800296c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	330c      	adds	r3, #12
 800294e:	7812      	ldrb	r2, [r2, #0]
 8002950:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002956:	1c5a      	adds	r2, r3, #1
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002960:	b29b      	uxth	r3, r3
 8002962:	3b01      	subs	r3, #1
 8002964:	b29a      	uxth	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	86da      	strh	r2, [r3, #54]	@ 0x36
 800296a:	e018      	b.n	800299e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800296c:	f7fe fed6 	bl	800171c <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	683a      	ldr	r2, [r7, #0]
 8002978:	429a      	cmp	r2, r3
 800297a:	d803      	bhi.n	8002984 <HAL_SPI_Transmit+0x20a>
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002982:	d102      	bne.n	800298a <HAL_SPI_Transmit+0x210>
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d109      	bne.n	800299e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2201      	movs	r2, #1
 800298e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e02d      	b.n	80029fa <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1c6      	bne.n	8002936 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029a8:	69fa      	ldr	r2, [r7, #28]
 80029aa:	6839      	ldr	r1, [r7, #0]
 80029ac:	68f8      	ldr	r0, [r7, #12]
 80029ae:	f000 fa67 	bl	8002e80 <SPI_EndRxTxTransaction>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d002      	beq.n	80029be <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2220      	movs	r2, #32
 80029bc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d10a      	bne.n	80029dc <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029c6:	2300      	movs	r3, #0
 80029c8:	617b      	str	r3, [r7, #20]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	617b      	str	r3, [r7, #20]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	617b      	str	r3, [r7, #20]
 80029da:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e000      	b.n	80029fa <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80029f8:	2300      	movs	r3, #0
  }
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3720      	adds	r7, #32
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b08a      	sub	sp, #40	@ 0x28
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	60f8      	str	r0, [r7, #12]
 8002a0a:	60b9      	str	r1, [r7, #8]
 8002a0c:	607a      	str	r2, [r7, #4]
 8002a0e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002a10:	2301      	movs	r3, #1
 8002a12:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a14:	f7fe fe82 	bl	800171c <HAL_GetTick>
 8002a18:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002a20:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002a28:	887b      	ldrh	r3, [r7, #2]
 8002a2a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002a2c:	7ffb      	ldrb	r3, [r7, #31]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d00c      	beq.n	8002a4c <HAL_SPI_TransmitReceive+0x4a>
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a38:	d106      	bne.n	8002a48 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d102      	bne.n	8002a48 <HAL_SPI_TransmitReceive+0x46>
 8002a42:	7ffb      	ldrb	r3, [r7, #31]
 8002a44:	2b04      	cmp	r3, #4
 8002a46:	d001      	beq.n	8002a4c <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8002a48:	2302      	movs	r3, #2
 8002a4a:	e17f      	b.n	8002d4c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d005      	beq.n	8002a5e <HAL_SPI_TransmitReceive+0x5c>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d002      	beq.n	8002a5e <HAL_SPI_TransmitReceive+0x5c>
 8002a58:	887b      	ldrh	r3, [r7, #2]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e174      	b.n	8002d4c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d101      	bne.n	8002a70 <HAL_SPI_TransmitReceive+0x6e>
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	e16d      	b.n	8002d4c <HAL_SPI_TransmitReceive+0x34a>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b04      	cmp	r3, #4
 8002a82:	d003      	beq.n	8002a8c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2205      	movs	r2, #5
 8002a88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	887a      	ldrh	r2, [r7, #2]
 8002a9c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	887a      	ldrh	r2, [r7, #2]
 8002aa2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	68ba      	ldr	r2, [r7, #8]
 8002aa8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	887a      	ldrh	r2, [r7, #2]
 8002aae:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	887a      	ldrh	r2, [r7, #2]
 8002ab4:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002acc:	2b40      	cmp	r3, #64	@ 0x40
 8002ace:	d007      	beq.n	8002ae0 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ade:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ae8:	d17e      	bne.n	8002be8 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d002      	beq.n	8002af8 <HAL_SPI_TransmitReceive+0xf6>
 8002af2:	8afb      	ldrh	r3, [r7, #22]
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d16c      	bne.n	8002bd2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002afc:	881a      	ldrh	r2, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b08:	1c9a      	adds	r2, r3, #2
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	3b01      	subs	r3, #1
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b1c:	e059      	b.n	8002bd2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f003 0302 	and.w	r3, r3, #2
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d11b      	bne.n	8002b64 <HAL_SPI_TransmitReceive+0x162>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d016      	beq.n	8002b64 <HAL_SPI_TransmitReceive+0x162>
 8002b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d113      	bne.n	8002b64 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b40:	881a      	ldrh	r2, [r3, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b4c:	1c9a      	adds	r2, r3, #2
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b60:	2300      	movs	r3, #0
 8002b62:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d119      	bne.n	8002ba6 <HAL_SPI_TransmitReceive+0x1a4>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d014      	beq.n	8002ba6 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68da      	ldr	r2, [r3, #12]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b86:	b292      	uxth	r2, r2
 8002b88:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b8e:	1c9a      	adds	r2, r3, #2
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002ba6:	f7fe fdb9 	bl	800171c <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	6a3b      	ldr	r3, [r7, #32]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d80d      	bhi.n	8002bd2 <HAL_SPI_TransmitReceive+0x1d0>
 8002bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bb8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002bbc:	d009      	beq.n	8002bd2 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e0bc      	b.n	8002d4c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d1a0      	bne.n	8002b1e <HAL_SPI_TransmitReceive+0x11c>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d19b      	bne.n	8002b1e <HAL_SPI_TransmitReceive+0x11c>
 8002be6:	e082      	b.n	8002cee <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d002      	beq.n	8002bf6 <HAL_SPI_TransmitReceive+0x1f4>
 8002bf0:	8afb      	ldrh	r3, [r7, #22]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d171      	bne.n	8002cda <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	330c      	adds	r3, #12
 8002c00:	7812      	ldrb	r2, [r2, #0]
 8002c02:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c08:	1c5a      	adds	r2, r3, #1
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	3b01      	subs	r3, #1
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c1c:	e05d      	b.n	8002cda <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d11c      	bne.n	8002c66 <HAL_SPI_TransmitReceive+0x264>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d017      	beq.n	8002c66 <HAL_SPI_TransmitReceive+0x264>
 8002c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d114      	bne.n	8002c66 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	330c      	adds	r3, #12
 8002c46:	7812      	ldrb	r2, [r2, #0]
 8002c48:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c4e:	1c5a      	adds	r2, r3, #1
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c62:	2300      	movs	r3, #0
 8002c64:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d119      	bne.n	8002ca8 <HAL_SPI_TransmitReceive+0x2a6>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d014      	beq.n	8002ca8 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68da      	ldr	r2, [r3, #12]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c88:	b2d2      	uxtb	r2, r2
 8002c8a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c90:	1c5a      	adds	r2, r3, #1
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002ca8:	f7fe fd38 	bl	800171c <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	6a3b      	ldr	r3, [r7, #32]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d803      	bhi.n	8002cc0 <HAL_SPI_TransmitReceive+0x2be>
 8002cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002cbe:	d102      	bne.n	8002cc6 <HAL_SPI_TransmitReceive+0x2c4>
 8002cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d109      	bne.n	8002cda <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e038      	b.n	8002d4c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d19c      	bne.n	8002c1e <HAL_SPI_TransmitReceive+0x21c>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d197      	bne.n	8002c1e <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002cee:	6a3a      	ldr	r2, [r7, #32]
 8002cf0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f000 f8c4 	bl	8002e80 <SPI_EndRxTxTransaction>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d008      	beq.n	8002d10 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2220      	movs	r2, #32
 8002d02:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e01d      	b.n	8002d4c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d10a      	bne.n	8002d2e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d18:	2300      	movs	r3, #0
 8002d1a:	613b      	str	r3, [r7, #16]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	613b      	str	r3, [r7, #16]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	613b      	str	r3, [r7, #16]
 8002d2c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e000      	b.n	8002d4c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
  }
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3728      	adds	r7, #40	@ 0x28
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002d62:	b2db      	uxtb	r3, r3
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b088      	sub	sp, #32
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	603b      	str	r3, [r7, #0]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002d80:	f7fe fccc 	bl	800171c <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d88:	1a9b      	subs	r3, r3, r2
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002d90:	f7fe fcc4 	bl	800171c <HAL_GetTick>
 8002d94:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002d96:	4b39      	ldr	r3, [pc, #228]	@ (8002e7c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	015b      	lsls	r3, r3, #5
 8002d9c:	0d1b      	lsrs	r3, r3, #20
 8002d9e:	69fa      	ldr	r2, [r7, #28]
 8002da0:	fb02 f303 	mul.w	r3, r2, r3
 8002da4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002da6:	e054      	b.n	8002e52 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002dae:	d050      	beq.n	8002e52 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002db0:	f7fe fcb4 	bl	800171c <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	69fa      	ldr	r2, [r7, #28]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d902      	bls.n	8002dc6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d13d      	bne.n	8002e42 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	685a      	ldr	r2, [r3, #4]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002dd4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002dde:	d111      	bne.n	8002e04 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002de8:	d004      	beq.n	8002df4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002df2:	d107      	bne.n	8002e04 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e0c:	d10f      	bne.n	8002e2e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e017      	b.n	8002e72 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d101      	bne.n	8002e4c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	68ba      	ldr	r2, [r7, #8]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	bf0c      	ite	eq
 8002e62:	2301      	moveq	r3, #1
 8002e64:	2300      	movne	r3, #0
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	461a      	mov	r2, r3
 8002e6a:	79fb      	ldrb	r3, [r7, #7]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d19b      	bne.n	8002da8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3720      	adds	r7, #32
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	20000004 	.word	0x20000004

08002e80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b088      	sub	sp, #32
 8002e84:	af02      	add	r7, sp, #8
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	9300      	str	r3, [sp, #0]
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	2201      	movs	r2, #1
 8002e94:	2102      	movs	r1, #2
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f7ff ff6a 	bl	8002d70 <SPI_WaitFlagStateUntilTimeout>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d007      	beq.n	8002eb2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ea6:	f043 0220 	orr.w	r2, r3, #32
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e032      	b.n	8002f18 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002eb2:	4b1b      	ldr	r3, [pc, #108]	@ (8002f20 <SPI_EndRxTxTransaction+0xa0>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a1b      	ldr	r2, [pc, #108]	@ (8002f24 <SPI_EndRxTxTransaction+0xa4>)
 8002eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ebc:	0d5b      	lsrs	r3, r3, #21
 8002ebe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002ec2:	fb02 f303 	mul.w	r3, r2, r3
 8002ec6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ed0:	d112      	bne.n	8002ef8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	2180      	movs	r1, #128	@ 0x80
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f7ff ff47 	bl	8002d70 <SPI_WaitFlagStateUntilTimeout>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d016      	beq.n	8002f16 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eec:	f043 0220 	orr.w	r2, r3, #32
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e00f      	b.n	8002f18 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00a      	beq.n	8002f14 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	3b01      	subs	r3, #1
 8002f02:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f0e:	2b80      	cmp	r3, #128	@ 0x80
 8002f10:	d0f2      	beq.n	8002ef8 <SPI_EndRxTxTransaction+0x78>
 8002f12:	e000      	b.n	8002f16 <SPI_EndRxTxTransaction+0x96>
        break;
 8002f14:	bf00      	nop
  }

  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3718      	adds	r7, #24
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	20000004 	.word	0x20000004
 8002f24:	165e9f81 	.word	0x165e9f81

08002f28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e042      	b.n	8002fc0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d106      	bne.n	8002f54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f7fe f994 	bl	800127c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2224      	movs	r2, #36	@ 0x24
 8002f58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68da      	ldr	r2, [r3, #12]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 fdbd 	bl	8003aec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	691a      	ldr	r2, [r3, #16]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	695a      	ldr	r2, [r3, #20]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68da      	ldr	r2, [r3, #12]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002fa0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2220      	movs	r2, #32
 8002fac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2220      	movs	r2, #32
 8002fb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3708      	adds	r7, #8
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b08a      	sub	sp, #40	@ 0x28
 8002fcc:	af02      	add	r7, sp, #8
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	603b      	str	r3, [r7, #0]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	2b20      	cmp	r3, #32
 8002fe6:	d175      	bne.n	80030d4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d002      	beq.n	8002ff4 <HAL_UART_Transmit+0x2c>
 8002fee:	88fb      	ldrh	r3, [r7, #6]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d101      	bne.n	8002ff8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e06e      	b.n	80030d6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2221      	movs	r2, #33	@ 0x21
 8003002:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003006:	f7fe fb89 	bl	800171c <HAL_GetTick>
 800300a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	88fa      	ldrh	r2, [r7, #6]
 8003010:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	88fa      	ldrh	r2, [r7, #6]
 8003016:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003020:	d108      	bne.n	8003034 <HAL_UART_Transmit+0x6c>
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d104      	bne.n	8003034 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800302a:	2300      	movs	r3, #0
 800302c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	61bb      	str	r3, [r7, #24]
 8003032:	e003      	b.n	800303c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003038:	2300      	movs	r3, #0
 800303a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800303c:	e02e      	b.n	800309c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	9300      	str	r3, [sp, #0]
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	2200      	movs	r2, #0
 8003046:	2180      	movs	r1, #128	@ 0x80
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f000 fb1f 	bl	800368c <UART_WaitOnFlagUntilTimeout>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d005      	beq.n	8003060 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2220      	movs	r2, #32
 8003058:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e03a      	b.n	80030d6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d10b      	bne.n	800307e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	881b      	ldrh	r3, [r3, #0]
 800306a:	461a      	mov	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003074:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	3302      	adds	r3, #2
 800307a:	61bb      	str	r3, [r7, #24]
 800307c:	e007      	b.n	800308e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	781a      	ldrb	r2, [r3, #0]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	3301      	adds	r3, #1
 800308c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003092:	b29b      	uxth	r3, r3
 8003094:	3b01      	subs	r3, #1
 8003096:	b29a      	uxth	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1cb      	bne.n	800303e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	2200      	movs	r2, #0
 80030ae:	2140      	movs	r1, #64	@ 0x40
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f000 faeb 	bl	800368c <UART_WaitOnFlagUntilTimeout>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d005      	beq.n	80030c8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2220      	movs	r2, #32
 80030c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e006      	b.n	80030d6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2220      	movs	r2, #32
 80030cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80030d0:	2300      	movs	r3, #0
 80030d2:	e000      	b.n	80030d6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80030d4:	2302      	movs	r3, #2
  }
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3720      	adds	r7, #32
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b084      	sub	sp, #16
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	60f8      	str	r0, [r7, #12]
 80030e6:	60b9      	str	r1, [r7, #8]
 80030e8:	4613      	mov	r3, r2
 80030ea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	2b20      	cmp	r3, #32
 80030f6:	d112      	bne.n	800311e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d002      	beq.n	8003104 <HAL_UART_Receive_IT+0x26>
 80030fe:	88fb      	ldrh	r3, [r7, #6]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d101      	bne.n	8003108 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e00b      	b.n	8003120 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800310e:	88fb      	ldrh	r3, [r7, #6]
 8003110:	461a      	mov	r2, r3
 8003112:	68b9      	ldr	r1, [r7, #8]
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	f000 fb12 	bl	800373e <UART_Start_Receive_IT>
 800311a:	4603      	mov	r3, r0
 800311c:	e000      	b.n	8003120 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800311e:	2302      	movs	r3, #2
  }
}
 8003120:	4618      	mov	r0, r3
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b0ba      	sub	sp, #232	@ 0xe8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800314e:	2300      	movs	r3, #0
 8003150:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003154:	2300      	movs	r3, #0
 8003156:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800315a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800315e:	f003 030f 	and.w	r3, r3, #15
 8003162:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003166:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800316a:	2b00      	cmp	r3, #0
 800316c:	d10f      	bne.n	800318e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800316e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003172:	f003 0320 	and.w	r3, r3, #32
 8003176:	2b00      	cmp	r3, #0
 8003178:	d009      	beq.n	800318e <HAL_UART_IRQHandler+0x66>
 800317a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800317e:	f003 0320 	and.w	r3, r3, #32
 8003182:	2b00      	cmp	r3, #0
 8003184:	d003      	beq.n	800318e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 fbf2 	bl	8003970 <UART_Receive_IT>
      return;
 800318c:	e25b      	b.n	8003646 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800318e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003192:	2b00      	cmp	r3, #0
 8003194:	f000 80de 	beq.w	8003354 <HAL_UART_IRQHandler+0x22c>
 8003198:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d106      	bne.n	80031b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80031a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031a8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 80d1 	beq.w	8003354 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80031b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00b      	beq.n	80031d6 <HAL_UART_IRQHandler+0xae>
 80031be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d005      	beq.n	80031d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ce:	f043 0201 	orr.w	r2, r3, #1
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031da:	f003 0304 	and.w	r3, r3, #4
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00b      	beq.n	80031fa <HAL_UART_IRQHandler+0xd2>
 80031e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d005      	beq.n	80031fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031f2:	f043 0202 	orr.w	r2, r3, #2
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00b      	beq.n	800321e <HAL_UART_IRQHandler+0xf6>
 8003206:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b00      	cmp	r3, #0
 8003210:	d005      	beq.n	800321e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003216:	f043 0204 	orr.w	r2, r3, #4
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800321e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003222:	f003 0308 	and.w	r3, r3, #8
 8003226:	2b00      	cmp	r3, #0
 8003228:	d011      	beq.n	800324e <HAL_UART_IRQHandler+0x126>
 800322a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800322e:	f003 0320 	and.w	r3, r3, #32
 8003232:	2b00      	cmp	r3, #0
 8003234:	d105      	bne.n	8003242 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003236:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b00      	cmp	r3, #0
 8003240:	d005      	beq.n	800324e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003246:	f043 0208 	orr.w	r2, r3, #8
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003252:	2b00      	cmp	r3, #0
 8003254:	f000 81f2 	beq.w	800363c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800325c:	f003 0320 	and.w	r3, r3, #32
 8003260:	2b00      	cmp	r3, #0
 8003262:	d008      	beq.n	8003276 <HAL_UART_IRQHandler+0x14e>
 8003264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003268:	f003 0320 	and.w	r3, r3, #32
 800326c:	2b00      	cmp	r3, #0
 800326e:	d002      	beq.n	8003276 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f000 fb7d 	bl	8003970 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	695b      	ldr	r3, [r3, #20]
 800327c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003280:	2b40      	cmp	r3, #64	@ 0x40
 8003282:	bf0c      	ite	eq
 8003284:	2301      	moveq	r3, #1
 8003286:	2300      	movne	r3, #0
 8003288:	b2db      	uxtb	r3, r3
 800328a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003292:	f003 0308 	and.w	r3, r3, #8
 8003296:	2b00      	cmp	r3, #0
 8003298:	d103      	bne.n	80032a2 <HAL_UART_IRQHandler+0x17a>
 800329a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d04f      	beq.n	8003342 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 fa85 	bl	80037b2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032b2:	2b40      	cmp	r3, #64	@ 0x40
 80032b4:	d141      	bne.n	800333a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	3314      	adds	r3, #20
 80032bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80032c4:	e853 3f00 	ldrex	r3, [r3]
 80032c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80032cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80032d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80032d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	3314      	adds	r3, #20
 80032de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80032e2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80032e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80032ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80032f2:	e841 2300 	strex	r3, r2, [r1]
 80032f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80032fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1d9      	bne.n	80032b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003306:	2b00      	cmp	r3, #0
 8003308:	d013      	beq.n	8003332 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800330e:	4a7e      	ldr	r2, [pc, #504]	@ (8003508 <HAL_UART_IRQHandler+0x3e0>)
 8003310:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003316:	4618      	mov	r0, r3
 8003318:	f7fe fb8d 	bl	8001a36 <HAL_DMA_Abort_IT>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d016      	beq.n	8003350 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003326:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800332c:	4610      	mov	r0, r2
 800332e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003330:	e00e      	b.n	8003350 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 f994 	bl	8003660 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003338:	e00a      	b.n	8003350 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 f990 	bl	8003660 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003340:	e006      	b.n	8003350 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 f98c 	bl	8003660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800334e:	e175      	b.n	800363c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003350:	bf00      	nop
    return;
 8003352:	e173      	b.n	800363c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003358:	2b01      	cmp	r3, #1
 800335a:	f040 814f 	bne.w	80035fc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800335e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003362:	f003 0310 	and.w	r3, r3, #16
 8003366:	2b00      	cmp	r3, #0
 8003368:	f000 8148 	beq.w	80035fc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800336c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003370:	f003 0310 	and.w	r3, r3, #16
 8003374:	2b00      	cmp	r3, #0
 8003376:	f000 8141 	beq.w	80035fc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800337a:	2300      	movs	r3, #0
 800337c:	60bb      	str	r3, [r7, #8]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	60bb      	str	r3, [r7, #8]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	60bb      	str	r3, [r7, #8]
 800338e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800339a:	2b40      	cmp	r3, #64	@ 0x40
 800339c:	f040 80b6 	bne.w	800350c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80033ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 8145 	beq.w	8003640 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80033ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80033be:	429a      	cmp	r2, r3
 80033c0:	f080 813e 	bcs.w	8003640 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80033ca:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033d0:	69db      	ldr	r3, [r3, #28]
 80033d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033d6:	f000 8088 	beq.w	80034ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	330c      	adds	r3, #12
 80033e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80033e8:	e853 3f00 	ldrex	r3, [r3]
 80033ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80033f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80033f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	330c      	adds	r3, #12
 8003402:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003406:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800340a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800340e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003412:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003416:	e841 2300 	strex	r3, r2, [r1]
 800341a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800341e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1d9      	bne.n	80033da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	3314      	adds	r3, #20
 800342c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800342e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003430:	e853 3f00 	ldrex	r3, [r3]
 8003434:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003436:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003438:	f023 0301 	bic.w	r3, r3, #1
 800343c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	3314      	adds	r3, #20
 8003446:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800344a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800344e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003450:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003452:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003456:	e841 2300 	strex	r3, r2, [r1]
 800345a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800345c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1e1      	bne.n	8003426 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	3314      	adds	r3, #20
 8003468:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800346a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800346c:	e853 3f00 	ldrex	r3, [r3]
 8003470:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003472:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003474:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003478:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	3314      	adds	r3, #20
 8003482:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003486:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003488:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800348a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800348c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800348e:	e841 2300 	strex	r3, r2, [r1]
 8003492:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003494:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1e3      	bne.n	8003462 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2220      	movs	r2, #32
 800349e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	330c      	adds	r3, #12
 80034ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034b2:	e853 3f00 	ldrex	r3, [r3]
 80034b6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80034b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80034ba:	f023 0310 	bic.w	r3, r3, #16
 80034be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	330c      	adds	r3, #12
 80034c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80034cc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80034ce:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80034d2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80034d4:	e841 2300 	strex	r3, r2, [r1]
 80034d8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80034da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1e3      	bne.n	80034a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7fe fa36 	bl	8001956 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2202      	movs	r2, #2
 80034ee:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	4619      	mov	r1, r3
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 f8b7 	bl	8003674 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003506:	e09b      	b.n	8003640 <HAL_UART_IRQHandler+0x518>
 8003508:	08003879 	.word	0x08003879
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003514:	b29b      	uxth	r3, r3
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003520:	b29b      	uxth	r3, r3
 8003522:	2b00      	cmp	r3, #0
 8003524:	f000 808e 	beq.w	8003644 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003528:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800352c:	2b00      	cmp	r3, #0
 800352e:	f000 8089 	beq.w	8003644 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	330c      	adds	r3, #12
 8003538:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800353a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800353c:	e853 3f00 	ldrex	r3, [r3]
 8003540:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003544:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003548:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	330c      	adds	r3, #12
 8003552:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003556:	647a      	str	r2, [r7, #68]	@ 0x44
 8003558:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800355a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800355c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800355e:	e841 2300 	strex	r3, r2, [r1]
 8003562:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003564:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1e3      	bne.n	8003532 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	3314      	adds	r3, #20
 8003570:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003574:	e853 3f00 	ldrex	r3, [r3]
 8003578:	623b      	str	r3, [r7, #32]
   return(result);
 800357a:	6a3b      	ldr	r3, [r7, #32]
 800357c:	f023 0301 	bic.w	r3, r3, #1
 8003580:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	3314      	adds	r3, #20
 800358a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800358e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003590:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003592:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003594:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003596:	e841 2300 	strex	r3, r2, [r1]
 800359a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800359c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1e3      	bne.n	800356a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2220      	movs	r2, #32
 80035a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	330c      	adds	r3, #12
 80035b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	e853 3f00 	ldrex	r3, [r3]
 80035be:	60fb      	str	r3, [r7, #12]
   return(result);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f023 0310 	bic.w	r3, r3, #16
 80035c6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	330c      	adds	r3, #12
 80035d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80035d4:	61fa      	str	r2, [r7, #28]
 80035d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d8:	69b9      	ldr	r1, [r7, #24]
 80035da:	69fa      	ldr	r2, [r7, #28]
 80035dc:	e841 2300 	strex	r3, r2, [r1]
 80035e0:	617b      	str	r3, [r7, #20]
   return(result);
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1e3      	bne.n	80035b0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2202      	movs	r2, #2
 80035ec:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80035ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80035f2:	4619      	mov	r1, r3
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f000 f83d 	bl	8003674 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80035fa:	e023      	b.n	8003644 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80035fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003600:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003604:	2b00      	cmp	r3, #0
 8003606:	d009      	beq.n	800361c <HAL_UART_IRQHandler+0x4f4>
 8003608:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800360c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003610:	2b00      	cmp	r3, #0
 8003612:	d003      	beq.n	800361c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 f943 	bl	80038a0 <UART_Transmit_IT>
    return;
 800361a:	e014      	b.n	8003646 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800361c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003620:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00e      	beq.n	8003646 <HAL_UART_IRQHandler+0x51e>
 8003628:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800362c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003630:	2b00      	cmp	r3, #0
 8003632:	d008      	beq.n	8003646 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f000 f983 	bl	8003940 <UART_EndTransmit_IT>
    return;
 800363a:	e004      	b.n	8003646 <HAL_UART_IRQHandler+0x51e>
    return;
 800363c:	bf00      	nop
 800363e:	e002      	b.n	8003646 <HAL_UART_IRQHandler+0x51e>
      return;
 8003640:	bf00      	nop
 8003642:	e000      	b.n	8003646 <HAL_UART_IRQHandler+0x51e>
      return;
 8003644:	bf00      	nop
  }
}
 8003646:	37e8      	adds	r7, #232	@ 0xe8
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	460b      	mov	r3, r1
 800367e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003680:	bf00      	nop
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	603b      	str	r3, [r7, #0]
 8003698:	4613      	mov	r3, r2
 800369a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800369c:	e03b      	b.n	8003716 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800369e:	6a3b      	ldr	r3, [r7, #32]
 80036a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80036a4:	d037      	beq.n	8003716 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036a6:	f7fe f839 	bl	800171c <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	6a3a      	ldr	r2, [r7, #32]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d302      	bcc.n	80036bc <UART_WaitOnFlagUntilTimeout+0x30>
 80036b6:	6a3b      	ldr	r3, [r7, #32]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d101      	bne.n	80036c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e03a      	b.n	8003736 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	f003 0304 	and.w	r3, r3, #4
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d023      	beq.n	8003716 <UART_WaitOnFlagUntilTimeout+0x8a>
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	2b80      	cmp	r3, #128	@ 0x80
 80036d2:	d020      	beq.n	8003716 <UART_WaitOnFlagUntilTimeout+0x8a>
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	2b40      	cmp	r3, #64	@ 0x40
 80036d8:	d01d      	beq.n	8003716 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0308 	and.w	r3, r3, #8
 80036e4:	2b08      	cmp	r3, #8
 80036e6:	d116      	bne.n	8003716 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80036e8:	2300      	movs	r3, #0
 80036ea:	617b      	str	r3, [r7, #20]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	617b      	str	r3, [r7, #20]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	617b      	str	r3, [r7, #20]
 80036fc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f000 f857 	bl	80037b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2208      	movs	r2, #8
 8003708:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e00f      	b.n	8003736 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	4013      	ands	r3, r2
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	429a      	cmp	r2, r3
 8003724:	bf0c      	ite	eq
 8003726:	2301      	moveq	r3, #1
 8003728:	2300      	movne	r3, #0
 800372a:	b2db      	uxtb	r3, r3
 800372c:	461a      	mov	r2, r3
 800372e:	79fb      	ldrb	r3, [r7, #7]
 8003730:	429a      	cmp	r2, r3
 8003732:	d0b4      	beq.n	800369e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3718      	adds	r7, #24
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800373e:	b480      	push	{r7}
 8003740:	b085      	sub	sp, #20
 8003742:	af00      	add	r7, sp, #0
 8003744:	60f8      	str	r0, [r7, #12]
 8003746:	60b9      	str	r1, [r7, #8]
 8003748:	4613      	mov	r3, r2
 800374a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	68ba      	ldr	r2, [r7, #8]
 8003750:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	88fa      	ldrh	r2, [r7, #6]
 8003756:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	88fa      	ldrh	r2, [r7, #6]
 800375c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2222      	movs	r2, #34	@ 0x22
 8003768:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d007      	beq.n	8003784 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68da      	ldr	r2, [r3, #12]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003782:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	695a      	ldr	r2, [r3, #20]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f042 0201 	orr.w	r2, r2, #1
 8003792:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68da      	ldr	r2, [r3, #12]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f042 0220 	orr.w	r2, r2, #32
 80037a2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3714      	adds	r7, #20
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr

080037b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037b2:	b480      	push	{r7}
 80037b4:	b095      	sub	sp, #84	@ 0x54
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	330c      	adds	r3, #12
 80037c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037c4:	e853 3f00 	ldrex	r3, [r3]
 80037c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80037ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80037d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	330c      	adds	r3, #12
 80037d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80037da:	643a      	str	r2, [r7, #64]	@ 0x40
 80037dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80037e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80037e2:	e841 2300 	strex	r3, r2, [r1]
 80037e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80037e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1e5      	bne.n	80037ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	3314      	adds	r3, #20
 80037f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f6:	6a3b      	ldr	r3, [r7, #32]
 80037f8:	e853 3f00 	ldrex	r3, [r3]
 80037fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	f023 0301 	bic.w	r3, r3, #1
 8003804:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	3314      	adds	r3, #20
 800380c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800380e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003810:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003812:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003814:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003816:	e841 2300 	strex	r3, r2, [r1]
 800381a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800381c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1e5      	bne.n	80037ee <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003826:	2b01      	cmp	r3, #1
 8003828:	d119      	bne.n	800385e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	330c      	adds	r3, #12
 8003830:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	e853 3f00 	ldrex	r3, [r3]
 8003838:	60bb      	str	r3, [r7, #8]
   return(result);
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	f023 0310 	bic.w	r3, r3, #16
 8003840:	647b      	str	r3, [r7, #68]	@ 0x44
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	330c      	adds	r3, #12
 8003848:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800384a:	61ba      	str	r2, [r7, #24]
 800384c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800384e:	6979      	ldr	r1, [r7, #20]
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	e841 2300 	strex	r3, r2, [r1]
 8003856:	613b      	str	r3, [r7, #16]
   return(result);
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1e5      	bne.n	800382a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2220      	movs	r2, #32
 8003862:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800386c:	bf00      	nop
 800386e:	3754      	adds	r7, #84	@ 0x54
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003884:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003892:	68f8      	ldr	r0, [r7, #12]
 8003894:	f7ff fee4 	bl	8003660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003898:	bf00      	nop
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	2b21      	cmp	r3, #33	@ 0x21
 80038b2:	d13e      	bne.n	8003932 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038bc:	d114      	bne.n	80038e8 <UART_Transmit_IT+0x48>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d110      	bne.n	80038e8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	881b      	ldrh	r3, [r3, #0]
 80038d0:	461a      	mov	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038da:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	1c9a      	adds	r2, r3, #2
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	621a      	str	r2, [r3, #32]
 80038e6:	e008      	b.n	80038fa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a1b      	ldr	r3, [r3, #32]
 80038ec:	1c59      	adds	r1, r3, #1
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	6211      	str	r1, [r2, #32]
 80038f2:	781a      	ldrb	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80038fe:	b29b      	uxth	r3, r3
 8003900:	3b01      	subs	r3, #1
 8003902:	b29b      	uxth	r3, r3
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	4619      	mov	r1, r3
 8003908:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800390a:	2b00      	cmp	r3, #0
 800390c:	d10f      	bne.n	800392e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68da      	ldr	r2, [r3, #12]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800391c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68da      	ldr	r2, [r3, #12]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800392c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800392e:	2300      	movs	r3, #0
 8003930:	e000      	b.n	8003934 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003932:	2302      	movs	r3, #2
  }
}
 8003934:	4618      	mov	r0, r3
 8003936:	3714      	adds	r7, #20
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68da      	ldr	r2, [r3, #12]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003956:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2220      	movs	r2, #32
 800395c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f7ff fe73 	bl	800364c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	3708      	adds	r7, #8
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b08c      	sub	sp, #48	@ 0x30
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800397e:	b2db      	uxtb	r3, r3
 8003980:	2b22      	cmp	r3, #34	@ 0x22
 8003982:	f040 80ae 	bne.w	8003ae2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800398e:	d117      	bne.n	80039c0 <UART_Receive_IT+0x50>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d113      	bne.n	80039c0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003998:	2300      	movs	r3, #0
 800399a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039a0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039b2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039b8:	1c9a      	adds	r2, r3, #2
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	629a      	str	r2, [r3, #40]	@ 0x28
 80039be:	e026      	b.n	8003a0e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80039c6:	2300      	movs	r3, #0
 80039c8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039d2:	d007      	beq.n	80039e4 <UART_Receive_IT+0x74>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d10a      	bne.n	80039f2 <UART_Receive_IT+0x82>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d106      	bne.n	80039f2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	b2da      	uxtb	r2, r3
 80039ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ee:	701a      	strb	r2, [r3, #0]
 80039f0:	e008      	b.n	8003a04 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80039fe:	b2da      	uxtb	r2, r3
 8003a00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a02:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a08:	1c5a      	adds	r2, r3, #1
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	3b01      	subs	r3, #1
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d15d      	bne.n	8003ade <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68da      	ldr	r2, [r3, #12]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 0220 	bic.w	r2, r2, #32
 8003a30:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68da      	ldr	r2, [r3, #12]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a40:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	695a      	ldr	r2, [r3, #20]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f022 0201 	bic.w	r2, r2, #1
 8003a50:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2220      	movs	r2, #32
 8003a56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d135      	bne.n	8003ad4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	330c      	adds	r3, #12
 8003a74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	e853 3f00 	ldrex	r3, [r3]
 8003a7c:	613b      	str	r3, [r7, #16]
   return(result);
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	f023 0310 	bic.w	r3, r3, #16
 8003a84:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	330c      	adds	r3, #12
 8003a8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a8e:	623a      	str	r2, [r7, #32]
 8003a90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a92:	69f9      	ldr	r1, [r7, #28]
 8003a94:	6a3a      	ldr	r2, [r7, #32]
 8003a96:	e841 2300 	strex	r3, r2, [r1]
 8003a9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1e5      	bne.n	8003a6e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0310 	and.w	r3, r3, #16
 8003aac:	2b10      	cmp	r3, #16
 8003aae:	d10a      	bne.n	8003ac6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	60fb      	str	r3, [r7, #12]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	60fb      	str	r3, [r7, #12]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	60fb      	str	r3, [r7, #12]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003aca:	4619      	mov	r1, r3
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f7ff fdd1 	bl	8003674 <HAL_UARTEx_RxEventCallback>
 8003ad2:	e002      	b.n	8003ada <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f7fd fd49 	bl	800156c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003ada:	2300      	movs	r3, #0
 8003adc:	e002      	b.n	8003ae4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	e000      	b.n	8003ae4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003ae2:	2302      	movs	r3, #2
  }
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3730      	adds	r7, #48	@ 0x30
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003aec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003af0:	b0c0      	sub	sp, #256	@ 0x100
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b08:	68d9      	ldr	r1, [r3, #12]
 8003b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	ea40 0301 	orr.w	r3, r0, r1
 8003b14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b1a:	689a      	ldr	r2, [r3, #8]
 8003b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	431a      	orrs	r2, r3
 8003b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b30:	69db      	ldr	r3, [r3, #28]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003b44:	f021 010c 	bic.w	r1, r1, #12
 8003b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003b52:	430b      	orrs	r3, r1
 8003b54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b66:	6999      	ldr	r1, [r3, #24]
 8003b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	ea40 0301 	orr.w	r3, r0, r1
 8003b72:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	4b8f      	ldr	r3, [pc, #572]	@ (8003db8 <UART_SetConfig+0x2cc>)
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d005      	beq.n	8003b8c <UART_SetConfig+0xa0>
 8003b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	4b8d      	ldr	r3, [pc, #564]	@ (8003dbc <UART_SetConfig+0x2d0>)
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d104      	bne.n	8003b96 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b8c:	f7fe fd58 	bl	8002640 <HAL_RCC_GetPCLK2Freq>
 8003b90:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003b94:	e003      	b.n	8003b9e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b96:	f7fe fd3f 	bl	8002618 <HAL_RCC_GetPCLK1Freq>
 8003b9a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ba2:	69db      	ldr	r3, [r3, #28]
 8003ba4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ba8:	f040 810c 	bne.w	8003dc4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003bac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003bb6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003bba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003bbe:	4622      	mov	r2, r4
 8003bc0:	462b      	mov	r3, r5
 8003bc2:	1891      	adds	r1, r2, r2
 8003bc4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003bc6:	415b      	adcs	r3, r3
 8003bc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003bca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003bce:	4621      	mov	r1, r4
 8003bd0:	eb12 0801 	adds.w	r8, r2, r1
 8003bd4:	4629      	mov	r1, r5
 8003bd6:	eb43 0901 	adc.w	r9, r3, r1
 8003bda:	f04f 0200 	mov.w	r2, #0
 8003bde:	f04f 0300 	mov.w	r3, #0
 8003be2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003be6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bee:	4690      	mov	r8, r2
 8003bf0:	4699      	mov	r9, r3
 8003bf2:	4623      	mov	r3, r4
 8003bf4:	eb18 0303 	adds.w	r3, r8, r3
 8003bf8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003bfc:	462b      	mov	r3, r5
 8003bfe:	eb49 0303 	adc.w	r3, r9, r3
 8003c02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003c12:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003c16:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	18db      	adds	r3, r3, r3
 8003c1e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c20:	4613      	mov	r3, r2
 8003c22:	eb42 0303 	adc.w	r3, r2, r3
 8003c26:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c28:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003c2c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003c30:	f7fc fada 	bl	80001e8 <__aeabi_uldivmod>
 8003c34:	4602      	mov	r2, r0
 8003c36:	460b      	mov	r3, r1
 8003c38:	4b61      	ldr	r3, [pc, #388]	@ (8003dc0 <UART_SetConfig+0x2d4>)
 8003c3a:	fba3 2302 	umull	r2, r3, r3, r2
 8003c3e:	095b      	lsrs	r3, r3, #5
 8003c40:	011c      	lsls	r4, r3, #4
 8003c42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c46:	2200      	movs	r2, #0
 8003c48:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c4c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003c50:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003c54:	4642      	mov	r2, r8
 8003c56:	464b      	mov	r3, r9
 8003c58:	1891      	adds	r1, r2, r2
 8003c5a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003c5c:	415b      	adcs	r3, r3
 8003c5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c60:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003c64:	4641      	mov	r1, r8
 8003c66:	eb12 0a01 	adds.w	sl, r2, r1
 8003c6a:	4649      	mov	r1, r9
 8003c6c:	eb43 0b01 	adc.w	fp, r3, r1
 8003c70:	f04f 0200 	mov.w	r2, #0
 8003c74:	f04f 0300 	mov.w	r3, #0
 8003c78:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c7c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c84:	4692      	mov	sl, r2
 8003c86:	469b      	mov	fp, r3
 8003c88:	4643      	mov	r3, r8
 8003c8a:	eb1a 0303 	adds.w	r3, sl, r3
 8003c8e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c92:	464b      	mov	r3, r9
 8003c94:	eb4b 0303 	adc.w	r3, fp, r3
 8003c98:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ca8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003cac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	18db      	adds	r3, r3, r3
 8003cb4:	643b      	str	r3, [r7, #64]	@ 0x40
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	eb42 0303 	adc.w	r3, r2, r3
 8003cbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cbe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003cc2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003cc6:	f7fc fa8f 	bl	80001e8 <__aeabi_uldivmod>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	460b      	mov	r3, r1
 8003cce:	4611      	mov	r1, r2
 8003cd0:	4b3b      	ldr	r3, [pc, #236]	@ (8003dc0 <UART_SetConfig+0x2d4>)
 8003cd2:	fba3 2301 	umull	r2, r3, r3, r1
 8003cd6:	095b      	lsrs	r3, r3, #5
 8003cd8:	2264      	movs	r2, #100	@ 0x64
 8003cda:	fb02 f303 	mul.w	r3, r2, r3
 8003cde:	1acb      	subs	r3, r1, r3
 8003ce0:	00db      	lsls	r3, r3, #3
 8003ce2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003ce6:	4b36      	ldr	r3, [pc, #216]	@ (8003dc0 <UART_SetConfig+0x2d4>)
 8003ce8:	fba3 2302 	umull	r2, r3, r3, r2
 8003cec:	095b      	lsrs	r3, r3, #5
 8003cee:	005b      	lsls	r3, r3, #1
 8003cf0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003cf4:	441c      	add	r4, r3
 8003cf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d00:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003d04:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003d08:	4642      	mov	r2, r8
 8003d0a:	464b      	mov	r3, r9
 8003d0c:	1891      	adds	r1, r2, r2
 8003d0e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003d10:	415b      	adcs	r3, r3
 8003d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003d18:	4641      	mov	r1, r8
 8003d1a:	1851      	adds	r1, r2, r1
 8003d1c:	6339      	str	r1, [r7, #48]	@ 0x30
 8003d1e:	4649      	mov	r1, r9
 8003d20:	414b      	adcs	r3, r1
 8003d22:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d24:	f04f 0200 	mov.w	r2, #0
 8003d28:	f04f 0300 	mov.w	r3, #0
 8003d2c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003d30:	4659      	mov	r1, fp
 8003d32:	00cb      	lsls	r3, r1, #3
 8003d34:	4651      	mov	r1, sl
 8003d36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d3a:	4651      	mov	r1, sl
 8003d3c:	00ca      	lsls	r2, r1, #3
 8003d3e:	4610      	mov	r0, r2
 8003d40:	4619      	mov	r1, r3
 8003d42:	4603      	mov	r3, r0
 8003d44:	4642      	mov	r2, r8
 8003d46:	189b      	adds	r3, r3, r2
 8003d48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d4c:	464b      	mov	r3, r9
 8003d4e:	460a      	mov	r2, r1
 8003d50:	eb42 0303 	adc.w	r3, r2, r3
 8003d54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003d64:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003d68:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	18db      	adds	r3, r3, r3
 8003d70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d72:	4613      	mov	r3, r2
 8003d74:	eb42 0303 	adc.w	r3, r2, r3
 8003d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003d7e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003d82:	f7fc fa31 	bl	80001e8 <__aeabi_uldivmod>
 8003d86:	4602      	mov	r2, r0
 8003d88:	460b      	mov	r3, r1
 8003d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8003dc0 <UART_SetConfig+0x2d4>)
 8003d8c:	fba3 1302 	umull	r1, r3, r3, r2
 8003d90:	095b      	lsrs	r3, r3, #5
 8003d92:	2164      	movs	r1, #100	@ 0x64
 8003d94:	fb01 f303 	mul.w	r3, r1, r3
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	3332      	adds	r3, #50	@ 0x32
 8003d9e:	4a08      	ldr	r2, [pc, #32]	@ (8003dc0 <UART_SetConfig+0x2d4>)
 8003da0:	fba2 2303 	umull	r2, r3, r2, r3
 8003da4:	095b      	lsrs	r3, r3, #5
 8003da6:	f003 0207 	and.w	r2, r3, #7
 8003daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4422      	add	r2, r4
 8003db2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003db4:	e106      	b.n	8003fc4 <UART_SetConfig+0x4d8>
 8003db6:	bf00      	nop
 8003db8:	40011000 	.word	0x40011000
 8003dbc:	40011400 	.word	0x40011400
 8003dc0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003dc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003dce:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003dd2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003dd6:	4642      	mov	r2, r8
 8003dd8:	464b      	mov	r3, r9
 8003dda:	1891      	adds	r1, r2, r2
 8003ddc:	6239      	str	r1, [r7, #32]
 8003dde:	415b      	adcs	r3, r3
 8003de0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003de2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003de6:	4641      	mov	r1, r8
 8003de8:	1854      	adds	r4, r2, r1
 8003dea:	4649      	mov	r1, r9
 8003dec:	eb43 0501 	adc.w	r5, r3, r1
 8003df0:	f04f 0200 	mov.w	r2, #0
 8003df4:	f04f 0300 	mov.w	r3, #0
 8003df8:	00eb      	lsls	r3, r5, #3
 8003dfa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dfe:	00e2      	lsls	r2, r4, #3
 8003e00:	4614      	mov	r4, r2
 8003e02:	461d      	mov	r5, r3
 8003e04:	4643      	mov	r3, r8
 8003e06:	18e3      	adds	r3, r4, r3
 8003e08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003e0c:	464b      	mov	r3, r9
 8003e0e:	eb45 0303 	adc.w	r3, r5, r3
 8003e12:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003e22:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003e26:	f04f 0200 	mov.w	r2, #0
 8003e2a:	f04f 0300 	mov.w	r3, #0
 8003e2e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003e32:	4629      	mov	r1, r5
 8003e34:	008b      	lsls	r3, r1, #2
 8003e36:	4621      	mov	r1, r4
 8003e38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e3c:	4621      	mov	r1, r4
 8003e3e:	008a      	lsls	r2, r1, #2
 8003e40:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003e44:	f7fc f9d0 	bl	80001e8 <__aeabi_uldivmod>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	460b      	mov	r3, r1
 8003e4c:	4b60      	ldr	r3, [pc, #384]	@ (8003fd0 <UART_SetConfig+0x4e4>)
 8003e4e:	fba3 2302 	umull	r2, r3, r3, r2
 8003e52:	095b      	lsrs	r3, r3, #5
 8003e54:	011c      	lsls	r4, r3, #4
 8003e56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003e60:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003e64:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003e68:	4642      	mov	r2, r8
 8003e6a:	464b      	mov	r3, r9
 8003e6c:	1891      	adds	r1, r2, r2
 8003e6e:	61b9      	str	r1, [r7, #24]
 8003e70:	415b      	adcs	r3, r3
 8003e72:	61fb      	str	r3, [r7, #28]
 8003e74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e78:	4641      	mov	r1, r8
 8003e7a:	1851      	adds	r1, r2, r1
 8003e7c:	6139      	str	r1, [r7, #16]
 8003e7e:	4649      	mov	r1, r9
 8003e80:	414b      	adcs	r3, r1
 8003e82:	617b      	str	r3, [r7, #20]
 8003e84:	f04f 0200 	mov.w	r2, #0
 8003e88:	f04f 0300 	mov.w	r3, #0
 8003e8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e90:	4659      	mov	r1, fp
 8003e92:	00cb      	lsls	r3, r1, #3
 8003e94:	4651      	mov	r1, sl
 8003e96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e9a:	4651      	mov	r1, sl
 8003e9c:	00ca      	lsls	r2, r1, #3
 8003e9e:	4610      	mov	r0, r2
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	4642      	mov	r2, r8
 8003ea6:	189b      	adds	r3, r3, r2
 8003ea8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003eac:	464b      	mov	r3, r9
 8003eae:	460a      	mov	r2, r1
 8003eb0:	eb42 0303 	adc.w	r3, r2, r3
 8003eb4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003ec2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003ec4:	f04f 0200 	mov.w	r2, #0
 8003ec8:	f04f 0300 	mov.w	r3, #0
 8003ecc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003ed0:	4649      	mov	r1, r9
 8003ed2:	008b      	lsls	r3, r1, #2
 8003ed4:	4641      	mov	r1, r8
 8003ed6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003eda:	4641      	mov	r1, r8
 8003edc:	008a      	lsls	r2, r1, #2
 8003ede:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003ee2:	f7fc f981 	bl	80001e8 <__aeabi_uldivmod>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	460b      	mov	r3, r1
 8003eea:	4611      	mov	r1, r2
 8003eec:	4b38      	ldr	r3, [pc, #224]	@ (8003fd0 <UART_SetConfig+0x4e4>)
 8003eee:	fba3 2301 	umull	r2, r3, r3, r1
 8003ef2:	095b      	lsrs	r3, r3, #5
 8003ef4:	2264      	movs	r2, #100	@ 0x64
 8003ef6:	fb02 f303 	mul.w	r3, r2, r3
 8003efa:	1acb      	subs	r3, r1, r3
 8003efc:	011b      	lsls	r3, r3, #4
 8003efe:	3332      	adds	r3, #50	@ 0x32
 8003f00:	4a33      	ldr	r2, [pc, #204]	@ (8003fd0 <UART_SetConfig+0x4e4>)
 8003f02:	fba2 2303 	umull	r2, r3, r2, r3
 8003f06:	095b      	lsrs	r3, r3, #5
 8003f08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f0c:	441c      	add	r4, r3
 8003f0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f12:	2200      	movs	r2, #0
 8003f14:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f16:	677a      	str	r2, [r7, #116]	@ 0x74
 8003f18:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003f1c:	4642      	mov	r2, r8
 8003f1e:	464b      	mov	r3, r9
 8003f20:	1891      	adds	r1, r2, r2
 8003f22:	60b9      	str	r1, [r7, #8]
 8003f24:	415b      	adcs	r3, r3
 8003f26:	60fb      	str	r3, [r7, #12]
 8003f28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f2c:	4641      	mov	r1, r8
 8003f2e:	1851      	adds	r1, r2, r1
 8003f30:	6039      	str	r1, [r7, #0]
 8003f32:	4649      	mov	r1, r9
 8003f34:	414b      	adcs	r3, r1
 8003f36:	607b      	str	r3, [r7, #4]
 8003f38:	f04f 0200 	mov.w	r2, #0
 8003f3c:	f04f 0300 	mov.w	r3, #0
 8003f40:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f44:	4659      	mov	r1, fp
 8003f46:	00cb      	lsls	r3, r1, #3
 8003f48:	4651      	mov	r1, sl
 8003f4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f4e:	4651      	mov	r1, sl
 8003f50:	00ca      	lsls	r2, r1, #3
 8003f52:	4610      	mov	r0, r2
 8003f54:	4619      	mov	r1, r3
 8003f56:	4603      	mov	r3, r0
 8003f58:	4642      	mov	r2, r8
 8003f5a:	189b      	adds	r3, r3, r2
 8003f5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f5e:	464b      	mov	r3, r9
 8003f60:	460a      	mov	r2, r1
 8003f62:	eb42 0303 	adc.w	r3, r2, r3
 8003f66:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f72:	667a      	str	r2, [r7, #100]	@ 0x64
 8003f74:	f04f 0200 	mov.w	r2, #0
 8003f78:	f04f 0300 	mov.w	r3, #0
 8003f7c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003f80:	4649      	mov	r1, r9
 8003f82:	008b      	lsls	r3, r1, #2
 8003f84:	4641      	mov	r1, r8
 8003f86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f8a:	4641      	mov	r1, r8
 8003f8c:	008a      	lsls	r2, r1, #2
 8003f8e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003f92:	f7fc f929 	bl	80001e8 <__aeabi_uldivmod>
 8003f96:	4602      	mov	r2, r0
 8003f98:	460b      	mov	r3, r1
 8003f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8003fd0 <UART_SetConfig+0x4e4>)
 8003f9c:	fba3 1302 	umull	r1, r3, r3, r2
 8003fa0:	095b      	lsrs	r3, r3, #5
 8003fa2:	2164      	movs	r1, #100	@ 0x64
 8003fa4:	fb01 f303 	mul.w	r3, r1, r3
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	011b      	lsls	r3, r3, #4
 8003fac:	3332      	adds	r3, #50	@ 0x32
 8003fae:	4a08      	ldr	r2, [pc, #32]	@ (8003fd0 <UART_SetConfig+0x4e4>)
 8003fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb4:	095b      	lsrs	r3, r3, #5
 8003fb6:	f003 020f 	and.w	r2, r3, #15
 8003fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4422      	add	r2, r4
 8003fc2:	609a      	str	r2, [r3, #8]
}
 8003fc4:	bf00      	nop
 8003fc6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fd0:	51eb851f 	.word	0x51eb851f

08003fd4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003fd8:	4904      	ldr	r1, [pc, #16]	@ (8003fec <MX_FATFS_Init+0x18>)
 8003fda:	4805      	ldr	r0, [pc, #20]	@ (8003ff0 <MX_FATFS_Init+0x1c>)
 8003fdc:	f002 fb52 	bl	8006684 <FATFS_LinkDriver>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	4b03      	ldr	r3, [pc, #12]	@ (8003ff4 <MX_FATFS_Init+0x20>)
 8003fe6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003fe8:	bf00      	nop
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	200001c0 	.word	0x200001c0
 8003ff0:	20000010 	.word	0x20000010
 8003ff4:	200001bc 	.word	0x200001bc

08003ff8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003ffc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	4603      	mov	r3, r0
 8004010:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8004012:	79fb      	ldrb	r3, [r7, #7]
 8004014:	4618      	mov	r0, r3
 8004016:	f7fc fc9b 	bl	8000950 <SD_disk_initialize>
 800401a:	4603      	mov	r3, r0
 800401c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800401e:	4618      	mov	r0, r3
 8004020:	3708      	adds	r7, #8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004026:	b580      	push	{r7, lr}
 8004028:	b082      	sub	sp, #8
 800402a:	af00      	add	r7, sp, #0
 800402c:	4603      	mov	r3, r0
 800402e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);;
 8004030:	79fb      	ldrb	r3, [r7, #7]
 8004032:	4618      	mov	r0, r3
 8004034:	f7fc fd76 	bl	8000b24 <SD_disk_status>
 8004038:	4603      	mov	r3, r0
 800403a:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800403c:	4618      	mov	r0, r3
 800403e:	3708      	adds	r7, #8
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	60b9      	str	r1, [r7, #8]
 800404c:	607a      	str	r2, [r7, #4]
 800404e:	603b      	str	r3, [r7, #0]
 8004050:	4603      	mov	r3, r0
 8004052:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8004054:	7bf8      	ldrb	r0, [r7, #15]
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	68b9      	ldr	r1, [r7, #8]
 800405c:	f7fc fd78 	bl	8000b50 <SD_disk_read>
 8004060:	4603      	mov	r3, r0
 8004062:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8004064:	4618      	mov	r0, r3
 8004066:	3710      	adds	r7, #16
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	60b9      	str	r1, [r7, #8]
 8004074:	607a      	str	r2, [r7, #4]
 8004076:	603b      	str	r3, [r7, #0]
 8004078:	4603      	mov	r3, r0
 800407a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 800407c:	7bf8      	ldrb	r0, [r7, #15]
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	68b9      	ldr	r1, [r7, #8]
 8004084:	f7fc fdce 	bl	8000c24 <SD_disk_write>
 8004088:	4603      	mov	r3, r0
 800408a:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 800408c:	4618      	mov	r0, r3
 800408e:	3710      	adds	r7, #16
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	4603      	mov	r3, r0
 800409c:	603a      	str	r2, [r7, #0]
 800409e:	71fb      	strb	r3, [r7, #7]
 80040a0:	460b      	mov	r3, r1
 80040a2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 80040a4:	79fb      	ldrb	r3, [r7, #7]
 80040a6:	79b9      	ldrb	r1, [r7, #6]
 80040a8:	683a      	ldr	r2, [r7, #0]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7fc fe3e 	bl	8000d2c <SD_disk_ioctl>
 80040b0:	4603      	mov	r3, r0
 80040b2:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3708      	adds	r7, #8
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	4603      	mov	r3, r0
 80040c4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80040c6:	79fb      	ldrb	r3, [r7, #7]
 80040c8:	4a08      	ldr	r2, [pc, #32]	@ (80040ec <disk_status+0x30>)
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	4413      	add	r3, r2
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	79fa      	ldrb	r2, [r7, #7]
 80040d4:	4905      	ldr	r1, [pc, #20]	@ (80040ec <disk_status+0x30>)
 80040d6:	440a      	add	r2, r1
 80040d8:	7a12      	ldrb	r2, [r2, #8]
 80040da:	4610      	mov	r0, r2
 80040dc:	4798      	blx	r3
 80040de:	4603      	mov	r3, r0
 80040e0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80040e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3710      	adds	r7, #16
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	200001ec 	.word	0x200001ec

080040f0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	4603      	mov	r3, r0
 80040f8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80040fa:	2300      	movs	r3, #0
 80040fc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80040fe:	79fb      	ldrb	r3, [r7, #7]
 8004100:	4a0e      	ldr	r2, [pc, #56]	@ (800413c <disk_initialize+0x4c>)
 8004102:	5cd3      	ldrb	r3, [r2, r3]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d114      	bne.n	8004132 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004108:	79fb      	ldrb	r3, [r7, #7]
 800410a:	4a0c      	ldr	r2, [pc, #48]	@ (800413c <disk_initialize+0x4c>)
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	4413      	add	r3, r2
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	79fa      	ldrb	r2, [r7, #7]
 8004116:	4909      	ldr	r1, [pc, #36]	@ (800413c <disk_initialize+0x4c>)
 8004118:	440a      	add	r2, r1
 800411a:	7a12      	ldrb	r2, [r2, #8]
 800411c:	4610      	mov	r0, r2
 800411e:	4798      	blx	r3
 8004120:	4603      	mov	r3, r0
 8004122:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8004124:	7bfb      	ldrb	r3, [r7, #15]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d103      	bne.n	8004132 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800412a:	79fb      	ldrb	r3, [r7, #7]
 800412c:	4a03      	ldr	r2, [pc, #12]	@ (800413c <disk_initialize+0x4c>)
 800412e:	2101      	movs	r1, #1
 8004130:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8004132:	7bfb      	ldrb	r3, [r7, #15]
}
 8004134:	4618      	mov	r0, r3
 8004136:	3710      	adds	r7, #16
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	200001ec 	.word	0x200001ec

08004140 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004140:	b590      	push	{r4, r7, lr}
 8004142:	b087      	sub	sp, #28
 8004144:	af00      	add	r7, sp, #0
 8004146:	60b9      	str	r1, [r7, #8]
 8004148:	607a      	str	r2, [r7, #4]
 800414a:	603b      	str	r3, [r7, #0]
 800414c:	4603      	mov	r3, r0
 800414e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004150:	7bfb      	ldrb	r3, [r7, #15]
 8004152:	4a0a      	ldr	r2, [pc, #40]	@ (800417c <disk_read+0x3c>)
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	4413      	add	r3, r2
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	689c      	ldr	r4, [r3, #8]
 800415c:	7bfb      	ldrb	r3, [r7, #15]
 800415e:	4a07      	ldr	r2, [pc, #28]	@ (800417c <disk_read+0x3c>)
 8004160:	4413      	add	r3, r2
 8004162:	7a18      	ldrb	r0, [r3, #8]
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	68b9      	ldr	r1, [r7, #8]
 800416a:	47a0      	blx	r4
 800416c:	4603      	mov	r3, r0
 800416e:	75fb      	strb	r3, [r7, #23]
  return res;
 8004170:	7dfb      	ldrb	r3, [r7, #23]
}
 8004172:	4618      	mov	r0, r3
 8004174:	371c      	adds	r7, #28
 8004176:	46bd      	mov	sp, r7
 8004178:	bd90      	pop	{r4, r7, pc}
 800417a:	bf00      	nop
 800417c:	200001ec 	.word	0x200001ec

08004180 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004180:	b590      	push	{r4, r7, lr}
 8004182:	b087      	sub	sp, #28
 8004184:	af00      	add	r7, sp, #0
 8004186:	60b9      	str	r1, [r7, #8]
 8004188:	607a      	str	r2, [r7, #4]
 800418a:	603b      	str	r3, [r7, #0]
 800418c:	4603      	mov	r3, r0
 800418e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004190:	7bfb      	ldrb	r3, [r7, #15]
 8004192:	4a0a      	ldr	r2, [pc, #40]	@ (80041bc <disk_write+0x3c>)
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	4413      	add	r3, r2
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	68dc      	ldr	r4, [r3, #12]
 800419c:	7bfb      	ldrb	r3, [r7, #15]
 800419e:	4a07      	ldr	r2, [pc, #28]	@ (80041bc <disk_write+0x3c>)
 80041a0:	4413      	add	r3, r2
 80041a2:	7a18      	ldrb	r0, [r3, #8]
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	68b9      	ldr	r1, [r7, #8]
 80041aa:	47a0      	blx	r4
 80041ac:	4603      	mov	r3, r0
 80041ae:	75fb      	strb	r3, [r7, #23]
  return res;
 80041b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	371c      	adds	r7, #28
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd90      	pop	{r4, r7, pc}
 80041ba:	bf00      	nop
 80041bc:	200001ec 	.word	0x200001ec

080041c0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	4603      	mov	r3, r0
 80041c8:	603a      	str	r2, [r7, #0]
 80041ca:	71fb      	strb	r3, [r7, #7]
 80041cc:	460b      	mov	r3, r1
 80041ce:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80041d0:	79fb      	ldrb	r3, [r7, #7]
 80041d2:	4a09      	ldr	r2, [pc, #36]	@ (80041f8 <disk_ioctl+0x38>)
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	4413      	add	r3, r2
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	79fa      	ldrb	r2, [r7, #7]
 80041de:	4906      	ldr	r1, [pc, #24]	@ (80041f8 <disk_ioctl+0x38>)
 80041e0:	440a      	add	r2, r1
 80041e2:	7a10      	ldrb	r0, [r2, #8]
 80041e4:	79b9      	ldrb	r1, [r7, #6]
 80041e6:	683a      	ldr	r2, [r7, #0]
 80041e8:	4798      	blx	r3
 80041ea:	4603      	mov	r3, r0
 80041ec:	73fb      	strb	r3, [r7, #15]
  return res;
 80041ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	200001ec 	.word	0x200001ec

080041fc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80041fc:	b480      	push	{r7}
 80041fe:	b085      	sub	sp, #20
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	3301      	adds	r3, #1
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800420c:	89fb      	ldrh	r3, [r7, #14]
 800420e:	021b      	lsls	r3, r3, #8
 8004210:	b21a      	sxth	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	b21b      	sxth	r3, r3
 8004218:	4313      	orrs	r3, r2
 800421a:	b21b      	sxth	r3, r3
 800421c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800421e:	89fb      	ldrh	r3, [r7, #14]
}
 8004220:	4618      	mov	r0, r3
 8004222:	3714      	adds	r7, #20
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800422c:	b480      	push	{r7}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	3303      	adds	r3, #3
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	021b      	lsls	r3, r3, #8
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	3202      	adds	r2, #2
 8004244:	7812      	ldrb	r2, [r2, #0]
 8004246:	4313      	orrs	r3, r2
 8004248:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	021b      	lsls	r3, r3, #8
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	3201      	adds	r2, #1
 8004252:	7812      	ldrb	r2, [r2, #0]
 8004254:	4313      	orrs	r3, r2
 8004256:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	021b      	lsls	r3, r3, #8
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	7812      	ldrb	r2, [r2, #0]
 8004260:	4313      	orrs	r3, r2
 8004262:	60fb      	str	r3, [r7, #12]
	return rv;
 8004264:	68fb      	ldr	r3, [r7, #12]
}
 8004266:	4618      	mov	r0, r3
 8004268:	3714      	adds	r7, #20
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr

08004272 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004272:	b480      	push	{r7}
 8004274:	b083      	sub	sp, #12
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
 800427a:	460b      	mov	r3, r1
 800427c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	1c5a      	adds	r2, r3, #1
 8004282:	607a      	str	r2, [r7, #4]
 8004284:	887a      	ldrh	r2, [r7, #2]
 8004286:	b2d2      	uxtb	r2, r2
 8004288:	701a      	strb	r2, [r3, #0]
 800428a:	887b      	ldrh	r3, [r7, #2]
 800428c:	0a1b      	lsrs	r3, r3, #8
 800428e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	1c5a      	adds	r2, r3, #1
 8004294:	607a      	str	r2, [r7, #4]
 8004296:	887a      	ldrh	r2, [r7, #2]
 8004298:	b2d2      	uxtb	r2, r2
 800429a:	701a      	strb	r2, [r3, #0]
}
 800429c:	bf00      	nop
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	1c5a      	adds	r2, r3, #1
 80042b6:	607a      	str	r2, [r7, #4]
 80042b8:	683a      	ldr	r2, [r7, #0]
 80042ba:	b2d2      	uxtb	r2, r2
 80042bc:	701a      	strb	r2, [r3, #0]
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	0a1b      	lsrs	r3, r3, #8
 80042c2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	1c5a      	adds	r2, r3, #1
 80042c8:	607a      	str	r2, [r7, #4]
 80042ca:	683a      	ldr	r2, [r7, #0]
 80042cc:	b2d2      	uxtb	r2, r2
 80042ce:	701a      	strb	r2, [r3, #0]
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	0a1b      	lsrs	r3, r3, #8
 80042d4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	1c5a      	adds	r2, r3, #1
 80042da:	607a      	str	r2, [r7, #4]
 80042dc:	683a      	ldr	r2, [r7, #0]
 80042de:	b2d2      	uxtb	r2, r2
 80042e0:	701a      	strb	r2, [r3, #0]
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	0a1b      	lsrs	r3, r3, #8
 80042e6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	1c5a      	adds	r2, r3, #1
 80042ec:	607a      	str	r2, [r7, #4]
 80042ee:	683a      	ldr	r2, [r7, #0]
 80042f0:	b2d2      	uxtb	r2, r2
 80042f2:	701a      	strb	r2, [r3, #0]
}
 80042f4:	bf00      	nop
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004300:	b480      	push	{r7}
 8004302:	b087      	sub	sp, #28
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00d      	beq.n	8004336 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800431a:	693a      	ldr	r2, [r7, #16]
 800431c:	1c53      	adds	r3, r2, #1
 800431e:	613b      	str	r3, [r7, #16]
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	1c59      	adds	r1, r3, #1
 8004324:	6179      	str	r1, [r7, #20]
 8004326:	7812      	ldrb	r2, [r2, #0]
 8004328:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	3b01      	subs	r3, #1
 800432e:	607b      	str	r3, [r7, #4]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d1f1      	bne.n	800431a <mem_cpy+0x1a>
	}
}
 8004336:	bf00      	nop
 8004338:	371c      	adds	r7, #28
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr

08004342 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004342:	b480      	push	{r7}
 8004344:	b087      	sub	sp, #28
 8004346:	af00      	add	r7, sp, #0
 8004348:	60f8      	str	r0, [r7, #12]
 800434a:	60b9      	str	r1, [r7, #8]
 800434c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	1c5a      	adds	r2, r3, #1
 8004356:	617a      	str	r2, [r7, #20]
 8004358:	68ba      	ldr	r2, [r7, #8]
 800435a:	b2d2      	uxtb	r2, r2
 800435c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	3b01      	subs	r3, #1
 8004362:	607b      	str	r3, [r7, #4]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d1f3      	bne.n	8004352 <mem_set+0x10>
}
 800436a:	bf00      	nop
 800436c:	bf00      	nop
 800436e:	371c      	adds	r7, #28
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004378:	b480      	push	{r7}
 800437a:	b089      	sub	sp, #36	@ 0x24
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	61fb      	str	r3, [r7, #28]
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800438c:	2300      	movs	r3, #0
 800438e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	1c5a      	adds	r2, r3, #1
 8004394:	61fa      	str	r2, [r7, #28]
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	4619      	mov	r1, r3
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	1c5a      	adds	r2, r3, #1
 800439e:	61ba      	str	r2, [r7, #24]
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	1acb      	subs	r3, r1, r3
 80043a4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	3b01      	subs	r3, #1
 80043aa:	607b      	str	r3, [r7, #4]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d002      	beq.n	80043b8 <mem_cmp+0x40>
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d0eb      	beq.n	8004390 <mem_cmp+0x18>

	return r;
 80043b8:	697b      	ldr	r3, [r7, #20]
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3724      	adds	r7, #36	@ 0x24
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr

080043c6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80043c6:	b480      	push	{r7}
 80043c8:	b083      	sub	sp, #12
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
 80043ce:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80043d0:	e002      	b.n	80043d8 <chk_chr+0x12>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	3301      	adds	r3, #1
 80043d6:	607b      	str	r3, [r7, #4]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d005      	beq.n	80043ec <chk_chr+0x26>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	461a      	mov	r2, r3
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d1f2      	bne.n	80043d2 <chk_chr+0xc>
	return *str;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	781b      	ldrb	r3, [r3, #0]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004406:	2300      	movs	r3, #0
 8004408:	60bb      	str	r3, [r7, #8]
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	60fb      	str	r3, [r7, #12]
 800440e:	e029      	b.n	8004464 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004410:	4a27      	ldr	r2, [pc, #156]	@ (80044b0 <chk_lock+0xb4>)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	011b      	lsls	r3, r3, #4
 8004416:	4413      	add	r3, r2
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d01d      	beq.n	800445a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800441e:	4a24      	ldr	r2, [pc, #144]	@ (80044b0 <chk_lock+0xb4>)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	011b      	lsls	r3, r3, #4
 8004424:	4413      	add	r3, r2
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	429a      	cmp	r2, r3
 800442e:	d116      	bne.n	800445e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004430:	4a1f      	ldr	r2, [pc, #124]	@ (80044b0 <chk_lock+0xb4>)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	011b      	lsls	r3, r3, #4
 8004436:	4413      	add	r3, r2
 8004438:	3304      	adds	r3, #4
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004440:	429a      	cmp	r2, r3
 8004442:	d10c      	bne.n	800445e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004444:	4a1a      	ldr	r2, [pc, #104]	@ (80044b0 <chk_lock+0xb4>)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	011b      	lsls	r3, r3, #4
 800444a:	4413      	add	r3, r2
 800444c:	3308      	adds	r3, #8
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004454:	429a      	cmp	r2, r3
 8004456:	d102      	bne.n	800445e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004458:	e007      	b.n	800446a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800445a:	2301      	movs	r3, #1
 800445c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	3301      	adds	r3, #1
 8004462:	60fb      	str	r3, [r7, #12]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d9d2      	bls.n	8004410 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2b02      	cmp	r3, #2
 800446e:	d109      	bne.n	8004484 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d102      	bne.n	800447c <chk_lock+0x80>
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	2b02      	cmp	r3, #2
 800447a:	d101      	bne.n	8004480 <chk_lock+0x84>
 800447c:	2300      	movs	r3, #0
 800447e:	e010      	b.n	80044a2 <chk_lock+0xa6>
 8004480:	2312      	movs	r3, #18
 8004482:	e00e      	b.n	80044a2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d108      	bne.n	800449c <chk_lock+0xa0>
 800448a:	4a09      	ldr	r2, [pc, #36]	@ (80044b0 <chk_lock+0xb4>)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	011b      	lsls	r3, r3, #4
 8004490:	4413      	add	r3, r2
 8004492:	330c      	adds	r3, #12
 8004494:	881b      	ldrh	r3, [r3, #0]
 8004496:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800449a:	d101      	bne.n	80044a0 <chk_lock+0xa4>
 800449c:	2310      	movs	r3, #16
 800449e:	e000      	b.n	80044a2 <chk_lock+0xa6>
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3714      	adds	r7, #20
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	200001cc 	.word	0x200001cc

080044b4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80044ba:	2300      	movs	r3, #0
 80044bc:	607b      	str	r3, [r7, #4]
 80044be:	e002      	b.n	80044c6 <enq_lock+0x12>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	3301      	adds	r3, #1
 80044c4:	607b      	str	r3, [r7, #4]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d806      	bhi.n	80044da <enq_lock+0x26>
 80044cc:	4a09      	ldr	r2, [pc, #36]	@ (80044f4 <enq_lock+0x40>)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	011b      	lsls	r3, r3, #4
 80044d2:	4413      	add	r3, r2
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1f2      	bne.n	80044c0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2b02      	cmp	r3, #2
 80044de:	bf14      	ite	ne
 80044e0:	2301      	movne	r3, #1
 80044e2:	2300      	moveq	r3, #0
 80044e4:	b2db      	uxtb	r3, r3
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	370c      	adds	r7, #12
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	200001cc 	.word	0x200001cc

080044f8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b085      	sub	sp, #20
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004502:	2300      	movs	r3, #0
 8004504:	60fb      	str	r3, [r7, #12]
 8004506:	e01f      	b.n	8004548 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004508:	4a41      	ldr	r2, [pc, #260]	@ (8004610 <inc_lock+0x118>)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	011b      	lsls	r3, r3, #4
 800450e:	4413      	add	r3, r2
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	429a      	cmp	r2, r3
 8004518:	d113      	bne.n	8004542 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800451a:	4a3d      	ldr	r2, [pc, #244]	@ (8004610 <inc_lock+0x118>)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	011b      	lsls	r3, r3, #4
 8004520:	4413      	add	r3, r2
 8004522:	3304      	adds	r3, #4
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800452a:	429a      	cmp	r2, r3
 800452c:	d109      	bne.n	8004542 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800452e:	4a38      	ldr	r2, [pc, #224]	@ (8004610 <inc_lock+0x118>)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	011b      	lsls	r3, r3, #4
 8004534:	4413      	add	r3, r2
 8004536:	3308      	adds	r3, #8
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800453e:	429a      	cmp	r2, r3
 8004540:	d006      	beq.n	8004550 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	3301      	adds	r3, #1
 8004546:	60fb      	str	r3, [r7, #12]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d9dc      	bls.n	8004508 <inc_lock+0x10>
 800454e:	e000      	b.n	8004552 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004550:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2b02      	cmp	r3, #2
 8004556:	d132      	bne.n	80045be <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004558:	2300      	movs	r3, #0
 800455a:	60fb      	str	r3, [r7, #12]
 800455c:	e002      	b.n	8004564 <inc_lock+0x6c>
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	3301      	adds	r3, #1
 8004562:	60fb      	str	r3, [r7, #12]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2b01      	cmp	r3, #1
 8004568:	d806      	bhi.n	8004578 <inc_lock+0x80>
 800456a:	4a29      	ldr	r2, [pc, #164]	@ (8004610 <inc_lock+0x118>)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	011b      	lsls	r3, r3, #4
 8004570:	4413      	add	r3, r2
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1f2      	bne.n	800455e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2b02      	cmp	r3, #2
 800457c:	d101      	bne.n	8004582 <inc_lock+0x8a>
 800457e:	2300      	movs	r3, #0
 8004580:	e040      	b.n	8004604 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	4922      	ldr	r1, [pc, #136]	@ (8004610 <inc_lock+0x118>)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	011b      	lsls	r3, r3, #4
 800458c:	440b      	add	r3, r1
 800458e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	689a      	ldr	r2, [r3, #8]
 8004594:	491e      	ldr	r1, [pc, #120]	@ (8004610 <inc_lock+0x118>)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	011b      	lsls	r3, r3, #4
 800459a:	440b      	add	r3, r1
 800459c:	3304      	adds	r3, #4
 800459e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	695a      	ldr	r2, [r3, #20]
 80045a4:	491a      	ldr	r1, [pc, #104]	@ (8004610 <inc_lock+0x118>)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	011b      	lsls	r3, r3, #4
 80045aa:	440b      	add	r3, r1
 80045ac:	3308      	adds	r3, #8
 80045ae:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80045b0:	4a17      	ldr	r2, [pc, #92]	@ (8004610 <inc_lock+0x118>)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	011b      	lsls	r3, r3, #4
 80045b6:	4413      	add	r3, r2
 80045b8:	330c      	adds	r3, #12
 80045ba:	2200      	movs	r2, #0
 80045bc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d009      	beq.n	80045d8 <inc_lock+0xe0>
 80045c4:	4a12      	ldr	r2, [pc, #72]	@ (8004610 <inc_lock+0x118>)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	011b      	lsls	r3, r3, #4
 80045ca:	4413      	add	r3, r2
 80045cc:	330c      	adds	r3, #12
 80045ce:	881b      	ldrh	r3, [r3, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d001      	beq.n	80045d8 <inc_lock+0xe0>
 80045d4:	2300      	movs	r3, #0
 80045d6:	e015      	b.n	8004604 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d108      	bne.n	80045f0 <inc_lock+0xf8>
 80045de:	4a0c      	ldr	r2, [pc, #48]	@ (8004610 <inc_lock+0x118>)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	011b      	lsls	r3, r3, #4
 80045e4:	4413      	add	r3, r2
 80045e6:	330c      	adds	r3, #12
 80045e8:	881b      	ldrh	r3, [r3, #0]
 80045ea:	3301      	adds	r3, #1
 80045ec:	b29a      	uxth	r2, r3
 80045ee:	e001      	b.n	80045f4 <inc_lock+0xfc>
 80045f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80045f4:	4906      	ldr	r1, [pc, #24]	@ (8004610 <inc_lock+0x118>)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	011b      	lsls	r3, r3, #4
 80045fa:	440b      	add	r3, r1
 80045fc:	330c      	adds	r3, #12
 80045fe:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	3301      	adds	r3, #1
}
 8004604:	4618      	mov	r0, r3
 8004606:	3714      	adds	r7, #20
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr
 8004610:	200001cc 	.word	0x200001cc

08004614 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004614:	b480      	push	{r7}
 8004616:	b085      	sub	sp, #20
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	3b01      	subs	r3, #1
 8004620:	607b      	str	r3, [r7, #4]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2b01      	cmp	r3, #1
 8004626:	d825      	bhi.n	8004674 <dec_lock+0x60>
		n = Files[i].ctr;
 8004628:	4a17      	ldr	r2, [pc, #92]	@ (8004688 <dec_lock+0x74>)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	011b      	lsls	r3, r3, #4
 800462e:	4413      	add	r3, r2
 8004630:	330c      	adds	r3, #12
 8004632:	881b      	ldrh	r3, [r3, #0]
 8004634:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004636:	89fb      	ldrh	r3, [r7, #14]
 8004638:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800463c:	d101      	bne.n	8004642 <dec_lock+0x2e>
 800463e:	2300      	movs	r3, #0
 8004640:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004642:	89fb      	ldrh	r3, [r7, #14]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d002      	beq.n	800464e <dec_lock+0x3a>
 8004648:	89fb      	ldrh	r3, [r7, #14]
 800464a:	3b01      	subs	r3, #1
 800464c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800464e:	4a0e      	ldr	r2, [pc, #56]	@ (8004688 <dec_lock+0x74>)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	011b      	lsls	r3, r3, #4
 8004654:	4413      	add	r3, r2
 8004656:	330c      	adds	r3, #12
 8004658:	89fa      	ldrh	r2, [r7, #14]
 800465a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800465c:	89fb      	ldrh	r3, [r7, #14]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d105      	bne.n	800466e <dec_lock+0x5a>
 8004662:	4a09      	ldr	r2, [pc, #36]	@ (8004688 <dec_lock+0x74>)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	011b      	lsls	r3, r3, #4
 8004668:	4413      	add	r3, r2
 800466a:	2200      	movs	r2, #0
 800466c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800466e:	2300      	movs	r3, #0
 8004670:	737b      	strb	r3, [r7, #13]
 8004672:	e001      	b.n	8004678 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004674:	2302      	movs	r3, #2
 8004676:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004678:	7b7b      	ldrb	r3, [r7, #13]
}
 800467a:	4618      	mov	r0, r3
 800467c:	3714      	adds	r7, #20
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	200001cc 	.word	0x200001cc

0800468c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004694:	2300      	movs	r3, #0
 8004696:	60fb      	str	r3, [r7, #12]
 8004698:	e010      	b.n	80046bc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800469a:	4a0d      	ldr	r2, [pc, #52]	@ (80046d0 <clear_lock+0x44>)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	011b      	lsls	r3, r3, #4
 80046a0:	4413      	add	r3, r2
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d105      	bne.n	80046b6 <clear_lock+0x2a>
 80046aa:	4a09      	ldr	r2, [pc, #36]	@ (80046d0 <clear_lock+0x44>)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	011b      	lsls	r3, r3, #4
 80046b0:	4413      	add	r3, r2
 80046b2:	2200      	movs	r2, #0
 80046b4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	3301      	adds	r3, #1
 80046ba:	60fb      	str	r3, [r7, #12]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d9eb      	bls.n	800469a <clear_lock+0xe>
	}
}
 80046c2:	bf00      	nop
 80046c4:	bf00      	nop
 80046c6:	3714      	adds	r7, #20
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr
 80046d0:	200001cc 	.word	0x200001cc

080046d4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b086      	sub	sp, #24
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80046dc:	2300      	movs	r3, #0
 80046de:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	78db      	ldrb	r3, [r3, #3]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d034      	beq.n	8004752 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ec:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	7858      	ldrb	r0, [r3, #1]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80046f8:	2301      	movs	r3, #1
 80046fa:	697a      	ldr	r2, [r7, #20]
 80046fc:	f7ff fd40 	bl	8004180 <disk_write>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d002      	beq.n	800470c <sync_window+0x38>
			res = FR_DISK_ERR;
 8004706:	2301      	movs	r3, #1
 8004708:	73fb      	strb	r3, [r7, #15]
 800470a:	e022      	b.n	8004752 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	697a      	ldr	r2, [r7, #20]
 8004718:	1ad2      	subs	r2, r2, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	429a      	cmp	r2, r3
 8004720:	d217      	bcs.n	8004752 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	789b      	ldrb	r3, [r3, #2]
 8004726:	613b      	str	r3, [r7, #16]
 8004728:	e010      	b.n	800474c <sync_window+0x78>
					wsect += fs->fsize;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	4413      	add	r3, r2
 8004732:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	7858      	ldrb	r0, [r3, #1]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800473e:	2301      	movs	r3, #1
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	f7ff fd1d 	bl	8004180 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	3b01      	subs	r3, #1
 800474a:	613b      	str	r3, [r7, #16]
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d8eb      	bhi.n	800472a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8004752:	7bfb      	ldrb	r3, [r7, #15]
}
 8004754:	4618      	mov	r0, r3
 8004756:	3718      	adds	r7, #24
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004766:	2300      	movs	r3, #0
 8004768:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800476e:	683a      	ldr	r2, [r7, #0]
 8004770:	429a      	cmp	r2, r3
 8004772:	d01b      	beq.n	80047ac <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f7ff ffad 	bl	80046d4 <sync_window>
 800477a:	4603      	mov	r3, r0
 800477c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800477e:	7bfb      	ldrb	r3, [r7, #15]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d113      	bne.n	80047ac <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	7858      	ldrb	r0, [r3, #1]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800478e:	2301      	movs	r3, #1
 8004790:	683a      	ldr	r2, [r7, #0]
 8004792:	f7ff fcd5 	bl	8004140 <disk_read>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d004      	beq.n	80047a6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800479c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80047a0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	683a      	ldr	r2, [r7, #0]
 80047aa:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 80047ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
	...

080047b8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f7ff ff87 	bl	80046d4 <sync_window>
 80047c6:	4603      	mov	r3, r0
 80047c8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80047ca:	7bfb      	ldrb	r3, [r7, #15]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d158      	bne.n	8004882 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	2b03      	cmp	r3, #3
 80047d6:	d148      	bne.n	800486a <sync_fs+0xb2>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	791b      	ldrb	r3, [r3, #4]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d144      	bne.n	800486a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	3330      	adds	r3, #48	@ 0x30
 80047e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047e8:	2100      	movs	r1, #0
 80047ea:	4618      	mov	r0, r3
 80047ec:	f7ff fda9 	bl	8004342 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	3330      	adds	r3, #48	@ 0x30
 80047f4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80047f8:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7ff fd38 	bl	8004272 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	3330      	adds	r3, #48	@ 0x30
 8004806:	4921      	ldr	r1, [pc, #132]	@ (800488c <sync_fs+0xd4>)
 8004808:	4618      	mov	r0, r3
 800480a:	f7ff fd4d 	bl	80042a8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	3330      	adds	r3, #48	@ 0x30
 8004812:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8004816:	491e      	ldr	r1, [pc, #120]	@ (8004890 <sync_fs+0xd8>)
 8004818:	4618      	mov	r0, r3
 800481a:	f7ff fd45 	bl	80042a8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	3330      	adds	r3, #48	@ 0x30
 8004822:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	4619      	mov	r1, r3
 800482c:	4610      	mov	r0, r2
 800482e:	f7ff fd3b 	bl	80042a8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	3330      	adds	r3, #48	@ 0x30
 8004836:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	4619      	mov	r1, r3
 8004840:	4610      	mov	r0, r2
 8004842:	f7ff fd31 	bl	80042a8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	69db      	ldr	r3, [r3, #28]
 800484a:	1c5a      	adds	r2, r3, #1
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	7858      	ldrb	r0, [r3, #1]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800485e:	2301      	movs	r3, #1
 8004860:	f7ff fc8e 	bl	8004180 <disk_write>
			fs->fsi_flag = 0;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	785b      	ldrb	r3, [r3, #1]
 800486e:	2200      	movs	r2, #0
 8004870:	2100      	movs	r1, #0
 8004872:	4618      	mov	r0, r3
 8004874:	f7ff fca4 	bl	80041c0 <disk_ioctl>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d001      	beq.n	8004882 <sync_fs+0xca>
 800487e:	2301      	movs	r3, #1
 8004880:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004882:	7bfb      	ldrb	r3, [r7, #15]
}
 8004884:	4618      	mov	r0, r3
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	41615252 	.word	0x41615252
 8004890:	61417272 	.word	0x61417272

08004894 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	3b02      	subs	r3, #2
 80048a2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	695b      	ldr	r3, [r3, #20]
 80048a8:	3b02      	subs	r3, #2
 80048aa:	683a      	ldr	r2, [r7, #0]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d301      	bcc.n	80048b4 <clust2sect+0x20>
 80048b0:	2300      	movs	r3, #0
 80048b2:	e008      	b.n	80048c6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	895b      	ldrh	r3, [r3, #10]
 80048b8:	461a      	mov	r2, r3
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	fb03 f202 	mul.w	r2, r3, r2
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048c4:	4413      	add	r3, r2
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	370c      	adds	r7, #12
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr

080048d2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b086      	sub	sp, #24
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
 80048da:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d904      	bls.n	80048f2 <get_fat+0x20>
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	695b      	ldr	r3, [r3, #20]
 80048ec:	683a      	ldr	r2, [r7, #0]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d302      	bcc.n	80048f8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80048f2:	2301      	movs	r3, #1
 80048f4:	617b      	str	r3, [r7, #20]
 80048f6:	e08e      	b.n	8004a16 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80048f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80048fc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	2b03      	cmp	r3, #3
 8004904:	d061      	beq.n	80049ca <get_fat+0xf8>
 8004906:	2b03      	cmp	r3, #3
 8004908:	dc7b      	bgt.n	8004a02 <get_fat+0x130>
 800490a:	2b01      	cmp	r3, #1
 800490c:	d002      	beq.n	8004914 <get_fat+0x42>
 800490e:	2b02      	cmp	r3, #2
 8004910:	d041      	beq.n	8004996 <get_fat+0xc4>
 8004912:	e076      	b.n	8004a02 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	60fb      	str	r3, [r7, #12]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	085b      	lsrs	r3, r3, #1
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	4413      	add	r3, r2
 8004920:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	6a1a      	ldr	r2, [r3, #32]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	0a5b      	lsrs	r3, r3, #9
 800492a:	4413      	add	r3, r2
 800492c:	4619      	mov	r1, r3
 800492e:	6938      	ldr	r0, [r7, #16]
 8004930:	f7ff ff14 	bl	800475c <move_window>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d166      	bne.n	8004a08 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	1c5a      	adds	r2, r3, #1
 800493e:	60fa      	str	r2, [r7, #12]
 8004940:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004944:	693a      	ldr	r2, [r7, #16]
 8004946:	4413      	add	r3, r2
 8004948:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800494c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	6a1a      	ldr	r2, [r3, #32]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	0a5b      	lsrs	r3, r3, #9
 8004956:	4413      	add	r3, r2
 8004958:	4619      	mov	r1, r3
 800495a:	6938      	ldr	r0, [r7, #16]
 800495c:	f7ff fefe 	bl	800475c <move_window>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d152      	bne.n	8004a0c <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	4413      	add	r3, r2
 8004970:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004974:	021b      	lsls	r3, r3, #8
 8004976:	68ba      	ldr	r2, [r7, #8]
 8004978:	4313      	orrs	r3, r2
 800497a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	2b00      	cmp	r3, #0
 8004984:	d002      	beq.n	800498c <get_fat+0xba>
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	091b      	lsrs	r3, r3, #4
 800498a:	e002      	b.n	8004992 <get_fat+0xc0>
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004992:	617b      	str	r3, [r7, #20]
			break;
 8004994:	e03f      	b.n	8004a16 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	6a1a      	ldr	r2, [r3, #32]
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	0a1b      	lsrs	r3, r3, #8
 800499e:	4413      	add	r3, r2
 80049a0:	4619      	mov	r1, r3
 80049a2:	6938      	ldr	r0, [r7, #16]
 80049a4:	f7ff feda 	bl	800475c <move_window>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d130      	bne.n	8004a10 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	005b      	lsls	r3, r3, #1
 80049b8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80049bc:	4413      	add	r3, r2
 80049be:	4618      	mov	r0, r3
 80049c0:	f7ff fc1c 	bl	80041fc <ld_word>
 80049c4:	4603      	mov	r3, r0
 80049c6:	617b      	str	r3, [r7, #20]
			break;
 80049c8:	e025      	b.n	8004a16 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	6a1a      	ldr	r2, [r3, #32]
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	09db      	lsrs	r3, r3, #7
 80049d2:	4413      	add	r3, r2
 80049d4:	4619      	mov	r1, r3
 80049d6:	6938      	ldr	r0, [r7, #16]
 80049d8:	f7ff fec0 	bl	800475c <move_window>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d118      	bne.n	8004a14 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80049f0:	4413      	add	r3, r2
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7ff fc1a 	bl	800422c <ld_dword>
 80049f8:	4603      	mov	r3, r0
 80049fa:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80049fe:	617b      	str	r3, [r7, #20]
			break;
 8004a00:	e009      	b.n	8004a16 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004a02:	2301      	movs	r3, #1
 8004a04:	617b      	str	r3, [r7, #20]
 8004a06:	e006      	b.n	8004a16 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004a08:	bf00      	nop
 8004a0a:	e004      	b.n	8004a16 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004a0c:	bf00      	nop
 8004a0e:	e002      	b.n	8004a16 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004a10:	bf00      	nop
 8004a12:	e000      	b.n	8004a16 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004a14:	bf00      	nop
		}
	}

	return val;
 8004a16:	697b      	ldr	r3, [r7, #20]
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3718      	adds	r7, #24
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004a20:	b590      	push	{r4, r7, lr}
 8004a22:	b089      	sub	sp, #36	@ 0x24
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8004a2c:	2302      	movs	r3, #2
 8004a2e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	f240 80d9 	bls.w	8004bea <put_fat+0x1ca>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	695b      	ldr	r3, [r3, #20]
 8004a3c:	68ba      	ldr	r2, [r7, #8]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	f080 80d3 	bcs.w	8004bea <put_fat+0x1ca>
		switch (fs->fs_type) {
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	2b03      	cmp	r3, #3
 8004a4a:	f000 8096 	beq.w	8004b7a <put_fat+0x15a>
 8004a4e:	2b03      	cmp	r3, #3
 8004a50:	f300 80cb 	bgt.w	8004bea <put_fat+0x1ca>
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d002      	beq.n	8004a5e <put_fat+0x3e>
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d06e      	beq.n	8004b3a <put_fat+0x11a>
 8004a5c:	e0c5      	b.n	8004bea <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	61bb      	str	r3, [r7, #24]
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	085b      	lsrs	r3, r3, #1
 8004a66:	69ba      	ldr	r2, [r7, #24]
 8004a68:	4413      	add	r3, r2
 8004a6a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6a1a      	ldr	r2, [r3, #32]
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	0a5b      	lsrs	r3, r3, #9
 8004a74:	4413      	add	r3, r2
 8004a76:	4619      	mov	r1, r3
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f7ff fe6f 	bl	800475c <move_window>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004a82:	7ffb      	ldrb	r3, [r7, #31]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f040 80a9 	bne.w	8004bdc <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	1c59      	adds	r1, r3, #1
 8004a94:	61b9      	str	r1, [r7, #24]
 8004a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a9a:	4413      	add	r3, r2
 8004a9c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	f003 0301 	and.w	r3, r3, #1
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00d      	beq.n	8004ac4 <put_fat+0xa4>
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	b25b      	sxtb	r3, r3
 8004aae:	f003 030f 	and.w	r3, r3, #15
 8004ab2:	b25a      	sxtb	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	011b      	lsls	r3, r3, #4
 8004aba:	b25b      	sxtb	r3, r3
 8004abc:	4313      	orrs	r3, r2
 8004abe:	b25b      	sxtb	r3, r3
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	e001      	b.n	8004ac8 <put_fat+0xa8>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	697a      	ldr	r2, [r7, #20]
 8004aca:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6a1a      	ldr	r2, [r3, #32]
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	0a5b      	lsrs	r3, r3, #9
 8004ada:	4413      	add	r3, r2
 8004adc:	4619      	mov	r1, r3
 8004ade:	68f8      	ldr	r0, [r7, #12]
 8004ae0:	f7ff fe3c 	bl	800475c <move_window>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004ae8:	7ffb      	ldrb	r3, [r7, #31]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d178      	bne.n	8004be0 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004afa:	4413      	add	r3, r2
 8004afc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	f003 0301 	and.w	r3, r3, #1
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d003      	beq.n	8004b10 <put_fat+0xf0>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	091b      	lsrs	r3, r3, #4
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	e00e      	b.n	8004b2e <put_fat+0x10e>
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	b25b      	sxtb	r3, r3
 8004b16:	f023 030f 	bic.w	r3, r3, #15
 8004b1a:	b25a      	sxtb	r2, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	0a1b      	lsrs	r3, r3, #8
 8004b20:	b25b      	sxtb	r3, r3
 8004b22:	f003 030f 	and.w	r3, r3, #15
 8004b26:	b25b      	sxtb	r3, r3
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	b25b      	sxtb	r3, r3
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2201      	movs	r2, #1
 8004b36:	70da      	strb	r2, [r3, #3]
			break;
 8004b38:	e057      	b.n	8004bea <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6a1a      	ldr	r2, [r3, #32]
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	0a1b      	lsrs	r3, r3, #8
 8004b42:	4413      	add	r3, r2
 8004b44:	4619      	mov	r1, r3
 8004b46:	68f8      	ldr	r0, [r7, #12]
 8004b48:	f7ff fe08 	bl	800475c <move_window>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004b50:	7ffb      	ldrb	r3, [r7, #31]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d146      	bne.n	8004be4 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	005b      	lsls	r3, r3, #1
 8004b60:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8004b64:	4413      	add	r3, r2
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	b292      	uxth	r2, r2
 8004b6a:	4611      	mov	r1, r2
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f7ff fb80 	bl	8004272 <st_word>
			fs->wflag = 1;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2201      	movs	r2, #1
 8004b76:	70da      	strb	r2, [r3, #3]
			break;
 8004b78:	e037      	b.n	8004bea <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6a1a      	ldr	r2, [r3, #32]
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	09db      	lsrs	r3, r3, #7
 8004b82:	4413      	add	r3, r2
 8004b84:	4619      	mov	r1, r3
 8004b86:	68f8      	ldr	r0, [r7, #12]
 8004b88:	f7ff fde8 	bl	800475c <move_window>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004b90:	7ffb      	ldrb	r3, [r7, #31]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d128      	bne.n	8004be8 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8004baa:	4413      	add	r3, r2
 8004bac:	4618      	mov	r0, r3
 8004bae:	f7ff fb3d 	bl	800422c <ld_dword>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004bb8:	4323      	orrs	r3, r4
 8004bba:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8004bca:	4413      	add	r3, r2
 8004bcc:	6879      	ldr	r1, [r7, #4]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7ff fb6a 	bl	80042a8 <st_dword>
			fs->wflag = 1;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	70da      	strb	r2, [r3, #3]
			break;
 8004bda:	e006      	b.n	8004bea <put_fat+0x1ca>
			if (res != FR_OK) break;
 8004bdc:	bf00      	nop
 8004bde:	e004      	b.n	8004bea <put_fat+0x1ca>
			if (res != FR_OK) break;
 8004be0:	bf00      	nop
 8004be2:	e002      	b.n	8004bea <put_fat+0x1ca>
			if (res != FR_OK) break;
 8004be4:	bf00      	nop
 8004be6:	e000      	b.n	8004bea <put_fat+0x1ca>
			if (res != FR_OK) break;
 8004be8:	bf00      	nop
		}
	}
	return res;
 8004bea:	7ffb      	ldrb	r3, [r7, #31]
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3724      	adds	r7, #36	@ 0x24
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd90      	pop	{r4, r7, pc}

08004bf4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b088      	sub	sp, #32
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004c00:	2300      	movs	r3, #0
 8004c02:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d904      	bls.n	8004c1a <remove_chain+0x26>
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	695b      	ldr	r3, [r3, #20]
 8004c14:	68ba      	ldr	r2, [r7, #8]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d301      	bcc.n	8004c1e <remove_chain+0x2a>
 8004c1a:	2302      	movs	r3, #2
 8004c1c:	e04b      	b.n	8004cb6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d00c      	beq.n	8004c3e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004c24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004c28:	6879      	ldr	r1, [r7, #4]
 8004c2a:	69b8      	ldr	r0, [r7, #24]
 8004c2c:	f7ff fef8 	bl	8004a20 <put_fat>
 8004c30:	4603      	mov	r3, r0
 8004c32:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004c34:	7ffb      	ldrb	r3, [r7, #31]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d001      	beq.n	8004c3e <remove_chain+0x4a>
 8004c3a:	7ffb      	ldrb	r3, [r7, #31]
 8004c3c:	e03b      	b.n	8004cb6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004c3e:	68b9      	ldr	r1, [r7, #8]
 8004c40:	68f8      	ldr	r0, [r7, #12]
 8004c42:	f7ff fe46 	bl	80048d2 <get_fat>
 8004c46:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d031      	beq.n	8004cb2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d101      	bne.n	8004c58 <remove_chain+0x64>
 8004c54:	2302      	movs	r3, #2
 8004c56:	e02e      	b.n	8004cb6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c5e:	d101      	bne.n	8004c64 <remove_chain+0x70>
 8004c60:	2301      	movs	r3, #1
 8004c62:	e028      	b.n	8004cb6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004c64:	2200      	movs	r2, #0
 8004c66:	68b9      	ldr	r1, [r7, #8]
 8004c68:	69b8      	ldr	r0, [r7, #24]
 8004c6a:	f7ff fed9 	bl	8004a20 <put_fat>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004c72:	7ffb      	ldrb	r3, [r7, #31]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d001      	beq.n	8004c7c <remove_chain+0x88>
 8004c78:	7ffb      	ldrb	r3, [r7, #31]
 8004c7a:	e01c      	b.n	8004cb6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	691a      	ldr	r2, [r3, #16]
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	695b      	ldr	r3, [r3, #20]
 8004c84:	3b02      	subs	r3, #2
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d20b      	bcs.n	8004ca2 <remove_chain+0xae>
			fs->free_clst++;
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	1c5a      	adds	r2, r3, #1
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	791b      	ldrb	r3, [r3, #4]
 8004c98:	f043 0301 	orr.w	r3, r3, #1
 8004c9c:	b2da      	uxtb	r2, r3
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	68ba      	ldr	r2, [r7, #8]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d3c6      	bcc.n	8004c3e <remove_chain+0x4a>
 8004cb0:	e000      	b.n	8004cb4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004cb2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3720      	adds	r7, #32
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}

08004cbe <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004cbe:	b580      	push	{r7, lr}
 8004cc0:	b088      	sub	sp, #32
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
 8004cc6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d10d      	bne.n	8004cf0 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d004      	beq.n	8004cea <create_chain+0x2c>
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	695b      	ldr	r3, [r3, #20]
 8004ce4:	69ba      	ldr	r2, [r7, #24]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d31b      	bcc.n	8004d22 <create_chain+0x64>
 8004cea:	2301      	movs	r3, #1
 8004cec:	61bb      	str	r3, [r7, #24]
 8004cee:	e018      	b.n	8004d22 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004cf0:	6839      	ldr	r1, [r7, #0]
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f7ff fded 	bl	80048d2 <get_fat>
 8004cf8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d801      	bhi.n	8004d04 <create_chain+0x46>
 8004d00:	2301      	movs	r3, #1
 8004d02:	e070      	b.n	8004de6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d0a:	d101      	bne.n	8004d10 <create_chain+0x52>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	e06a      	b.n	8004de6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	695b      	ldr	r3, [r3, #20]
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d201      	bcs.n	8004d1e <create_chain+0x60>
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	e063      	b.n	8004de6 <create_chain+0x128>
		scl = clst;
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	3301      	adds	r3, #1
 8004d2a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	695b      	ldr	r3, [r3, #20]
 8004d30:	69fa      	ldr	r2, [r7, #28]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d307      	bcc.n	8004d46 <create_chain+0x88>
				ncl = 2;
 8004d36:	2302      	movs	r3, #2
 8004d38:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004d3a:	69fa      	ldr	r2, [r7, #28]
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d901      	bls.n	8004d46 <create_chain+0x88>
 8004d42:	2300      	movs	r3, #0
 8004d44:	e04f      	b.n	8004de6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004d46:	69f9      	ldr	r1, [r7, #28]
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f7ff fdc2 	bl	80048d2 <get_fat>
 8004d4e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00e      	beq.n	8004d74 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d003      	beq.n	8004d64 <create_chain+0xa6>
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d62:	d101      	bne.n	8004d68 <create_chain+0xaa>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	e03e      	b.n	8004de6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004d68:	69fa      	ldr	r2, [r7, #28]
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d1da      	bne.n	8004d26 <create_chain+0x68>
 8004d70:	2300      	movs	r3, #0
 8004d72:	e038      	b.n	8004de6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004d74:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004d76:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004d7a:	69f9      	ldr	r1, [r7, #28]
 8004d7c:	6938      	ldr	r0, [r7, #16]
 8004d7e:	f7ff fe4f 	bl	8004a20 <put_fat>
 8004d82:	4603      	mov	r3, r0
 8004d84:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004d86:	7dfb      	ldrb	r3, [r7, #23]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d109      	bne.n	8004da0 <create_chain+0xe2>
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d006      	beq.n	8004da0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004d92:	69fa      	ldr	r2, [r7, #28]
 8004d94:	6839      	ldr	r1, [r7, #0]
 8004d96:	6938      	ldr	r0, [r7, #16]
 8004d98:	f7ff fe42 	bl	8004a20 <put_fat>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004da0:	7dfb      	ldrb	r3, [r7, #23]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d116      	bne.n	8004dd4 <create_chain+0x116>
		fs->last_clst = ncl;
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	69fa      	ldr	r2, [r7, #28]
 8004daa:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	691a      	ldr	r2, [r3, #16]
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	695b      	ldr	r3, [r3, #20]
 8004db4:	3b02      	subs	r3, #2
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d804      	bhi.n	8004dc4 <create_chain+0x106>
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	1e5a      	subs	r2, r3, #1
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	791b      	ldrb	r3, [r3, #4]
 8004dc8:	f043 0301 	orr.w	r3, r3, #1
 8004dcc:	b2da      	uxtb	r2, r3
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	711a      	strb	r2, [r3, #4]
 8004dd2:	e007      	b.n	8004de4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004dd4:	7dfb      	ldrb	r3, [r7, #23]
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d102      	bne.n	8004de0 <create_chain+0x122>
 8004dda:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004dde:	e000      	b.n	8004de2 <create_chain+0x124>
 8004de0:	2301      	movs	r3, #1
 8004de2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004de4:	69fb      	ldr	r3, [r7, #28]
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3720      	adds	r7, #32
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}

08004dee <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004dee:	b480      	push	{r7}
 8004df0:	b087      	sub	sp, #28
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
 8004df6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e02:	3304      	adds	r3, #4
 8004e04:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	0a5b      	lsrs	r3, r3, #9
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	8952      	ldrh	r2, [r2, #10]
 8004e0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e12:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	1d1a      	adds	r2, r3, #4
 8004e18:	613a      	str	r2, [r7, #16]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d101      	bne.n	8004e28 <clmt_clust+0x3a>
 8004e24:	2300      	movs	r3, #0
 8004e26:	e010      	b.n	8004e4a <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8004e28:	697a      	ldr	r2, [r7, #20]
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d307      	bcc.n	8004e40 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8004e30:	697a      	ldr	r2, [r7, #20]
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	617b      	str	r3, [r7, #20]
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	3304      	adds	r3, #4
 8004e3c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004e3e:	e7e9      	b.n	8004e14 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8004e40:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	4413      	add	r3, r2
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	371c      	adds	r7, #28
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr

08004e56 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b086      	sub	sp, #24
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
 8004e5e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004e6c:	d204      	bcs.n	8004e78 <dir_sdi+0x22>
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	f003 031f 	and.w	r3, r3, #31
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d001      	beq.n	8004e7c <dir_sdi+0x26>
		return FR_INT_ERR;
 8004e78:	2302      	movs	r3, #2
 8004e7a:	e063      	b.n	8004f44 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	683a      	ldr	r2, [r7, #0]
 8004e80:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d106      	bne.n	8004e9c <dir_sdi+0x46>
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d902      	bls.n	8004e9c <dir_sdi+0x46>
		clst = fs->dirbase;
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e9a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d10c      	bne.n	8004ebc <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	095b      	lsrs	r3, r3, #5
 8004ea6:	693a      	ldr	r2, [r7, #16]
 8004ea8:	8912      	ldrh	r2, [r2, #8]
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d301      	bcc.n	8004eb2 <dir_sdi+0x5c>
 8004eae:	2302      	movs	r3, #2
 8004eb0:	e048      	b.n	8004f44 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	61da      	str	r2, [r3, #28]
 8004eba:	e029      	b.n	8004f10 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	895b      	ldrh	r3, [r3, #10]
 8004ec0:	025b      	lsls	r3, r3, #9
 8004ec2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004ec4:	e019      	b.n	8004efa <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6979      	ldr	r1, [r7, #20]
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7ff fd01 	bl	80048d2 <get_fat>
 8004ed0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ed8:	d101      	bne.n	8004ede <dir_sdi+0x88>
 8004eda:	2301      	movs	r3, #1
 8004edc:	e032      	b.n	8004f44 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d904      	bls.n	8004eee <dir_sdi+0x98>
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	695b      	ldr	r3, [r3, #20]
 8004ee8:	697a      	ldr	r2, [r7, #20]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d301      	bcc.n	8004ef2 <dir_sdi+0x9c>
 8004eee:	2302      	movs	r3, #2
 8004ef0:	e028      	b.n	8004f44 <dir_sdi+0xee>
			ofs -= csz;
 8004ef2:	683a      	ldr	r2, [r7, #0]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004efa:	683a      	ldr	r2, [r7, #0]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d2e1      	bcs.n	8004ec6 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8004f02:	6979      	ldr	r1, [r7, #20]
 8004f04:	6938      	ldr	r0, [r7, #16]
 8004f06:	f7ff fcc5 	bl	8004894 <clust2sect>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	697a      	ldr	r2, [r7, #20]
 8004f14:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	69db      	ldr	r3, [r3, #28]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d101      	bne.n	8004f22 <dir_sdi+0xcc>
 8004f1e:	2302      	movs	r3, #2
 8004f20:	e010      	b.n	8004f44 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	69da      	ldr	r2, [r3, #28]
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	0a5b      	lsrs	r3, r3, #9
 8004f2a:	441a      	add	r2, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f3c:	441a      	add	r2, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3718      	adds	r7, #24
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b086      	sub	sp, #24
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	695b      	ldr	r3, [r3, #20]
 8004f60:	3320      	adds	r3, #32
 8004f62:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	69db      	ldr	r3, [r3, #28]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d003      	beq.n	8004f74 <dir_next+0x28>
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f72:	d301      	bcc.n	8004f78 <dir_next+0x2c>
 8004f74:	2304      	movs	r3, #4
 8004f76:	e0aa      	b.n	80050ce <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	f040 8098 	bne.w	80050b4 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	69db      	ldr	r3, [r3, #28]
 8004f88:	1c5a      	adds	r2, r3, #1
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	699b      	ldr	r3, [r3, #24]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d10b      	bne.n	8004fae <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	095b      	lsrs	r3, r3, #5
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	8912      	ldrh	r2, [r2, #8]
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	f0c0 8088 	bcc.w	80050b4 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	61da      	str	r2, [r3, #28]
 8004faa:	2304      	movs	r3, #4
 8004fac:	e08f      	b.n	80050ce <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	0a5b      	lsrs	r3, r3, #9
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	8952      	ldrh	r2, [r2, #10]
 8004fb6:	3a01      	subs	r2, #1
 8004fb8:	4013      	ands	r3, r2
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d17a      	bne.n	80050b4 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	4610      	mov	r0, r2
 8004fc8:	f7ff fc83 	bl	80048d2 <get_fat>
 8004fcc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d801      	bhi.n	8004fd8 <dir_next+0x8c>
 8004fd4:	2302      	movs	r3, #2
 8004fd6:	e07a      	b.n	80050ce <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004fde:	d101      	bne.n	8004fe4 <dir_next+0x98>
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e074      	b.n	80050ce <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	695b      	ldr	r3, [r3, #20]
 8004fe8:	697a      	ldr	r2, [r7, #20]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d358      	bcc.n	80050a0 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d104      	bne.n	8004ffe <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	61da      	str	r2, [r3, #28]
 8004ffa:	2304      	movs	r3, #4
 8004ffc:	e067      	b.n	80050ce <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	4619      	mov	r1, r3
 8005006:	4610      	mov	r0, r2
 8005008:	f7ff fe59 	bl	8004cbe <create_chain>
 800500c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d101      	bne.n	8005018 <dir_next+0xcc>
 8005014:	2307      	movs	r3, #7
 8005016:	e05a      	b.n	80050ce <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	2b01      	cmp	r3, #1
 800501c:	d101      	bne.n	8005022 <dir_next+0xd6>
 800501e:	2302      	movs	r3, #2
 8005020:	e055      	b.n	80050ce <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005028:	d101      	bne.n	800502e <dir_next+0xe2>
 800502a:	2301      	movs	r3, #1
 800502c:	e04f      	b.n	80050ce <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	f7ff fb50 	bl	80046d4 <sync_window>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d001      	beq.n	800503e <dir_next+0xf2>
 800503a:	2301      	movs	r3, #1
 800503c:	e047      	b.n	80050ce <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	3330      	adds	r3, #48	@ 0x30
 8005042:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005046:	2100      	movs	r1, #0
 8005048:	4618      	mov	r0, r3
 800504a:	f7ff f97a 	bl	8004342 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800504e:	2300      	movs	r3, #0
 8005050:	613b      	str	r3, [r7, #16]
 8005052:	6979      	ldr	r1, [r7, #20]
 8005054:	68f8      	ldr	r0, [r7, #12]
 8005056:	f7ff fc1d 	bl	8004894 <clust2sect>
 800505a:	4602      	mov	r2, r0
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005060:	e012      	b.n	8005088 <dir_next+0x13c>
						fs->wflag = 1;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2201      	movs	r2, #1
 8005066:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005068:	68f8      	ldr	r0, [r7, #12]
 800506a:	f7ff fb33 	bl	80046d4 <sync_window>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d001      	beq.n	8005078 <dir_next+0x12c>
 8005074:	2301      	movs	r3, #1
 8005076:	e02a      	b.n	80050ce <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	3301      	adds	r3, #1
 800507c:	613b      	str	r3, [r7, #16]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005082:	1c5a      	adds	r2, r3, #1
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	895b      	ldrh	r3, [r3, #10]
 800508c:	461a      	mov	r2, r3
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	4293      	cmp	r3, r2
 8005092:	d3e6      	bcc.n	8005062 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	1ad2      	subs	r2, r2, r3
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	697a      	ldr	r2, [r7, #20]
 80050a4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80050a6:	6979      	ldr	r1, [r7, #20]
 80050a8:	68f8      	ldr	r0, [r7, #12]
 80050aa:	f7ff fbf3 	bl	8004894 <clust2sect>
 80050ae:	4602      	mov	r2, r0
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	68ba      	ldr	r2, [r7, #8]
 80050b8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050c6:	441a      	add	r2, r3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3718      	adds	r7, #24
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80050d6:	b580      	push	{r7, lr}
 80050d8:	b086      	sub	sp, #24
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
 80050de:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80050e6:	2100      	movs	r1, #0
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f7ff feb4 	bl	8004e56 <dir_sdi>
 80050ee:	4603      	mov	r3, r0
 80050f0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80050f2:	7dfb      	ldrb	r3, [r7, #23]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d12b      	bne.n	8005150 <dir_alloc+0x7a>
		n = 0;
 80050f8:	2300      	movs	r3, #0
 80050fa:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	69db      	ldr	r3, [r3, #28]
 8005100:	4619      	mov	r1, r3
 8005102:	68f8      	ldr	r0, [r7, #12]
 8005104:	f7ff fb2a 	bl	800475c <move_window>
 8005108:	4603      	mov	r3, r0
 800510a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800510c:	7dfb      	ldrb	r3, [r7, #23]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d11d      	bne.n	800514e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a1b      	ldr	r3, [r3, #32]
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	2be5      	cmp	r3, #229	@ 0xe5
 800511a:	d004      	beq.n	8005126 <dir_alloc+0x50>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a1b      	ldr	r3, [r3, #32]
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d107      	bne.n	8005136 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	3301      	adds	r3, #1
 800512a:	613b      	str	r3, [r7, #16]
 800512c:	693a      	ldr	r2, [r7, #16]
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	429a      	cmp	r2, r3
 8005132:	d102      	bne.n	800513a <dir_alloc+0x64>
 8005134:	e00c      	b.n	8005150 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005136:	2300      	movs	r3, #0
 8005138:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800513a:	2101      	movs	r1, #1
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f7ff ff05 	bl	8004f4c <dir_next>
 8005142:	4603      	mov	r3, r0
 8005144:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005146:	7dfb      	ldrb	r3, [r7, #23]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d0d7      	beq.n	80050fc <dir_alloc+0x26>
 800514c:	e000      	b.n	8005150 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800514e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005150:	7dfb      	ldrb	r3, [r7, #23]
 8005152:	2b04      	cmp	r3, #4
 8005154:	d101      	bne.n	800515a <dir_alloc+0x84>
 8005156:	2307      	movs	r3, #7
 8005158:	75fb      	strb	r3, [r7, #23]
	return res;
 800515a:	7dfb      	ldrb	r3, [r7, #23]
}
 800515c:	4618      	mov	r0, r3
 800515e:	3718      	adds	r7, #24
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	331a      	adds	r3, #26
 8005172:	4618      	mov	r0, r3
 8005174:	f7ff f842 	bl	80041fc <ld_word>
 8005178:	4603      	mov	r3, r0
 800517a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	2b03      	cmp	r3, #3
 8005182:	d109      	bne.n	8005198 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	3314      	adds	r3, #20
 8005188:	4618      	mov	r0, r3
 800518a:	f7ff f837 	bl	80041fc <ld_word>
 800518e:	4603      	mov	r3, r0
 8005190:	041b      	lsls	r3, r3, #16
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	4313      	orrs	r3, r2
 8005196:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005198:	68fb      	ldr	r3, [r7, #12]
}
 800519a:	4618      	mov	r0, r3
 800519c:	3710      	adds	r7, #16
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}

080051a2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80051a2:	b580      	push	{r7, lr}
 80051a4:	b084      	sub	sp, #16
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	60f8      	str	r0, [r7, #12]
 80051aa:	60b9      	str	r1, [r7, #8]
 80051ac:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	331a      	adds	r3, #26
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	b292      	uxth	r2, r2
 80051b6:	4611      	mov	r1, r2
 80051b8:	4618      	mov	r0, r3
 80051ba:	f7ff f85a 	bl	8004272 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	2b03      	cmp	r3, #3
 80051c4:	d109      	bne.n	80051da <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	f103 0214 	add.w	r2, r3, #20
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	0c1b      	lsrs	r3, r3, #16
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	4619      	mov	r1, r3
 80051d4:	4610      	mov	r0, r2
 80051d6:	f7ff f84c 	bl	8004272 <st_word>
	}
}
 80051da:	bf00      	nop
 80051dc:	3710      	adds	r7, #16
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}

080051e2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80051e2:	b580      	push	{r7, lr}
 80051e4:	b086      	sub	sp, #24
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80051f0:	2100      	movs	r1, #0
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f7ff fe2f 	bl	8004e56 <dir_sdi>
 80051f8:	4603      	mov	r3, r0
 80051fa:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80051fc:	7dfb      	ldrb	r3, [r7, #23]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d001      	beq.n	8005206 <dir_find+0x24>
 8005202:	7dfb      	ldrb	r3, [r7, #23]
 8005204:	e03e      	b.n	8005284 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	69db      	ldr	r3, [r3, #28]
 800520a:	4619      	mov	r1, r3
 800520c:	6938      	ldr	r0, [r7, #16]
 800520e:	f7ff faa5 	bl	800475c <move_window>
 8005212:	4603      	mov	r3, r0
 8005214:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005216:	7dfb      	ldrb	r3, [r7, #23]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d12f      	bne.n	800527c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a1b      	ldr	r3, [r3, #32]
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005224:	7bfb      	ldrb	r3, [r7, #15]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d102      	bne.n	8005230 <dir_find+0x4e>
 800522a:	2304      	movs	r3, #4
 800522c:	75fb      	strb	r3, [r7, #23]
 800522e:	e028      	b.n	8005282 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a1b      	ldr	r3, [r3, #32]
 8005234:	330b      	adds	r3, #11
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800523c:	b2da      	uxtb	r2, r3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	330b      	adds	r3, #11
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	f003 0308 	and.w	r3, r3, #8
 800524e:	2b00      	cmp	r3, #0
 8005250:	d10a      	bne.n	8005268 <dir_find+0x86>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a18      	ldr	r0, [r3, #32]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	3324      	adds	r3, #36	@ 0x24
 800525a:	220b      	movs	r2, #11
 800525c:	4619      	mov	r1, r3
 800525e:	f7ff f88b 	bl	8004378 <mem_cmp>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d00b      	beq.n	8005280 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005268:	2100      	movs	r1, #0
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f7ff fe6e 	bl	8004f4c <dir_next>
 8005270:	4603      	mov	r3, r0
 8005272:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005274:	7dfb      	ldrb	r3, [r7, #23]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d0c5      	beq.n	8005206 <dir_find+0x24>
 800527a:	e002      	b.n	8005282 <dir_find+0xa0>
		if (res != FR_OK) break;
 800527c:	bf00      	nop
 800527e:	e000      	b.n	8005282 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005280:	bf00      	nop

	return res;
 8005282:	7dfb      	ldrb	r3, [r7, #23]
}
 8005284:	4618      	mov	r0, r3
 8005286:	3718      	adds	r7, #24
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800529a:	2101      	movs	r1, #1
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f7ff ff1a 	bl	80050d6 <dir_alloc>
 80052a2:	4603      	mov	r3, r0
 80052a4:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80052a6:	7bfb      	ldrb	r3, [r7, #15]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d11c      	bne.n	80052e6 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	69db      	ldr	r3, [r3, #28]
 80052b0:	4619      	mov	r1, r3
 80052b2:	68b8      	ldr	r0, [r7, #8]
 80052b4:	f7ff fa52 	bl	800475c <move_window>
 80052b8:	4603      	mov	r3, r0
 80052ba:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80052bc:	7bfb      	ldrb	r3, [r7, #15]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d111      	bne.n	80052e6 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a1b      	ldr	r3, [r3, #32]
 80052c6:	2220      	movs	r2, #32
 80052c8:	2100      	movs	r1, #0
 80052ca:	4618      	mov	r0, r3
 80052cc:	f7ff f839 	bl	8004342 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6a18      	ldr	r0, [r3, #32]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	3324      	adds	r3, #36	@ 0x24
 80052d8:	220b      	movs	r2, #11
 80052da:	4619      	mov	r1, r3
 80052dc:	f7ff f810 	bl	8004300 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	2201      	movs	r2, #1
 80052e4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80052e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3710      	adds	r7, #16
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b088      	sub	sp, #32
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	60fb      	str	r3, [r7, #12]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	3324      	adds	r3, #36	@ 0x24
 8005304:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8005306:	220b      	movs	r2, #11
 8005308:	2120      	movs	r1, #32
 800530a:	68b8      	ldr	r0, [r7, #8]
 800530c:	f7ff f819 	bl	8004342 <mem_set>
	si = i = 0; ni = 8;
 8005310:	2300      	movs	r3, #0
 8005312:	613b      	str	r3, [r7, #16]
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	61fb      	str	r3, [r7, #28]
 8005318:	2308      	movs	r3, #8
 800531a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	1c5a      	adds	r2, r3, #1
 8005320:	61fa      	str	r2, [r7, #28]
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	4413      	add	r3, r2
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800532a:	7efb      	ldrb	r3, [r7, #27]
 800532c:	2b20      	cmp	r3, #32
 800532e:	d94e      	bls.n	80053ce <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8005330:	7efb      	ldrb	r3, [r7, #27]
 8005332:	2b2f      	cmp	r3, #47	@ 0x2f
 8005334:	d006      	beq.n	8005344 <create_name+0x54>
 8005336:	7efb      	ldrb	r3, [r7, #27]
 8005338:	2b5c      	cmp	r3, #92	@ 0x5c
 800533a:	d110      	bne.n	800535e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800533c:	e002      	b.n	8005344 <create_name+0x54>
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	3301      	adds	r3, #1
 8005342:	61fb      	str	r3, [r7, #28]
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	4413      	add	r3, r2
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	2b2f      	cmp	r3, #47	@ 0x2f
 800534e:	d0f6      	beq.n	800533e <create_name+0x4e>
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	4413      	add	r3, r2
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	2b5c      	cmp	r3, #92	@ 0x5c
 800535a:	d0f0      	beq.n	800533e <create_name+0x4e>
			break;
 800535c:	e038      	b.n	80053d0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800535e:	7efb      	ldrb	r3, [r7, #27]
 8005360:	2b2e      	cmp	r3, #46	@ 0x2e
 8005362:	d003      	beq.n	800536c <create_name+0x7c>
 8005364:	693a      	ldr	r2, [r7, #16]
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	429a      	cmp	r2, r3
 800536a:	d30c      	bcc.n	8005386 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	2b0b      	cmp	r3, #11
 8005370:	d002      	beq.n	8005378 <create_name+0x88>
 8005372:	7efb      	ldrb	r3, [r7, #27]
 8005374:	2b2e      	cmp	r3, #46	@ 0x2e
 8005376:	d001      	beq.n	800537c <create_name+0x8c>
 8005378:	2306      	movs	r3, #6
 800537a:	e044      	b.n	8005406 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800537c:	2308      	movs	r3, #8
 800537e:	613b      	str	r3, [r7, #16]
 8005380:	230b      	movs	r3, #11
 8005382:	617b      	str	r3, [r7, #20]
			continue;
 8005384:	e022      	b.n	80053cc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8005386:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800538a:	2b00      	cmp	r3, #0
 800538c:	da04      	bge.n	8005398 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800538e:	7efb      	ldrb	r3, [r7, #27]
 8005390:	3b80      	subs	r3, #128	@ 0x80
 8005392:	4a1f      	ldr	r2, [pc, #124]	@ (8005410 <create_name+0x120>)
 8005394:	5cd3      	ldrb	r3, [r2, r3]
 8005396:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8005398:	7efb      	ldrb	r3, [r7, #27]
 800539a:	4619      	mov	r1, r3
 800539c:	481d      	ldr	r0, [pc, #116]	@ (8005414 <create_name+0x124>)
 800539e:	f7ff f812 	bl	80043c6 <chk_chr>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d001      	beq.n	80053ac <create_name+0xbc>
 80053a8:	2306      	movs	r3, #6
 80053aa:	e02c      	b.n	8005406 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80053ac:	7efb      	ldrb	r3, [r7, #27]
 80053ae:	2b60      	cmp	r3, #96	@ 0x60
 80053b0:	d905      	bls.n	80053be <create_name+0xce>
 80053b2:	7efb      	ldrb	r3, [r7, #27]
 80053b4:	2b7a      	cmp	r3, #122	@ 0x7a
 80053b6:	d802      	bhi.n	80053be <create_name+0xce>
 80053b8:	7efb      	ldrb	r3, [r7, #27]
 80053ba:	3b20      	subs	r3, #32
 80053bc:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	1c5a      	adds	r2, r3, #1
 80053c2:	613a      	str	r2, [r7, #16]
 80053c4:	68ba      	ldr	r2, [r7, #8]
 80053c6:	4413      	add	r3, r2
 80053c8:	7efa      	ldrb	r2, [r7, #27]
 80053ca:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80053cc:	e7a6      	b.n	800531c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80053ce:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	441a      	add	r2, r3
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d101      	bne.n	80053e4 <create_name+0xf4>
 80053e0:	2306      	movs	r3, #6
 80053e2:	e010      	b.n	8005406 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	2be5      	cmp	r3, #229	@ 0xe5
 80053ea:	d102      	bne.n	80053f2 <create_name+0x102>
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	2205      	movs	r2, #5
 80053f0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80053f2:	7efb      	ldrb	r3, [r7, #27]
 80053f4:	2b20      	cmp	r3, #32
 80053f6:	d801      	bhi.n	80053fc <create_name+0x10c>
 80053f8:	2204      	movs	r2, #4
 80053fa:	e000      	b.n	80053fe <create_name+0x10e>
 80053fc:	2200      	movs	r2, #0
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	330b      	adds	r3, #11
 8005402:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005404:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8005406:	4618      	mov	r0, r3
 8005408:	3720      	adds	r7, #32
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	080070e8 	.word	0x080070e8
 8005414:	0800708c 	.word	0x0800708c

08005418 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b086      	sub	sp, #24
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800542c:	e002      	b.n	8005434 <follow_path+0x1c>
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	3301      	adds	r3, #1
 8005432:	603b      	str	r3, [r7, #0]
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	2b2f      	cmp	r3, #47	@ 0x2f
 800543a:	d0f8      	beq.n	800542e <follow_path+0x16>
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	2b5c      	cmp	r3, #92	@ 0x5c
 8005442:	d0f4      	beq.n	800542e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	2200      	movs	r2, #0
 8005448:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	2b1f      	cmp	r3, #31
 8005450:	d80a      	bhi.n	8005468 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2280      	movs	r2, #128	@ 0x80
 8005456:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800545a:	2100      	movs	r1, #0
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f7ff fcfa 	bl	8004e56 <dir_sdi>
 8005462:	4603      	mov	r3, r0
 8005464:	75fb      	strb	r3, [r7, #23]
 8005466:	e043      	b.n	80054f0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005468:	463b      	mov	r3, r7
 800546a:	4619      	mov	r1, r3
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f7ff ff3f 	bl	80052f0 <create_name>
 8005472:	4603      	mov	r3, r0
 8005474:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005476:	7dfb      	ldrb	r3, [r7, #23]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d134      	bne.n	80054e6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f7ff feb0 	bl	80051e2 <dir_find>
 8005482:	4603      	mov	r3, r0
 8005484:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800548c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800548e:	7dfb      	ldrb	r3, [r7, #23]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d00a      	beq.n	80054aa <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005494:	7dfb      	ldrb	r3, [r7, #23]
 8005496:	2b04      	cmp	r3, #4
 8005498:	d127      	bne.n	80054ea <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800549a:	7afb      	ldrb	r3, [r7, #11]
 800549c:	f003 0304 	and.w	r3, r3, #4
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d122      	bne.n	80054ea <follow_path+0xd2>
 80054a4:	2305      	movs	r3, #5
 80054a6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80054a8:	e01f      	b.n	80054ea <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80054aa:	7afb      	ldrb	r3, [r7, #11]
 80054ac:	f003 0304 	and.w	r3, r3, #4
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d11c      	bne.n	80054ee <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	799b      	ldrb	r3, [r3, #6]
 80054b8:	f003 0310 	and.w	r3, r3, #16
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d102      	bne.n	80054c6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80054c0:	2305      	movs	r3, #5
 80054c2:	75fb      	strb	r3, [r7, #23]
 80054c4:	e014      	b.n	80054f0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	695b      	ldr	r3, [r3, #20]
 80054d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054d4:	4413      	add	r3, r2
 80054d6:	4619      	mov	r1, r3
 80054d8:	68f8      	ldr	r0, [r7, #12]
 80054da:	f7ff fe43 	bl	8005164 <ld_clust>
 80054de:	4602      	mov	r2, r0
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80054e4:	e7c0      	b.n	8005468 <follow_path+0x50>
			if (res != FR_OK) break;
 80054e6:	bf00      	nop
 80054e8:	e002      	b.n	80054f0 <follow_path+0xd8>
				break;
 80054ea:	bf00      	nop
 80054ec:	e000      	b.n	80054f0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80054ee:	bf00      	nop
			}
		}
	}

	return res;
 80054f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3718      	adds	r7, #24
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}

080054fa <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80054fa:	b480      	push	{r7}
 80054fc:	b087      	sub	sp, #28
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005502:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005506:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d031      	beq.n	8005574 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	617b      	str	r3, [r7, #20]
 8005516:	e002      	b.n	800551e <get_ldnumber+0x24>
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	3301      	adds	r3, #1
 800551c:	617b      	str	r3, [r7, #20]
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	2b20      	cmp	r3, #32
 8005524:	d903      	bls.n	800552e <get_ldnumber+0x34>
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	2b3a      	cmp	r3, #58	@ 0x3a
 800552c:	d1f4      	bne.n	8005518 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	2b3a      	cmp	r3, #58	@ 0x3a
 8005534:	d11c      	bne.n	8005570 <get_ldnumber+0x76>
			tp = *path;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	1c5a      	adds	r2, r3, #1
 8005540:	60fa      	str	r2, [r7, #12]
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	3b30      	subs	r3, #48	@ 0x30
 8005546:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	2b09      	cmp	r3, #9
 800554c:	d80e      	bhi.n	800556c <get_ldnumber+0x72>
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	429a      	cmp	r2, r3
 8005554:	d10a      	bne.n	800556c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d107      	bne.n	800556c <get_ldnumber+0x72>
					vol = (int)i;
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	3301      	adds	r3, #1
 8005564:	617b      	str	r3, [r7, #20]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	697a      	ldr	r2, [r7, #20]
 800556a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	e002      	b.n	8005576 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005570:	2300      	movs	r3, #0
 8005572:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005574:	693b      	ldr	r3, [r7, #16]
}
 8005576:	4618      	mov	r0, r3
 8005578:	371c      	adds	r7, #28
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
	...

08005584 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b082      	sub	sp, #8
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	70da      	strb	r2, [r3, #3]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800559a:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800559c:	6839      	ldr	r1, [r7, #0]
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f7ff f8dc 	bl	800475c <move_window>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d001      	beq.n	80055ae <check_fs+0x2a>
 80055aa:	2304      	movs	r3, #4
 80055ac:	e038      	b.n	8005620 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	3330      	adds	r3, #48	@ 0x30
 80055b2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80055b6:	4618      	mov	r0, r3
 80055b8:	f7fe fe20 	bl	80041fc <ld_word>
 80055bc:	4603      	mov	r3, r0
 80055be:	461a      	mov	r2, r3
 80055c0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d001      	beq.n	80055cc <check_fs+0x48>
 80055c8:	2303      	movs	r3, #3
 80055ca:	e029      	b.n	8005620 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80055d2:	2be9      	cmp	r3, #233	@ 0xe9
 80055d4:	d009      	beq.n	80055ea <check_fs+0x66>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80055dc:	2beb      	cmp	r3, #235	@ 0xeb
 80055de:	d11e      	bne.n	800561e <check_fs+0x9a>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80055e6:	2b90      	cmp	r3, #144	@ 0x90
 80055e8:	d119      	bne.n	800561e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	3330      	adds	r3, #48	@ 0x30
 80055ee:	3336      	adds	r3, #54	@ 0x36
 80055f0:	4618      	mov	r0, r3
 80055f2:	f7fe fe1b 	bl	800422c <ld_dword>
 80055f6:	4603      	mov	r3, r0
 80055f8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80055fc:	4a0a      	ldr	r2, [pc, #40]	@ (8005628 <check_fs+0xa4>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d101      	bne.n	8005606 <check_fs+0x82>
 8005602:	2300      	movs	r3, #0
 8005604:	e00c      	b.n	8005620 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	3330      	adds	r3, #48	@ 0x30
 800560a:	3352      	adds	r3, #82	@ 0x52
 800560c:	4618      	mov	r0, r3
 800560e:	f7fe fe0d 	bl	800422c <ld_dword>
 8005612:	4603      	mov	r3, r0
 8005614:	4a05      	ldr	r2, [pc, #20]	@ (800562c <check_fs+0xa8>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d101      	bne.n	800561e <check_fs+0x9a>
 800561a:	2300      	movs	r3, #0
 800561c:	e000      	b.n	8005620 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800561e:	2302      	movs	r3, #2
}
 8005620:	4618      	mov	r0, r3
 8005622:	3708      	adds	r7, #8
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}
 8005628:	00544146 	.word	0x00544146
 800562c:	33544146 	.word	0x33544146

08005630 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b096      	sub	sp, #88	@ 0x58
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	4613      	mov	r3, r2
 800563c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	2200      	movs	r2, #0
 8005642:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f7ff ff58 	bl	80054fa <get_ldnumber>
 800564a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800564c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800564e:	2b00      	cmp	r3, #0
 8005650:	da01      	bge.n	8005656 <find_volume+0x26>
 8005652:	230b      	movs	r3, #11
 8005654:	e22d      	b.n	8005ab2 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005656:	4aa1      	ldr	r2, [pc, #644]	@ (80058dc <find_volume+0x2ac>)
 8005658:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800565a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800565e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005662:	2b00      	cmp	r3, #0
 8005664:	d101      	bne.n	800566a <find_volume+0x3a>
 8005666:	230c      	movs	r3, #12
 8005668:	e223      	b.n	8005ab2 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800566e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005670:	79fb      	ldrb	r3, [r7, #7]
 8005672:	f023 0301 	bic.w	r3, r3, #1
 8005676:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d01a      	beq.n	80056b6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005682:	785b      	ldrb	r3, [r3, #1]
 8005684:	4618      	mov	r0, r3
 8005686:	f7fe fd19 	bl	80040bc <disk_status>
 800568a:	4603      	mov	r3, r0
 800568c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005690:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005694:	f003 0301 	and.w	r3, r3, #1
 8005698:	2b00      	cmp	r3, #0
 800569a:	d10c      	bne.n	80056b6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800569c:	79fb      	ldrb	r3, [r7, #7]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d007      	beq.n	80056b2 <find_volume+0x82>
 80056a2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80056a6:	f003 0304 	and.w	r3, r3, #4
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d001      	beq.n	80056b2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80056ae:	230a      	movs	r3, #10
 80056b0:	e1ff      	b.n	8005ab2 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80056b2:	2300      	movs	r3, #0
 80056b4:	e1fd      	b.n	8005ab2 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80056b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056b8:	2200      	movs	r2, #0
 80056ba:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80056bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056be:	b2da      	uxtb	r2, r3
 80056c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056c2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80056c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056c6:	785b      	ldrb	r3, [r3, #1]
 80056c8:	4618      	mov	r0, r3
 80056ca:	f7fe fd11 	bl	80040f0 <disk_initialize>
 80056ce:	4603      	mov	r3, r0
 80056d0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80056d4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80056d8:	f003 0301 	and.w	r3, r3, #1
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d001      	beq.n	80056e4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80056e0:	2303      	movs	r3, #3
 80056e2:	e1e6      	b.n	8005ab2 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80056e4:	79fb      	ldrb	r3, [r7, #7]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d007      	beq.n	80056fa <find_volume+0xca>
 80056ea:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80056ee:	f003 0304 	and.w	r3, r3, #4
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d001      	beq.n	80056fa <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80056f6:	230a      	movs	r3, #10
 80056f8:	e1db      	b.n	8005ab2 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80056fa:	2300      	movs	r3, #0
 80056fc:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80056fe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005700:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005702:	f7ff ff3f 	bl	8005584 <check_fs>
 8005706:	4603      	mov	r3, r0
 8005708:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800570c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005710:	2b02      	cmp	r3, #2
 8005712:	d149      	bne.n	80057a8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005714:	2300      	movs	r3, #0
 8005716:	643b      	str	r3, [r7, #64]	@ 0x40
 8005718:	e01e      	b.n	8005758 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800571a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800571c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005720:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005722:	011b      	lsls	r3, r3, #4
 8005724:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8005728:	4413      	add	r3, r2
 800572a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800572c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800572e:	3304      	adds	r3, #4
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d006      	beq.n	8005744 <find_volume+0x114>
 8005736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005738:	3308      	adds	r3, #8
 800573a:	4618      	mov	r0, r3
 800573c:	f7fe fd76 	bl	800422c <ld_dword>
 8005740:	4602      	mov	r2, r0
 8005742:	e000      	b.n	8005746 <find_volume+0x116>
 8005744:	2200      	movs	r2, #0
 8005746:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	3358      	adds	r3, #88	@ 0x58
 800574c:	443b      	add	r3, r7
 800574e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005752:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005754:	3301      	adds	r3, #1
 8005756:	643b      	str	r3, [r7, #64]	@ 0x40
 8005758:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800575a:	2b03      	cmp	r3, #3
 800575c:	d9dd      	bls.n	800571a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800575e:	2300      	movs	r3, #0
 8005760:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8005762:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005764:	2b00      	cmp	r3, #0
 8005766:	d002      	beq.n	800576e <find_volume+0x13e>
 8005768:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800576a:	3b01      	subs	r3, #1
 800576c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800576e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	3358      	adds	r3, #88	@ 0x58
 8005774:	443b      	add	r3, r7
 8005776:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800577a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800577c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800577e:	2b00      	cmp	r3, #0
 8005780:	d005      	beq.n	800578e <find_volume+0x15e>
 8005782:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005784:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005786:	f7ff fefd 	bl	8005584 <check_fs>
 800578a:	4603      	mov	r3, r0
 800578c:	e000      	b.n	8005790 <find_volume+0x160>
 800578e:	2303      	movs	r3, #3
 8005790:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005794:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005798:	2b01      	cmp	r3, #1
 800579a:	d905      	bls.n	80057a8 <find_volume+0x178>
 800579c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800579e:	3301      	adds	r3, #1
 80057a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80057a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057a4:	2b03      	cmp	r3, #3
 80057a6:	d9e2      	bls.n	800576e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80057a8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80057ac:	2b04      	cmp	r3, #4
 80057ae:	d101      	bne.n	80057b4 <find_volume+0x184>
 80057b0:	2301      	movs	r3, #1
 80057b2:	e17e      	b.n	8005ab2 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80057b4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d901      	bls.n	80057c0 <find_volume+0x190>
 80057bc:	230d      	movs	r3, #13
 80057be:	e178      	b.n	8005ab2 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80057c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057c2:	3330      	adds	r3, #48	@ 0x30
 80057c4:	330b      	adds	r3, #11
 80057c6:	4618      	mov	r0, r3
 80057c8:	f7fe fd18 	bl	80041fc <ld_word>
 80057cc:	4603      	mov	r3, r0
 80057ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057d2:	d001      	beq.n	80057d8 <find_volume+0x1a8>
 80057d4:	230d      	movs	r3, #13
 80057d6:	e16c      	b.n	8005ab2 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80057d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057da:	3330      	adds	r3, #48	@ 0x30
 80057dc:	3316      	adds	r3, #22
 80057de:	4618      	mov	r0, r3
 80057e0:	f7fe fd0c 	bl	80041fc <ld_word>
 80057e4:	4603      	mov	r3, r0
 80057e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80057e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d106      	bne.n	80057fc <find_volume+0x1cc>
 80057ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057f0:	3330      	adds	r3, #48	@ 0x30
 80057f2:	3324      	adds	r3, #36	@ 0x24
 80057f4:	4618      	mov	r0, r3
 80057f6:	f7fe fd19 	bl	800422c <ld_dword>
 80057fa:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80057fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057fe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005800:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005804:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8005808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800580a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800580c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800580e:	789b      	ldrb	r3, [r3, #2]
 8005810:	2b01      	cmp	r3, #1
 8005812:	d005      	beq.n	8005820 <find_volume+0x1f0>
 8005814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005816:	789b      	ldrb	r3, [r3, #2]
 8005818:	2b02      	cmp	r3, #2
 800581a:	d001      	beq.n	8005820 <find_volume+0x1f0>
 800581c:	230d      	movs	r3, #13
 800581e:	e148      	b.n	8005ab2 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005822:	789b      	ldrb	r3, [r3, #2]
 8005824:	461a      	mov	r2, r3
 8005826:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005828:	fb02 f303 	mul.w	r3, r2, r3
 800582c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800582e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005830:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005834:	461a      	mov	r2, r3
 8005836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005838:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800583a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800583c:	895b      	ldrh	r3, [r3, #10]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d008      	beq.n	8005854 <find_volume+0x224>
 8005842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005844:	895b      	ldrh	r3, [r3, #10]
 8005846:	461a      	mov	r2, r3
 8005848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800584a:	895b      	ldrh	r3, [r3, #10]
 800584c:	3b01      	subs	r3, #1
 800584e:	4013      	ands	r3, r2
 8005850:	2b00      	cmp	r3, #0
 8005852:	d001      	beq.n	8005858 <find_volume+0x228>
 8005854:	230d      	movs	r3, #13
 8005856:	e12c      	b.n	8005ab2 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800585a:	3330      	adds	r3, #48	@ 0x30
 800585c:	3311      	adds	r3, #17
 800585e:	4618      	mov	r0, r3
 8005860:	f7fe fccc 	bl	80041fc <ld_word>
 8005864:	4603      	mov	r3, r0
 8005866:	461a      	mov	r2, r3
 8005868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800586a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800586c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800586e:	891b      	ldrh	r3, [r3, #8]
 8005870:	f003 030f 	and.w	r3, r3, #15
 8005874:	b29b      	uxth	r3, r3
 8005876:	2b00      	cmp	r3, #0
 8005878:	d001      	beq.n	800587e <find_volume+0x24e>
 800587a:	230d      	movs	r3, #13
 800587c:	e119      	b.n	8005ab2 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800587e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005880:	3330      	adds	r3, #48	@ 0x30
 8005882:	3313      	adds	r3, #19
 8005884:	4618      	mov	r0, r3
 8005886:	f7fe fcb9 	bl	80041fc <ld_word>
 800588a:	4603      	mov	r3, r0
 800588c:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800588e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005890:	2b00      	cmp	r3, #0
 8005892:	d106      	bne.n	80058a2 <find_volume+0x272>
 8005894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005896:	3330      	adds	r3, #48	@ 0x30
 8005898:	3320      	adds	r3, #32
 800589a:	4618      	mov	r0, r3
 800589c:	f7fe fcc6 	bl	800422c <ld_dword>
 80058a0:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80058a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058a4:	3330      	adds	r3, #48	@ 0x30
 80058a6:	330e      	adds	r3, #14
 80058a8:	4618      	mov	r0, r3
 80058aa:	f7fe fca7 	bl	80041fc <ld_word>
 80058ae:	4603      	mov	r3, r0
 80058b0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80058b2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d101      	bne.n	80058bc <find_volume+0x28c>
 80058b8:	230d      	movs	r3, #13
 80058ba:	e0fa      	b.n	8005ab2 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80058bc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80058be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058c0:	4413      	add	r3, r2
 80058c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80058c4:	8912      	ldrh	r2, [r2, #8]
 80058c6:	0912      	lsrs	r2, r2, #4
 80058c8:	b292      	uxth	r2, r2
 80058ca:	4413      	add	r3, r2
 80058cc:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80058ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d204      	bcs.n	80058e0 <find_volume+0x2b0>
 80058d6:	230d      	movs	r3, #13
 80058d8:	e0eb      	b.n	8005ab2 <find_volume+0x482>
 80058da:	bf00      	nop
 80058dc:	200001c4 	.word	0x200001c4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80058e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80058e8:	8952      	ldrh	r2, [r2, #10]
 80058ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80058ee:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80058f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d101      	bne.n	80058fa <find_volume+0x2ca>
 80058f6:	230d      	movs	r3, #13
 80058f8:	e0db      	b.n	8005ab2 <find_volume+0x482>
		fmt = FS_FAT32;
 80058fa:	2303      	movs	r3, #3
 80058fc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005902:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8005906:	4293      	cmp	r3, r2
 8005908:	d802      	bhi.n	8005910 <find_volume+0x2e0>
 800590a:	2302      	movs	r3, #2
 800590c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005912:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8005916:	4293      	cmp	r3, r2
 8005918:	d802      	bhi.n	8005920 <find_volume+0x2f0>
 800591a:	2301      	movs	r3, #1
 800591c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005922:	1c9a      	adds	r2, r3, #2
 8005924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005926:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8005928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800592a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800592c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800592e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005930:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005932:	441a      	add	r2, r3
 8005934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005936:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8005938:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800593a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800593c:	441a      	add	r2, r3
 800593e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005940:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8005942:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005946:	2b03      	cmp	r3, #3
 8005948:	d11e      	bne.n	8005988 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800594a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800594c:	3330      	adds	r3, #48	@ 0x30
 800594e:	332a      	adds	r3, #42	@ 0x2a
 8005950:	4618      	mov	r0, r3
 8005952:	f7fe fc53 	bl	80041fc <ld_word>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d001      	beq.n	8005960 <find_volume+0x330>
 800595c:	230d      	movs	r3, #13
 800595e:	e0a8      	b.n	8005ab2 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005962:	891b      	ldrh	r3, [r3, #8]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d001      	beq.n	800596c <find_volume+0x33c>
 8005968:	230d      	movs	r3, #13
 800596a:	e0a2      	b.n	8005ab2 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800596c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800596e:	3330      	adds	r3, #48	@ 0x30
 8005970:	332c      	adds	r3, #44	@ 0x2c
 8005972:	4618      	mov	r0, r3
 8005974:	f7fe fc5a 	bl	800422c <ld_dword>
 8005978:	4602      	mov	r2, r0
 800597a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800597c:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800597e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005980:	695b      	ldr	r3, [r3, #20]
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	647b      	str	r3, [r7, #68]	@ 0x44
 8005986:	e01f      	b.n	80059c8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800598a:	891b      	ldrh	r3, [r3, #8]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d101      	bne.n	8005994 <find_volume+0x364>
 8005990:	230d      	movs	r3, #13
 8005992:	e08e      	b.n	8005ab2 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005996:	6a1a      	ldr	r2, [r3, #32]
 8005998:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800599a:	441a      	add	r2, r3
 800599c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800599e:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80059a0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80059a4:	2b02      	cmp	r3, #2
 80059a6:	d103      	bne.n	80059b0 <find_volume+0x380>
 80059a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059aa:	695b      	ldr	r3, [r3, #20]
 80059ac:	005b      	lsls	r3, r3, #1
 80059ae:	e00a      	b.n	80059c6 <find_volume+0x396>
 80059b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059b2:	695a      	ldr	r2, [r3, #20]
 80059b4:	4613      	mov	r3, r2
 80059b6:	005b      	lsls	r3, r3, #1
 80059b8:	4413      	add	r3, r2
 80059ba:	085a      	lsrs	r2, r3, #1
 80059bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059be:	695b      	ldr	r3, [r3, #20]
 80059c0:	f003 0301 	and.w	r3, r3, #1
 80059c4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80059c6:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80059c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ca:	699a      	ldr	r2, [r3, #24]
 80059cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059ce:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80059d2:	0a5b      	lsrs	r3, r3, #9
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d201      	bcs.n	80059dc <find_volume+0x3ac>
 80059d8:	230d      	movs	r3, #13
 80059da:	e06a      	b.n	8005ab2 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80059dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80059e2:	611a      	str	r2, [r3, #16]
 80059e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059e6:	691a      	ldr	r2, [r3, #16]
 80059e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ea:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80059ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ee:	2280      	movs	r2, #128	@ 0x80
 80059f0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80059f2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80059f6:	2b03      	cmp	r3, #3
 80059f8:	d149      	bne.n	8005a8e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80059fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059fc:	3330      	adds	r3, #48	@ 0x30
 80059fe:	3330      	adds	r3, #48	@ 0x30
 8005a00:	4618      	mov	r0, r3
 8005a02:	f7fe fbfb 	bl	80041fc <ld_word>
 8005a06:	4603      	mov	r3, r0
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d140      	bne.n	8005a8e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005a0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a0e:	3301      	adds	r3, #1
 8005a10:	4619      	mov	r1, r3
 8005a12:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005a14:	f7fe fea2 	bl	800475c <move_window>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d137      	bne.n	8005a8e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8005a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a20:	2200      	movs	r2, #0
 8005a22:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a26:	3330      	adds	r3, #48	@ 0x30
 8005a28:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f7fe fbe5 	bl	80041fc <ld_word>
 8005a32:	4603      	mov	r3, r0
 8005a34:	461a      	mov	r2, r3
 8005a36:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d127      	bne.n	8005a8e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a40:	3330      	adds	r3, #48	@ 0x30
 8005a42:	4618      	mov	r0, r3
 8005a44:	f7fe fbf2 	bl	800422c <ld_dword>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	4a1c      	ldr	r2, [pc, #112]	@ (8005abc <find_volume+0x48c>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d11e      	bne.n	8005a8e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005a50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a52:	3330      	adds	r3, #48	@ 0x30
 8005a54:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f7fe fbe7 	bl	800422c <ld_dword>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	4a17      	ldr	r2, [pc, #92]	@ (8005ac0 <find_volume+0x490>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d113      	bne.n	8005a8e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005a66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a68:	3330      	adds	r3, #48	@ 0x30
 8005a6a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f7fe fbdc 	bl	800422c <ld_dword>
 8005a74:	4602      	mov	r2, r0
 8005a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a78:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a7c:	3330      	adds	r3, #48	@ 0x30
 8005a7e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8005a82:	4618      	mov	r0, r3
 8005a84:	f7fe fbd2 	bl	800422c <ld_dword>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a8c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8005a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a90:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8005a94:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005a96:	4b0b      	ldr	r3, [pc, #44]	@ (8005ac4 <find_volume+0x494>)
 8005a98:	881b      	ldrh	r3, [r3, #0]
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	b29a      	uxth	r2, r3
 8005a9e:	4b09      	ldr	r3, [pc, #36]	@ (8005ac4 <find_volume+0x494>)
 8005aa0:	801a      	strh	r2, [r3, #0]
 8005aa2:	4b08      	ldr	r3, [pc, #32]	@ (8005ac4 <find_volume+0x494>)
 8005aa4:	881a      	ldrh	r2, [r3, #0]
 8005aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aa8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8005aaa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005aac:	f7fe fdee 	bl	800468c <clear_lock>
#endif
	return FR_OK;
 8005ab0:	2300      	movs	r3, #0
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3758      	adds	r7, #88	@ 0x58
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	41615252 	.word	0x41615252
 8005ac0:	61417272 	.word	0x61417272
 8005ac4:	200001c8 	.word	0x200001c8

08005ac8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8005ad2:	2309      	movs	r3, #9
 8005ad4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d01c      	beq.n	8005b16 <validate+0x4e>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d018      	beq.n	8005b16 <validate+0x4e>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d013      	beq.n	8005b16 <validate+0x4e>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	889a      	ldrh	r2, [r3, #4]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	88db      	ldrh	r3, [r3, #6]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d10c      	bne.n	8005b16 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	785b      	ldrb	r3, [r3, #1]
 8005b02:	4618      	mov	r0, r3
 8005b04:	f7fe fada 	bl	80040bc <disk_status>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	f003 0301 	and.w	r3, r3, #1
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d101      	bne.n	8005b16 <validate+0x4e>
			res = FR_OK;
 8005b12:	2300      	movs	r3, #0
 8005b14:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005b16:	7bfb      	ldrb	r3, [r7, #15]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d102      	bne.n	8005b22 <validate+0x5a>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	e000      	b.n	8005b24 <validate+0x5c>
 8005b22:	2300      	movs	r3, #0
 8005b24:	683a      	ldr	r2, [r7, #0]
 8005b26:	6013      	str	r3, [r2, #0]
	return res;
 8005b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3710      	adds	r7, #16
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
	...

08005b34 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b088      	sub	sp, #32
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	4613      	mov	r3, r2
 8005b40:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005b46:	f107 0310 	add.w	r3, r7, #16
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f7ff fcd5 	bl	80054fa <get_ldnumber>
 8005b50:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	da01      	bge.n	8005b5c <f_mount+0x28>
 8005b58:	230b      	movs	r3, #11
 8005b5a:	e02b      	b.n	8005bb4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005b5c:	4a17      	ldr	r2, [pc, #92]	@ (8005bbc <f_mount+0x88>)
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b64:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d005      	beq.n	8005b78 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005b6c:	69b8      	ldr	r0, [r7, #24]
 8005b6e:	f7fe fd8d 	bl	800468c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	2200      	movs	r2, #0
 8005b76:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d002      	beq.n	8005b84 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	490d      	ldr	r1, [pc, #52]	@ (8005bbc <f_mount+0x88>)
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d002      	beq.n	8005b9a <f_mount+0x66>
 8005b94:	79fb      	ldrb	r3, [r7, #7]
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d001      	beq.n	8005b9e <f_mount+0x6a>
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	e00a      	b.n	8005bb4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8005b9e:	f107 010c 	add.w	r1, r7, #12
 8005ba2:	f107 0308 	add.w	r3, r7, #8
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7ff fd41 	bl	8005630 <find_volume>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005bb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3720      	adds	r7, #32
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	200001c4 	.word	0x200001c4

08005bc0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b098      	sub	sp, #96	@ 0x60
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	4613      	mov	r3, r2
 8005bcc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d101      	bne.n	8005bd8 <f_open+0x18>
 8005bd4:	2309      	movs	r3, #9
 8005bd6:	e1a9      	b.n	8005f2c <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8005bd8:	79fb      	ldrb	r3, [r7, #7]
 8005bda:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005bde:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8005be0:	79fa      	ldrb	r2, [r7, #7]
 8005be2:	f107 0110 	add.w	r1, r7, #16
 8005be6:	f107 0308 	add.w	r3, r7, #8
 8005bea:	4618      	mov	r0, r3
 8005bec:	f7ff fd20 	bl	8005630 <find_volume>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8005bf6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	f040 818d 	bne.w	8005f1a <f_open+0x35a>
		dj.obj.fs = fs;
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8005c04:	68ba      	ldr	r2, [r7, #8]
 8005c06:	f107 0314 	add.w	r3, r7, #20
 8005c0a:	4611      	mov	r1, r2
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f7ff fc03 	bl	8005418 <follow_path>
 8005c12:	4603      	mov	r3, r0
 8005c14:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005c18:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d118      	bne.n	8005c52 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8005c20:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005c24:	b25b      	sxtb	r3, r3
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	da03      	bge.n	8005c32 <f_open+0x72>
				res = FR_INVALID_NAME;
 8005c2a:	2306      	movs	r3, #6
 8005c2c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8005c30:	e00f      	b.n	8005c52 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005c32:	79fb      	ldrb	r3, [r7, #7]
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	bf8c      	ite	hi
 8005c38:	2301      	movhi	r3, #1
 8005c3a:	2300      	movls	r3, #0
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	461a      	mov	r2, r3
 8005c40:	f107 0314 	add.w	r3, r7, #20
 8005c44:	4611      	mov	r1, r2
 8005c46:	4618      	mov	r0, r3
 8005c48:	f7fe fbd8 	bl	80043fc <chk_lock>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005c52:	79fb      	ldrb	r3, [r7, #7]
 8005c54:	f003 031c 	and.w	r3, r3, #28
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d07f      	beq.n	8005d5c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8005c5c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d017      	beq.n	8005c94 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8005c64:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005c68:	2b04      	cmp	r3, #4
 8005c6a:	d10e      	bne.n	8005c8a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005c6c:	f7fe fc22 	bl	80044b4 <enq_lock>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d006      	beq.n	8005c84 <f_open+0xc4>
 8005c76:	f107 0314 	add.w	r3, r7, #20
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f7ff fb06 	bl	800528c <dir_register>
 8005c80:	4603      	mov	r3, r0
 8005c82:	e000      	b.n	8005c86 <f_open+0xc6>
 8005c84:	2312      	movs	r3, #18
 8005c86:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005c8a:	79fb      	ldrb	r3, [r7, #7]
 8005c8c:	f043 0308 	orr.w	r3, r3, #8
 8005c90:	71fb      	strb	r3, [r7, #7]
 8005c92:	e010      	b.n	8005cb6 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005c94:	7ebb      	ldrb	r3, [r7, #26]
 8005c96:	f003 0311 	and.w	r3, r3, #17
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d003      	beq.n	8005ca6 <f_open+0xe6>
					res = FR_DENIED;
 8005c9e:	2307      	movs	r3, #7
 8005ca0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8005ca4:	e007      	b.n	8005cb6 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8005ca6:	79fb      	ldrb	r3, [r7, #7]
 8005ca8:	f003 0304 	and.w	r3, r3, #4
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d002      	beq.n	8005cb6 <f_open+0xf6>
 8005cb0:	2308      	movs	r3, #8
 8005cb2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005cb6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d168      	bne.n	8005d90 <f_open+0x1d0>
 8005cbe:	79fb      	ldrb	r3, [r7, #7]
 8005cc0:	f003 0308 	and.w	r3, r3, #8
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d063      	beq.n	8005d90 <f_open+0x1d0>
				dw = GET_FATTIME();
 8005cc8:	f7fe f996 	bl	8003ff8 <get_fattime>
 8005ccc:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8005cce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cd0:	330e      	adds	r3, #14
 8005cd2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f7fe fae7 	bl	80042a8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8005cda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cdc:	3316      	adds	r3, #22
 8005cde:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f7fe fae1 	bl	80042a8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8005ce6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ce8:	330b      	adds	r3, #11
 8005cea:	2220      	movs	r2, #32
 8005cec:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005cf2:	4611      	mov	r1, r2
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f7ff fa35 	bl	8005164 <ld_clust>
 8005cfa:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005d00:	2200      	movs	r2, #0
 8005d02:	4618      	mov	r0, r3
 8005d04:	f7ff fa4d 	bl	80051a2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8005d08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d0a:	331c      	adds	r3, #28
 8005d0c:	2100      	movs	r1, #0
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f7fe faca 	bl	80042a8 <st_dword>
					fs->wflag = 1;
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	2201      	movs	r2, #1
 8005d18:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8005d1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d037      	beq.n	8005d90 <f_open+0x1d0>
						dw = fs->winsect;
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d24:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8005d26:	f107 0314 	add.w	r3, r7, #20
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f7fe ff60 	bl	8004bf4 <remove_chain>
 8005d34:	4603      	mov	r3, r0
 8005d36:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8005d3a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d126      	bne.n	8005d90 <f_open+0x1d0>
							res = move_window(fs, dw);
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005d46:	4618      	mov	r0, r3
 8005d48:	f7fe fd08 	bl	800475c <move_window>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005d56:	3a01      	subs	r2, #1
 8005d58:	60da      	str	r2, [r3, #12]
 8005d5a:	e019      	b.n	8005d90 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8005d5c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d115      	bne.n	8005d90 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8005d64:	7ebb      	ldrb	r3, [r7, #26]
 8005d66:	f003 0310 	and.w	r3, r3, #16
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d003      	beq.n	8005d76 <f_open+0x1b6>
					res = FR_NO_FILE;
 8005d6e:	2304      	movs	r3, #4
 8005d70:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8005d74:	e00c      	b.n	8005d90 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8005d76:	79fb      	ldrb	r3, [r7, #7]
 8005d78:	f003 0302 	and.w	r3, r3, #2
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d007      	beq.n	8005d90 <f_open+0x1d0>
 8005d80:	7ebb      	ldrb	r3, [r7, #26]
 8005d82:	f003 0301 	and.w	r3, r3, #1
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d002      	beq.n	8005d90 <f_open+0x1d0>
						res = FR_DENIED;
 8005d8a:	2307      	movs	r3, #7
 8005d8c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8005d90:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d126      	bne.n	8005de6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005d98:	79fb      	ldrb	r3, [r7, #7]
 8005d9a:	f003 0308 	and.w	r3, r3, #8
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d003      	beq.n	8005daa <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8005da2:	79fb      	ldrb	r3, [r7, #7]
 8005da4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005da8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8005db2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005db8:	79fb      	ldrb	r3, [r7, #7]
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	bf8c      	ite	hi
 8005dbe:	2301      	movhi	r3, #1
 8005dc0:	2300      	movls	r3, #0
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	f107 0314 	add.w	r3, r7, #20
 8005dca:	4611      	mov	r1, r2
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f7fe fb93 	bl	80044f8 <inc_lock>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d102      	bne.n	8005de6 <f_open+0x226>
 8005de0:	2302      	movs	r3, #2
 8005de2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8005de6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	f040 8095 	bne.w	8005f1a <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005df4:	4611      	mov	r1, r2
 8005df6:	4618      	mov	r0, r3
 8005df8:	f7ff f9b4 	bl	8005164 <ld_clust>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8005e02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e04:	331c      	adds	r3, #28
 8005e06:	4618      	mov	r0, r3
 8005e08:	f7fe fa10 	bl	800422c <ld_dword>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2200      	movs	r2, #0
 8005e16:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8005e18:	693a      	ldr	r2, [r7, #16]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	88da      	ldrh	r2, [r3, #6]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	79fa      	ldrb	r2, [r7, #7]
 8005e2a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2200      	movs	r2, #0
 8005e36:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	3330      	adds	r3, #48	@ 0x30
 8005e42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e46:	2100      	movs	r1, #0
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f7fe fa7a 	bl	8004342 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8005e4e:	79fb      	ldrb	r3, [r7, #7]
 8005e50:	f003 0320 	and.w	r3, r3, #32
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d060      	beq.n	8005f1a <f_open+0x35a>
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d05c      	beq.n	8005f1a <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	68da      	ldr	r2, [r3, #12]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	895b      	ldrh	r3, [r3, #10]
 8005e6c:	025b      	lsls	r3, r3, #9
 8005e6e:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e7c:	e016      	b.n	8005eac <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005e82:	4618      	mov	r0, r3
 8005e84:	f7fe fd25 	bl	80048d2 <get_fat>
 8005e88:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8005e8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d802      	bhi.n	8005e96 <f_open+0x2d6>
 8005e90:	2302      	movs	r3, #2
 8005e92:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8005e96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005e98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e9c:	d102      	bne.n	8005ea4 <f_open+0x2e4>
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005ea4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005ea6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	657b      	str	r3, [r7, #84]	@ 0x54
 8005eac:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d103      	bne.n	8005ebc <f_open+0x2fc>
 8005eb4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005eb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d8e0      	bhi.n	8005e7e <f_open+0x2be>
				}
				fp->clust = clst;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005ec0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8005ec2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d127      	bne.n	8005f1a <f_open+0x35a>
 8005eca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ecc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d022      	beq.n	8005f1a <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f7fe fcdb 	bl	8004894 <clust2sect>
 8005ede:	6478      	str	r0, [r7, #68]	@ 0x44
 8005ee0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d103      	bne.n	8005eee <f_open+0x32e>
						res = FR_INT_ERR;
 8005ee6:	2302      	movs	r3, #2
 8005ee8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8005eec:	e015      	b.n	8005f1a <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8005eee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ef0:	0a5a      	lsrs	r2, r3, #9
 8005ef2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ef4:	441a      	add	r2, r3
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	7858      	ldrb	r0, [r3, #1]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6a1a      	ldr	r2, [r3, #32]
 8005f08:	2301      	movs	r3, #1
 8005f0a:	f7fe f919 	bl	8004140 <disk_read>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d002      	beq.n	8005f1a <f_open+0x35a>
 8005f14:	2301      	movs	r3, #1
 8005f16:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8005f1a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d002      	beq.n	8005f28 <f_open+0x368>
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8005f28:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3760      	adds	r7, #96	@ 0x60
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b08e      	sub	sp, #56	@ 0x38
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	607a      	str	r2, [r7, #4]
 8005f40:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f107 0214 	add.w	r2, r7, #20
 8005f52:	4611      	mov	r1, r2
 8005f54:	4618      	mov	r0, r3
 8005f56:	f7ff fdb7 	bl	8005ac8 <validate>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005f60:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d107      	bne.n	8005f78 <f_read+0x44>
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	7d5b      	ldrb	r3, [r3, #21]
 8005f6c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8005f70:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d002      	beq.n	8005f7e <f_read+0x4a>
 8005f78:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005f7c:	e115      	b.n	80061aa <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	7d1b      	ldrb	r3, [r3, #20]
 8005f82:	f003 0301 	and.w	r3, r3, #1
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d101      	bne.n	8005f8e <f_read+0x5a>
 8005f8a:	2307      	movs	r3, #7
 8005f8c:	e10d      	b.n	80061aa <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	68da      	ldr	r2, [r3, #12]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	699b      	ldr	r3, [r3, #24]
 8005f96:	1ad3      	subs	r3, r2, r3
 8005f98:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	6a3b      	ldr	r3, [r7, #32]
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	f240 80fe 	bls.w	80061a0 <f_read+0x26c>
 8005fa4:	6a3b      	ldr	r3, [r7, #32]
 8005fa6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8005fa8:	e0fa      	b.n	80061a0 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	699b      	ldr	r3, [r3, #24]
 8005fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	f040 80c6 	bne.w	8006144 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	699b      	ldr	r3, [r3, #24]
 8005fbc:	0a5b      	lsrs	r3, r3, #9
 8005fbe:	697a      	ldr	r2, [r7, #20]
 8005fc0:	8952      	ldrh	r2, [r2, #10]
 8005fc2:	3a01      	subs	r2, #1
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d12f      	bne.n	800602e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	699b      	ldr	r3, [r3, #24]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d103      	bne.n	8005fde <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	633b      	str	r3, [r7, #48]	@ 0x30
 8005fdc:	e013      	b.n	8006006 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d007      	beq.n	8005ff6 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	699b      	ldr	r3, [r3, #24]
 8005fea:	4619      	mov	r1, r3
 8005fec:	68f8      	ldr	r0, [r7, #12]
 8005fee:	f7fe fefe 	bl	8004dee <clmt_clust>
 8005ff2:	6338      	str	r0, [r7, #48]	@ 0x30
 8005ff4:	e007      	b.n	8006006 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	69db      	ldr	r3, [r3, #28]
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	4610      	mov	r0, r2
 8006000:	f7fe fc67 	bl	80048d2 <get_fat>
 8006004:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8006006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006008:	2b01      	cmp	r3, #1
 800600a:	d804      	bhi.n	8006016 <f_read+0xe2>
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2202      	movs	r2, #2
 8006010:	755a      	strb	r2, [r3, #21]
 8006012:	2302      	movs	r3, #2
 8006014:	e0c9      	b.n	80061aa <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006018:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800601c:	d104      	bne.n	8006028 <f_read+0xf4>
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2201      	movs	r2, #1
 8006022:	755a      	strb	r2, [r3, #21]
 8006024:	2301      	movs	r3, #1
 8006026:	e0c0      	b.n	80061aa <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800602c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800602e:	697a      	ldr	r2, [r7, #20]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	69db      	ldr	r3, [r3, #28]
 8006034:	4619      	mov	r1, r3
 8006036:	4610      	mov	r0, r2
 8006038:	f7fe fc2c 	bl	8004894 <clust2sect>
 800603c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d104      	bne.n	800604e <f_read+0x11a>
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2202      	movs	r2, #2
 8006048:	755a      	strb	r2, [r3, #21]
 800604a:	2302      	movs	r3, #2
 800604c:	e0ad      	b.n	80061aa <f_read+0x276>
			sect += csect;
 800604e:	69ba      	ldr	r2, [r7, #24]
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	4413      	add	r3, r2
 8006054:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	0a5b      	lsrs	r3, r3, #9
 800605a:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800605c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800605e:	2b00      	cmp	r3, #0
 8006060:	d039      	beq.n	80060d6 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006062:	69fa      	ldr	r2, [r7, #28]
 8006064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006066:	4413      	add	r3, r2
 8006068:	697a      	ldr	r2, [r7, #20]
 800606a:	8952      	ldrh	r2, [r2, #10]
 800606c:	4293      	cmp	r3, r2
 800606e:	d905      	bls.n	800607c <f_read+0x148>
					cc = fs->csize - csect;
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	895b      	ldrh	r3, [r3, #10]
 8006074:	461a      	mov	r2, r3
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	1ad3      	subs	r3, r2, r3
 800607a:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	7858      	ldrb	r0, [r3, #1]
 8006080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006082:	69ba      	ldr	r2, [r7, #24]
 8006084:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006086:	f7fe f85b 	bl	8004140 <disk_read>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d004      	beq.n	800609a <f_read+0x166>
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2201      	movs	r2, #1
 8006094:	755a      	strb	r2, [r3, #21]
 8006096:	2301      	movs	r3, #1
 8006098:	e087      	b.n	80061aa <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	7d1b      	ldrb	r3, [r3, #20]
 800609e:	b25b      	sxtb	r3, r3
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	da14      	bge.n	80060ce <f_read+0x19a>
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	6a1a      	ldr	r2, [r3, #32]
 80060a8:	69bb      	ldr	r3, [r7, #24]
 80060aa:	1ad3      	subs	r3, r2, r3
 80060ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d90d      	bls.n	80060ce <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6a1a      	ldr	r2, [r3, #32]
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	025b      	lsls	r3, r3, #9
 80060bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060be:	18d0      	adds	r0, r2, r3
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	3330      	adds	r3, #48	@ 0x30
 80060c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80060c8:	4619      	mov	r1, r3
 80060ca:	f7fe f919 	bl	8004300 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80060ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060d0:	025b      	lsls	r3, r3, #9
 80060d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 80060d4:	e050      	b.n	8006178 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6a1b      	ldr	r3, [r3, #32]
 80060da:	69ba      	ldr	r2, [r7, #24]
 80060dc:	429a      	cmp	r2, r3
 80060de:	d02e      	beq.n	800613e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	7d1b      	ldrb	r3, [r3, #20]
 80060e4:	b25b      	sxtb	r3, r3
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	da18      	bge.n	800611c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	7858      	ldrb	r0, [r3, #1]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6a1a      	ldr	r2, [r3, #32]
 80060f8:	2301      	movs	r3, #1
 80060fa:	f7fe f841 	bl	8004180 <disk_write>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d004      	beq.n	800610e <f_read+0x1da>
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2201      	movs	r2, #1
 8006108:	755a      	strb	r2, [r3, #21]
 800610a:	2301      	movs	r3, #1
 800610c:	e04d      	b.n	80061aa <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	7d1b      	ldrb	r3, [r3, #20]
 8006112:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006116:	b2da      	uxtb	r2, r3
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	7858      	ldrb	r0, [r3, #1]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006126:	2301      	movs	r3, #1
 8006128:	69ba      	ldr	r2, [r7, #24]
 800612a:	f7fe f809 	bl	8004140 <disk_read>
 800612e:	4603      	mov	r3, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d004      	beq.n	800613e <f_read+0x20a>
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2201      	movs	r2, #1
 8006138:	755a      	strb	r2, [r3, #21]
 800613a:	2301      	movs	r3, #1
 800613c:	e035      	b.n	80061aa <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	69ba      	ldr	r2, [r7, #24]
 8006142:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	699b      	ldr	r3, [r3, #24]
 8006148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800614c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8006150:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8006152:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	429a      	cmp	r2, r3
 8006158:	d901      	bls.n	800615e <f_read+0x22a>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	699b      	ldr	r3, [r3, #24]
 8006168:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800616c:	4413      	add	r3, r2
 800616e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006170:	4619      	mov	r1, r3
 8006172:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006174:	f7fe f8c4 	bl	8004300 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006178:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800617a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800617c:	4413      	add	r3, r2
 800617e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	699a      	ldr	r2, [r3, #24]
 8006184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006186:	441a      	add	r2, r3
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	619a      	str	r2, [r3, #24]
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006192:	441a      	add	r2, r3
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	601a      	str	r2, [r3, #0]
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	f47f af01 	bne.w	8005faa <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3738      	adds	r7, #56	@ 0x38
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}

080061b2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80061b2:	b580      	push	{r7, lr}
 80061b4:	b08c      	sub	sp, #48	@ 0x30
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	60f8      	str	r0, [r7, #12]
 80061ba:	60b9      	str	r1, [r7, #8]
 80061bc:	607a      	str	r2, [r7, #4]
 80061be:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	2200      	movs	r2, #0
 80061c8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f107 0210 	add.w	r2, r7, #16
 80061d0:	4611      	mov	r1, r2
 80061d2:	4618      	mov	r0, r3
 80061d4:	f7ff fc78 	bl	8005ac8 <validate>
 80061d8:	4603      	mov	r3, r0
 80061da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80061de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d107      	bne.n	80061f6 <f_write+0x44>
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	7d5b      	ldrb	r3, [r3, #21]
 80061ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80061ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d002      	beq.n	80061fc <f_write+0x4a>
 80061f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80061fa:	e14b      	b.n	8006494 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	7d1b      	ldrb	r3, [r3, #20]
 8006200:	f003 0302 	and.w	r3, r3, #2
 8006204:	2b00      	cmp	r3, #0
 8006206:	d101      	bne.n	800620c <f_write+0x5a>
 8006208:	2307      	movs	r3, #7
 800620a:	e143      	b.n	8006494 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	699a      	ldr	r2, [r3, #24]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	441a      	add	r2, r3
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	699b      	ldr	r3, [r3, #24]
 8006218:	429a      	cmp	r2, r3
 800621a:	f080 812d 	bcs.w	8006478 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	699b      	ldr	r3, [r3, #24]
 8006222:	43db      	mvns	r3, r3
 8006224:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8006226:	e127      	b.n	8006478 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	699b      	ldr	r3, [r3, #24]
 800622c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006230:	2b00      	cmp	r3, #0
 8006232:	f040 80e3 	bne.w	80063fc <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	699b      	ldr	r3, [r3, #24]
 800623a:	0a5b      	lsrs	r3, r3, #9
 800623c:	693a      	ldr	r2, [r7, #16]
 800623e:	8952      	ldrh	r2, [r2, #10]
 8006240:	3a01      	subs	r2, #1
 8006242:	4013      	ands	r3, r2
 8006244:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8006246:	69bb      	ldr	r3, [r7, #24]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d143      	bne.n	80062d4 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	699b      	ldr	r3, [r3, #24]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d10c      	bne.n	800626e <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800625a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800625c:	2b00      	cmp	r3, #0
 800625e:	d11a      	bne.n	8006296 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2100      	movs	r1, #0
 8006264:	4618      	mov	r0, r3
 8006266:	f7fe fd2a 	bl	8004cbe <create_chain>
 800626a:	62b8      	str	r0, [r7, #40]	@ 0x28
 800626c:	e013      	b.n	8006296 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006272:	2b00      	cmp	r3, #0
 8006274:	d007      	beq.n	8006286 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	699b      	ldr	r3, [r3, #24]
 800627a:	4619      	mov	r1, r3
 800627c:	68f8      	ldr	r0, [r7, #12]
 800627e:	f7fe fdb6 	bl	8004dee <clmt_clust>
 8006282:	62b8      	str	r0, [r7, #40]	@ 0x28
 8006284:	e007      	b.n	8006296 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	69db      	ldr	r3, [r3, #28]
 800628c:	4619      	mov	r1, r3
 800628e:	4610      	mov	r0, r2
 8006290:	f7fe fd15 	bl	8004cbe <create_chain>
 8006294:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006298:	2b00      	cmp	r3, #0
 800629a:	f000 80f2 	beq.w	8006482 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800629e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d104      	bne.n	80062ae <f_write+0xfc>
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2202      	movs	r2, #2
 80062a8:	755a      	strb	r2, [r3, #21]
 80062aa:	2302      	movs	r3, #2
 80062ac:	e0f2      	b.n	8006494 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80062ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80062b4:	d104      	bne.n	80062c0 <f_write+0x10e>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2201      	movs	r2, #1
 80062ba:	755a      	strb	r2, [r3, #21]
 80062bc:	2301      	movs	r3, #1
 80062be:	e0e9      	b.n	8006494 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80062c4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d102      	bne.n	80062d4 <f_write+0x122>
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80062d2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	7d1b      	ldrb	r3, [r3, #20]
 80062d8:	b25b      	sxtb	r3, r3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	da18      	bge.n	8006310 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	7858      	ldrb	r0, [r3, #1]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6a1a      	ldr	r2, [r3, #32]
 80062ec:	2301      	movs	r3, #1
 80062ee:	f7fd ff47 	bl	8004180 <disk_write>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d004      	beq.n	8006302 <f_write+0x150>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2201      	movs	r2, #1
 80062fc:	755a      	strb	r2, [r3, #21]
 80062fe:	2301      	movs	r3, #1
 8006300:	e0c8      	b.n	8006494 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	7d1b      	ldrb	r3, [r3, #20]
 8006306:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800630a:	b2da      	uxtb	r2, r3
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006310:	693a      	ldr	r2, [r7, #16]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	69db      	ldr	r3, [r3, #28]
 8006316:	4619      	mov	r1, r3
 8006318:	4610      	mov	r0, r2
 800631a:	f7fe fabb 	bl	8004894 <clust2sect>
 800631e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d104      	bne.n	8006330 <f_write+0x17e>
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2202      	movs	r2, #2
 800632a:	755a      	strb	r2, [r3, #21]
 800632c:	2302      	movs	r3, #2
 800632e:	e0b1      	b.n	8006494 <f_write+0x2e2>
			sect += csect;
 8006330:	697a      	ldr	r2, [r7, #20]
 8006332:	69bb      	ldr	r3, [r7, #24]
 8006334:	4413      	add	r3, r2
 8006336:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	0a5b      	lsrs	r3, r3, #9
 800633c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800633e:	6a3b      	ldr	r3, [r7, #32]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d03c      	beq.n	80063be <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006344:	69ba      	ldr	r2, [r7, #24]
 8006346:	6a3b      	ldr	r3, [r7, #32]
 8006348:	4413      	add	r3, r2
 800634a:	693a      	ldr	r2, [r7, #16]
 800634c:	8952      	ldrh	r2, [r2, #10]
 800634e:	4293      	cmp	r3, r2
 8006350:	d905      	bls.n	800635e <f_write+0x1ac>
					cc = fs->csize - csect;
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	895b      	ldrh	r3, [r3, #10]
 8006356:	461a      	mov	r2, r3
 8006358:	69bb      	ldr	r3, [r7, #24]
 800635a:	1ad3      	subs	r3, r2, r3
 800635c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	7858      	ldrb	r0, [r3, #1]
 8006362:	6a3b      	ldr	r3, [r7, #32]
 8006364:	697a      	ldr	r2, [r7, #20]
 8006366:	69f9      	ldr	r1, [r7, #28]
 8006368:	f7fd ff0a 	bl	8004180 <disk_write>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d004      	beq.n	800637c <f_write+0x1ca>
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2201      	movs	r2, #1
 8006376:	755a      	strb	r2, [r3, #21]
 8006378:	2301      	movs	r3, #1
 800637a:	e08b      	b.n	8006494 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6a1a      	ldr	r2, [r3, #32]
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	1ad3      	subs	r3, r2, r3
 8006384:	6a3a      	ldr	r2, [r7, #32]
 8006386:	429a      	cmp	r2, r3
 8006388:	d915      	bls.n	80063b6 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6a1a      	ldr	r2, [r3, #32]
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	1ad3      	subs	r3, r2, r3
 8006398:	025b      	lsls	r3, r3, #9
 800639a:	69fa      	ldr	r2, [r7, #28]
 800639c:	4413      	add	r3, r2
 800639e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80063a2:	4619      	mov	r1, r3
 80063a4:	f7fd ffac 	bl	8004300 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	7d1b      	ldrb	r3, [r3, #20]
 80063ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063b0:	b2da      	uxtb	r2, r3
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80063b6:	6a3b      	ldr	r3, [r7, #32]
 80063b8:	025b      	lsls	r3, r3, #9
 80063ba:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 80063bc:	e03f      	b.n	800643e <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6a1b      	ldr	r3, [r3, #32]
 80063c2:	697a      	ldr	r2, [r7, #20]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d016      	beq.n	80063f6 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	699a      	ldr	r2, [r3, #24]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d210      	bcs.n	80063f6 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	7858      	ldrb	r0, [r3, #1]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80063de:	2301      	movs	r3, #1
 80063e0:	697a      	ldr	r2, [r7, #20]
 80063e2:	f7fd fead 	bl	8004140 <disk_read>
 80063e6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d004      	beq.n	80063f6 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2201      	movs	r2, #1
 80063f0:	755a      	strb	r2, [r3, #21]
 80063f2:	2301      	movs	r3, #1
 80063f4:	e04e      	b.n	8006494 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	697a      	ldr	r2, [r7, #20]
 80063fa:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	699b      	ldr	r3, [r3, #24]
 8006400:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006404:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8006408:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800640a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	429a      	cmp	r2, r3
 8006410:	d901      	bls.n	8006416 <f_write+0x264>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	699b      	ldr	r3, [r3, #24]
 8006420:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006424:	4413      	add	r3, r2
 8006426:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006428:	69f9      	ldr	r1, [r7, #28]
 800642a:	4618      	mov	r0, r3
 800642c:	f7fd ff68 	bl	8004300 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	7d1b      	ldrb	r3, [r3, #20]
 8006434:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006438:	b2da      	uxtb	r2, r3
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800643e:	69fa      	ldr	r2, [r7, #28]
 8006440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006442:	4413      	add	r3, r2
 8006444:	61fb      	str	r3, [r7, #28]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	699a      	ldr	r2, [r3, #24]
 800644a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800644c:	441a      	add	r2, r3
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	619a      	str	r2, [r3, #24]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	68da      	ldr	r2, [r3, #12]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	699b      	ldr	r3, [r3, #24]
 800645a:	429a      	cmp	r2, r3
 800645c:	bf38      	it	cc
 800645e:	461a      	movcc	r2, r3
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	60da      	str	r2, [r3, #12]
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800646a:	441a      	add	r2, r3
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	601a      	str	r2, [r3, #0]
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006474:	1ad3      	subs	r3, r2, r3
 8006476:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2b00      	cmp	r3, #0
 800647c:	f47f aed4 	bne.w	8006228 <f_write+0x76>
 8006480:	e000      	b.n	8006484 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006482:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	7d1b      	ldrb	r3, [r3, #20]
 8006488:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800648c:	b2da      	uxtb	r2, r3
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8006492:	2300      	movs	r3, #0
}
 8006494:	4618      	mov	r0, r3
 8006496:	3730      	adds	r7, #48	@ 0x30
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}

0800649c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b086      	sub	sp, #24
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f107 0208 	add.w	r2, r7, #8
 80064aa:	4611      	mov	r1, r2
 80064ac:	4618      	mov	r0, r3
 80064ae:	f7ff fb0b 	bl	8005ac8 <validate>
 80064b2:	4603      	mov	r3, r0
 80064b4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80064b6:	7dfb      	ldrb	r3, [r7, #23]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d168      	bne.n	800658e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	7d1b      	ldrb	r3, [r3, #20]
 80064c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d062      	beq.n	800658e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	7d1b      	ldrb	r3, [r3, #20]
 80064cc:	b25b      	sxtb	r3, r3
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	da15      	bge.n	80064fe <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	7858      	ldrb	r0, [r3, #1]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6a1a      	ldr	r2, [r3, #32]
 80064e0:	2301      	movs	r3, #1
 80064e2:	f7fd fe4d 	bl	8004180 <disk_write>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d001      	beq.n	80064f0 <f_sync+0x54>
 80064ec:	2301      	movs	r3, #1
 80064ee:	e04f      	b.n	8006590 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	7d1b      	ldrb	r3, [r3, #20]
 80064f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064f8:	b2da      	uxtb	r2, r3
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80064fe:	f7fd fd7b 	bl	8003ff8 <get_fattime>
 8006502:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006504:	68ba      	ldr	r2, [r7, #8]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800650a:	4619      	mov	r1, r3
 800650c:	4610      	mov	r0, r2
 800650e:	f7fe f925 	bl	800475c <move_window>
 8006512:	4603      	mov	r3, r0
 8006514:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006516:	7dfb      	ldrb	r3, [r7, #23]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d138      	bne.n	800658e <f_sync+0xf2>
					dir = fp->dir_ptr;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006520:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	330b      	adds	r3, #11
 8006526:	781a      	ldrb	r2, [r3, #0]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	330b      	adds	r3, #11
 800652c:	f042 0220 	orr.w	r2, r2, #32
 8006530:	b2d2      	uxtb	r2, r2
 8006532:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6818      	ldr	r0, [r3, #0]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	461a      	mov	r2, r3
 800653e:	68f9      	ldr	r1, [r7, #12]
 8006540:	f7fe fe2f 	bl	80051a2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f103 021c 	add.w	r2, r3, #28
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	4619      	mov	r1, r3
 8006550:	4610      	mov	r0, r2
 8006552:	f7fd fea9 	bl	80042a8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	3316      	adds	r3, #22
 800655a:	6939      	ldr	r1, [r7, #16]
 800655c:	4618      	mov	r0, r3
 800655e:	f7fd fea3 	bl	80042a8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	3312      	adds	r3, #18
 8006566:	2100      	movs	r1, #0
 8006568:	4618      	mov	r0, r3
 800656a:	f7fd fe82 	bl	8004272 <st_word>
					fs->wflag = 1;
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	2201      	movs	r2, #1
 8006572:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	4618      	mov	r0, r3
 8006578:	f7fe f91e 	bl	80047b8 <sync_fs>
 800657c:	4603      	mov	r3, r0
 800657e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	7d1b      	ldrb	r3, [r3, #20]
 8006584:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006588:	b2da      	uxtb	r2, r3
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800658e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006590:	4618      	mov	r0, r3
 8006592:	3718      	adds	r7, #24
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f7ff ff7b 	bl	800649c <f_sync>
 80065a6:	4603      	mov	r3, r0
 80065a8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80065aa:	7bfb      	ldrb	r3, [r7, #15]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d118      	bne.n	80065e2 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f107 0208 	add.w	r2, r7, #8
 80065b6:	4611      	mov	r1, r2
 80065b8:	4618      	mov	r0, r3
 80065ba:	f7ff fa85 	bl	8005ac8 <validate>
 80065be:	4603      	mov	r3, r0
 80065c0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80065c2:	7bfb      	ldrb	r3, [r7, #15]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d10c      	bne.n	80065e2 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	691b      	ldr	r3, [r3, #16]
 80065cc:	4618      	mov	r0, r3
 80065ce:	f7fe f821 	bl	8004614 <dec_lock>
 80065d2:	4603      	mov	r3, r0
 80065d4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80065d6:	7bfb      	ldrb	r3, [r7, #15]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d102      	bne.n	80065e2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80065e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3710      	adds	r7, #16
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b087      	sub	sp, #28
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	4613      	mov	r3, r2
 80065f8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80065fa:	2301      	movs	r3, #1
 80065fc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80065fe:	2300      	movs	r3, #0
 8006600:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006602:	4b1f      	ldr	r3, [pc, #124]	@ (8006680 <FATFS_LinkDriverEx+0x94>)
 8006604:	7a5b      	ldrb	r3, [r3, #9]
 8006606:	b2db      	uxtb	r3, r3
 8006608:	2b00      	cmp	r3, #0
 800660a:	d131      	bne.n	8006670 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800660c:	4b1c      	ldr	r3, [pc, #112]	@ (8006680 <FATFS_LinkDriverEx+0x94>)
 800660e:	7a5b      	ldrb	r3, [r3, #9]
 8006610:	b2db      	uxtb	r3, r3
 8006612:	461a      	mov	r2, r3
 8006614:	4b1a      	ldr	r3, [pc, #104]	@ (8006680 <FATFS_LinkDriverEx+0x94>)
 8006616:	2100      	movs	r1, #0
 8006618:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800661a:	4b19      	ldr	r3, [pc, #100]	@ (8006680 <FATFS_LinkDriverEx+0x94>)
 800661c:	7a5b      	ldrb	r3, [r3, #9]
 800661e:	b2db      	uxtb	r3, r3
 8006620:	4a17      	ldr	r2, [pc, #92]	@ (8006680 <FATFS_LinkDriverEx+0x94>)
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	4413      	add	r3, r2
 8006626:	68fa      	ldr	r2, [r7, #12]
 8006628:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800662a:	4b15      	ldr	r3, [pc, #84]	@ (8006680 <FATFS_LinkDriverEx+0x94>)
 800662c:	7a5b      	ldrb	r3, [r3, #9]
 800662e:	b2db      	uxtb	r3, r3
 8006630:	461a      	mov	r2, r3
 8006632:	4b13      	ldr	r3, [pc, #76]	@ (8006680 <FATFS_LinkDriverEx+0x94>)
 8006634:	4413      	add	r3, r2
 8006636:	79fa      	ldrb	r2, [r7, #7]
 8006638:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800663a:	4b11      	ldr	r3, [pc, #68]	@ (8006680 <FATFS_LinkDriverEx+0x94>)
 800663c:	7a5b      	ldrb	r3, [r3, #9]
 800663e:	b2db      	uxtb	r3, r3
 8006640:	1c5a      	adds	r2, r3, #1
 8006642:	b2d1      	uxtb	r1, r2
 8006644:	4a0e      	ldr	r2, [pc, #56]	@ (8006680 <FATFS_LinkDriverEx+0x94>)
 8006646:	7251      	strb	r1, [r2, #9]
 8006648:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800664a:	7dbb      	ldrb	r3, [r7, #22]
 800664c:	3330      	adds	r3, #48	@ 0x30
 800664e:	b2da      	uxtb	r2, r3
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	3301      	adds	r3, #1
 8006658:	223a      	movs	r2, #58	@ 0x3a
 800665a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	3302      	adds	r3, #2
 8006660:	222f      	movs	r2, #47	@ 0x2f
 8006662:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	3303      	adds	r3, #3
 8006668:	2200      	movs	r2, #0
 800666a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800666c:	2300      	movs	r3, #0
 800666e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006670:	7dfb      	ldrb	r3, [r7, #23]
}
 8006672:	4618      	mov	r0, r3
 8006674:	371c      	adds	r7, #28
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr
 800667e:	bf00      	nop
 8006680:	200001ec 	.word	0x200001ec

08006684 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b082      	sub	sp, #8
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800668e:	2200      	movs	r2, #0
 8006690:	6839      	ldr	r1, [r7, #0]
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f7ff ffaa 	bl	80065ec <FATFS_LinkDriverEx>
 8006698:	4603      	mov	r3, r0
}
 800669a:	4618      	mov	r0, r3
 800669c:	3708      	adds	r7, #8
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
	...

080066a4 <malloc>:
 80066a4:	4b02      	ldr	r3, [pc, #8]	@ (80066b0 <malloc+0xc>)
 80066a6:	4601      	mov	r1, r0
 80066a8:	6818      	ldr	r0, [r3, #0]
 80066aa:	f000 b825 	b.w	80066f8 <_malloc_r>
 80066ae:	bf00      	nop
 80066b0:	20000030 	.word	0x20000030

080066b4 <sbrk_aligned>:
 80066b4:	b570      	push	{r4, r5, r6, lr}
 80066b6:	4e0f      	ldr	r6, [pc, #60]	@ (80066f4 <sbrk_aligned+0x40>)
 80066b8:	460c      	mov	r4, r1
 80066ba:	6831      	ldr	r1, [r6, #0]
 80066bc:	4605      	mov	r5, r0
 80066be:	b911      	cbnz	r1, 80066c6 <sbrk_aligned+0x12>
 80066c0:	f000 f9ce 	bl	8006a60 <_sbrk_r>
 80066c4:	6030      	str	r0, [r6, #0]
 80066c6:	4621      	mov	r1, r4
 80066c8:	4628      	mov	r0, r5
 80066ca:	f000 f9c9 	bl	8006a60 <_sbrk_r>
 80066ce:	1c43      	adds	r3, r0, #1
 80066d0:	d103      	bne.n	80066da <sbrk_aligned+0x26>
 80066d2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80066d6:	4620      	mov	r0, r4
 80066d8:	bd70      	pop	{r4, r5, r6, pc}
 80066da:	1cc4      	adds	r4, r0, #3
 80066dc:	f024 0403 	bic.w	r4, r4, #3
 80066e0:	42a0      	cmp	r0, r4
 80066e2:	d0f8      	beq.n	80066d6 <sbrk_aligned+0x22>
 80066e4:	1a21      	subs	r1, r4, r0
 80066e6:	4628      	mov	r0, r5
 80066e8:	f000 f9ba 	bl	8006a60 <_sbrk_r>
 80066ec:	3001      	adds	r0, #1
 80066ee:	d1f2      	bne.n	80066d6 <sbrk_aligned+0x22>
 80066f0:	e7ef      	b.n	80066d2 <sbrk_aligned+0x1e>
 80066f2:	bf00      	nop
 80066f4:	200001f8 	.word	0x200001f8

080066f8 <_malloc_r>:
 80066f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066fc:	1ccd      	adds	r5, r1, #3
 80066fe:	f025 0503 	bic.w	r5, r5, #3
 8006702:	3508      	adds	r5, #8
 8006704:	2d0c      	cmp	r5, #12
 8006706:	bf38      	it	cc
 8006708:	250c      	movcc	r5, #12
 800670a:	2d00      	cmp	r5, #0
 800670c:	4606      	mov	r6, r0
 800670e:	db01      	blt.n	8006714 <_malloc_r+0x1c>
 8006710:	42a9      	cmp	r1, r5
 8006712:	d904      	bls.n	800671e <_malloc_r+0x26>
 8006714:	230c      	movs	r3, #12
 8006716:	6033      	str	r3, [r6, #0]
 8006718:	2000      	movs	r0, #0
 800671a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800671e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80067f4 <_malloc_r+0xfc>
 8006722:	f000 f869 	bl	80067f8 <__malloc_lock>
 8006726:	f8d8 3000 	ldr.w	r3, [r8]
 800672a:	461c      	mov	r4, r3
 800672c:	bb44      	cbnz	r4, 8006780 <_malloc_r+0x88>
 800672e:	4629      	mov	r1, r5
 8006730:	4630      	mov	r0, r6
 8006732:	f7ff ffbf 	bl	80066b4 <sbrk_aligned>
 8006736:	1c43      	adds	r3, r0, #1
 8006738:	4604      	mov	r4, r0
 800673a:	d158      	bne.n	80067ee <_malloc_r+0xf6>
 800673c:	f8d8 4000 	ldr.w	r4, [r8]
 8006740:	4627      	mov	r7, r4
 8006742:	2f00      	cmp	r7, #0
 8006744:	d143      	bne.n	80067ce <_malloc_r+0xd6>
 8006746:	2c00      	cmp	r4, #0
 8006748:	d04b      	beq.n	80067e2 <_malloc_r+0xea>
 800674a:	6823      	ldr	r3, [r4, #0]
 800674c:	4639      	mov	r1, r7
 800674e:	4630      	mov	r0, r6
 8006750:	eb04 0903 	add.w	r9, r4, r3
 8006754:	f000 f984 	bl	8006a60 <_sbrk_r>
 8006758:	4581      	cmp	r9, r0
 800675a:	d142      	bne.n	80067e2 <_malloc_r+0xea>
 800675c:	6821      	ldr	r1, [r4, #0]
 800675e:	1a6d      	subs	r5, r5, r1
 8006760:	4629      	mov	r1, r5
 8006762:	4630      	mov	r0, r6
 8006764:	f7ff ffa6 	bl	80066b4 <sbrk_aligned>
 8006768:	3001      	adds	r0, #1
 800676a:	d03a      	beq.n	80067e2 <_malloc_r+0xea>
 800676c:	6823      	ldr	r3, [r4, #0]
 800676e:	442b      	add	r3, r5
 8006770:	6023      	str	r3, [r4, #0]
 8006772:	f8d8 3000 	ldr.w	r3, [r8]
 8006776:	685a      	ldr	r2, [r3, #4]
 8006778:	bb62      	cbnz	r2, 80067d4 <_malloc_r+0xdc>
 800677a:	f8c8 7000 	str.w	r7, [r8]
 800677e:	e00f      	b.n	80067a0 <_malloc_r+0xa8>
 8006780:	6822      	ldr	r2, [r4, #0]
 8006782:	1b52      	subs	r2, r2, r5
 8006784:	d420      	bmi.n	80067c8 <_malloc_r+0xd0>
 8006786:	2a0b      	cmp	r2, #11
 8006788:	d917      	bls.n	80067ba <_malloc_r+0xc2>
 800678a:	1961      	adds	r1, r4, r5
 800678c:	42a3      	cmp	r3, r4
 800678e:	6025      	str	r5, [r4, #0]
 8006790:	bf18      	it	ne
 8006792:	6059      	strne	r1, [r3, #4]
 8006794:	6863      	ldr	r3, [r4, #4]
 8006796:	bf08      	it	eq
 8006798:	f8c8 1000 	streq.w	r1, [r8]
 800679c:	5162      	str	r2, [r4, r5]
 800679e:	604b      	str	r3, [r1, #4]
 80067a0:	4630      	mov	r0, r6
 80067a2:	f000 f82f 	bl	8006804 <__malloc_unlock>
 80067a6:	f104 000b 	add.w	r0, r4, #11
 80067aa:	1d23      	adds	r3, r4, #4
 80067ac:	f020 0007 	bic.w	r0, r0, #7
 80067b0:	1ac2      	subs	r2, r0, r3
 80067b2:	bf1c      	itt	ne
 80067b4:	1a1b      	subne	r3, r3, r0
 80067b6:	50a3      	strne	r3, [r4, r2]
 80067b8:	e7af      	b.n	800671a <_malloc_r+0x22>
 80067ba:	6862      	ldr	r2, [r4, #4]
 80067bc:	42a3      	cmp	r3, r4
 80067be:	bf0c      	ite	eq
 80067c0:	f8c8 2000 	streq.w	r2, [r8]
 80067c4:	605a      	strne	r2, [r3, #4]
 80067c6:	e7eb      	b.n	80067a0 <_malloc_r+0xa8>
 80067c8:	4623      	mov	r3, r4
 80067ca:	6864      	ldr	r4, [r4, #4]
 80067cc:	e7ae      	b.n	800672c <_malloc_r+0x34>
 80067ce:	463c      	mov	r4, r7
 80067d0:	687f      	ldr	r7, [r7, #4]
 80067d2:	e7b6      	b.n	8006742 <_malloc_r+0x4a>
 80067d4:	461a      	mov	r2, r3
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	42a3      	cmp	r3, r4
 80067da:	d1fb      	bne.n	80067d4 <_malloc_r+0xdc>
 80067dc:	2300      	movs	r3, #0
 80067de:	6053      	str	r3, [r2, #4]
 80067e0:	e7de      	b.n	80067a0 <_malloc_r+0xa8>
 80067e2:	230c      	movs	r3, #12
 80067e4:	6033      	str	r3, [r6, #0]
 80067e6:	4630      	mov	r0, r6
 80067e8:	f000 f80c 	bl	8006804 <__malloc_unlock>
 80067ec:	e794      	b.n	8006718 <_malloc_r+0x20>
 80067ee:	6005      	str	r5, [r0, #0]
 80067f0:	e7d6      	b.n	80067a0 <_malloc_r+0xa8>
 80067f2:	bf00      	nop
 80067f4:	200001fc 	.word	0x200001fc

080067f8 <__malloc_lock>:
 80067f8:	4801      	ldr	r0, [pc, #4]	@ (8006800 <__malloc_lock+0x8>)
 80067fa:	f000 b96c 	b.w	8006ad6 <__retarget_lock_acquire_recursive>
 80067fe:	bf00      	nop
 8006800:	2000033c 	.word	0x2000033c

08006804 <__malloc_unlock>:
 8006804:	4801      	ldr	r0, [pc, #4]	@ (800680c <__malloc_unlock+0x8>)
 8006806:	f000 b967 	b.w	8006ad8 <__retarget_lock_release_recursive>
 800680a:	bf00      	nop
 800680c:	2000033c 	.word	0x2000033c

08006810 <std>:
 8006810:	2300      	movs	r3, #0
 8006812:	b510      	push	{r4, lr}
 8006814:	4604      	mov	r4, r0
 8006816:	e9c0 3300 	strd	r3, r3, [r0]
 800681a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800681e:	6083      	str	r3, [r0, #8]
 8006820:	8181      	strh	r1, [r0, #12]
 8006822:	6643      	str	r3, [r0, #100]	@ 0x64
 8006824:	81c2      	strh	r2, [r0, #14]
 8006826:	6183      	str	r3, [r0, #24]
 8006828:	4619      	mov	r1, r3
 800682a:	2208      	movs	r2, #8
 800682c:	305c      	adds	r0, #92	@ 0x5c
 800682e:	f000 f90f 	bl	8006a50 <memset>
 8006832:	4b0d      	ldr	r3, [pc, #52]	@ (8006868 <std+0x58>)
 8006834:	6263      	str	r3, [r4, #36]	@ 0x24
 8006836:	4b0d      	ldr	r3, [pc, #52]	@ (800686c <std+0x5c>)
 8006838:	62a3      	str	r3, [r4, #40]	@ 0x28
 800683a:	4b0d      	ldr	r3, [pc, #52]	@ (8006870 <std+0x60>)
 800683c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800683e:	4b0d      	ldr	r3, [pc, #52]	@ (8006874 <std+0x64>)
 8006840:	6323      	str	r3, [r4, #48]	@ 0x30
 8006842:	4b0d      	ldr	r3, [pc, #52]	@ (8006878 <std+0x68>)
 8006844:	6224      	str	r4, [r4, #32]
 8006846:	429c      	cmp	r4, r3
 8006848:	d006      	beq.n	8006858 <std+0x48>
 800684a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800684e:	4294      	cmp	r4, r2
 8006850:	d002      	beq.n	8006858 <std+0x48>
 8006852:	33d0      	adds	r3, #208	@ 0xd0
 8006854:	429c      	cmp	r4, r3
 8006856:	d105      	bne.n	8006864 <std+0x54>
 8006858:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800685c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006860:	f000 b938 	b.w	8006ad4 <__retarget_lock_init_recursive>
 8006864:	bd10      	pop	{r4, pc}
 8006866:	bf00      	nop
 8006868:	08006cc9 	.word	0x08006cc9
 800686c:	08006ceb 	.word	0x08006ceb
 8006870:	08006d23 	.word	0x08006d23
 8006874:	08006d47 	.word	0x08006d47
 8006878:	20000200 	.word	0x20000200

0800687c <stdio_exit_handler>:
 800687c:	4a02      	ldr	r2, [pc, #8]	@ (8006888 <stdio_exit_handler+0xc>)
 800687e:	4903      	ldr	r1, [pc, #12]	@ (800688c <stdio_exit_handler+0x10>)
 8006880:	4803      	ldr	r0, [pc, #12]	@ (8006890 <stdio_exit_handler+0x14>)
 8006882:	f000 b869 	b.w	8006958 <_fwalk_sglue>
 8006886:	bf00      	nop
 8006888:	20000024 	.word	0x20000024
 800688c:	08006c79 	.word	0x08006c79
 8006890:	20000034 	.word	0x20000034

08006894 <cleanup_stdio>:
 8006894:	6841      	ldr	r1, [r0, #4]
 8006896:	4b0c      	ldr	r3, [pc, #48]	@ (80068c8 <cleanup_stdio+0x34>)
 8006898:	4299      	cmp	r1, r3
 800689a:	b510      	push	{r4, lr}
 800689c:	4604      	mov	r4, r0
 800689e:	d001      	beq.n	80068a4 <cleanup_stdio+0x10>
 80068a0:	f000 f9ea 	bl	8006c78 <_fflush_r>
 80068a4:	68a1      	ldr	r1, [r4, #8]
 80068a6:	4b09      	ldr	r3, [pc, #36]	@ (80068cc <cleanup_stdio+0x38>)
 80068a8:	4299      	cmp	r1, r3
 80068aa:	d002      	beq.n	80068b2 <cleanup_stdio+0x1e>
 80068ac:	4620      	mov	r0, r4
 80068ae:	f000 f9e3 	bl	8006c78 <_fflush_r>
 80068b2:	68e1      	ldr	r1, [r4, #12]
 80068b4:	4b06      	ldr	r3, [pc, #24]	@ (80068d0 <cleanup_stdio+0x3c>)
 80068b6:	4299      	cmp	r1, r3
 80068b8:	d004      	beq.n	80068c4 <cleanup_stdio+0x30>
 80068ba:	4620      	mov	r0, r4
 80068bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068c0:	f000 b9da 	b.w	8006c78 <_fflush_r>
 80068c4:	bd10      	pop	{r4, pc}
 80068c6:	bf00      	nop
 80068c8:	20000200 	.word	0x20000200
 80068cc:	20000268 	.word	0x20000268
 80068d0:	200002d0 	.word	0x200002d0

080068d4 <global_stdio_init.part.0>:
 80068d4:	b510      	push	{r4, lr}
 80068d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006904 <global_stdio_init.part.0+0x30>)
 80068d8:	4c0b      	ldr	r4, [pc, #44]	@ (8006908 <global_stdio_init.part.0+0x34>)
 80068da:	4a0c      	ldr	r2, [pc, #48]	@ (800690c <global_stdio_init.part.0+0x38>)
 80068dc:	601a      	str	r2, [r3, #0]
 80068de:	4620      	mov	r0, r4
 80068e0:	2200      	movs	r2, #0
 80068e2:	2104      	movs	r1, #4
 80068e4:	f7ff ff94 	bl	8006810 <std>
 80068e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80068ec:	2201      	movs	r2, #1
 80068ee:	2109      	movs	r1, #9
 80068f0:	f7ff ff8e 	bl	8006810 <std>
 80068f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80068f8:	2202      	movs	r2, #2
 80068fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068fe:	2112      	movs	r1, #18
 8006900:	f7ff bf86 	b.w	8006810 <std>
 8006904:	20000338 	.word	0x20000338
 8006908:	20000200 	.word	0x20000200
 800690c:	0800687d 	.word	0x0800687d

08006910 <__sfp_lock_acquire>:
 8006910:	4801      	ldr	r0, [pc, #4]	@ (8006918 <__sfp_lock_acquire+0x8>)
 8006912:	f000 b8e0 	b.w	8006ad6 <__retarget_lock_acquire_recursive>
 8006916:	bf00      	nop
 8006918:	2000033d 	.word	0x2000033d

0800691c <__sfp_lock_release>:
 800691c:	4801      	ldr	r0, [pc, #4]	@ (8006924 <__sfp_lock_release+0x8>)
 800691e:	f000 b8db 	b.w	8006ad8 <__retarget_lock_release_recursive>
 8006922:	bf00      	nop
 8006924:	2000033d 	.word	0x2000033d

08006928 <__sinit>:
 8006928:	b510      	push	{r4, lr}
 800692a:	4604      	mov	r4, r0
 800692c:	f7ff fff0 	bl	8006910 <__sfp_lock_acquire>
 8006930:	6a23      	ldr	r3, [r4, #32]
 8006932:	b11b      	cbz	r3, 800693c <__sinit+0x14>
 8006934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006938:	f7ff bff0 	b.w	800691c <__sfp_lock_release>
 800693c:	4b04      	ldr	r3, [pc, #16]	@ (8006950 <__sinit+0x28>)
 800693e:	6223      	str	r3, [r4, #32]
 8006940:	4b04      	ldr	r3, [pc, #16]	@ (8006954 <__sinit+0x2c>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d1f5      	bne.n	8006934 <__sinit+0xc>
 8006948:	f7ff ffc4 	bl	80068d4 <global_stdio_init.part.0>
 800694c:	e7f2      	b.n	8006934 <__sinit+0xc>
 800694e:	bf00      	nop
 8006950:	08006895 	.word	0x08006895
 8006954:	20000338 	.word	0x20000338

08006958 <_fwalk_sglue>:
 8006958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800695c:	4607      	mov	r7, r0
 800695e:	4688      	mov	r8, r1
 8006960:	4614      	mov	r4, r2
 8006962:	2600      	movs	r6, #0
 8006964:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006968:	f1b9 0901 	subs.w	r9, r9, #1
 800696c:	d505      	bpl.n	800697a <_fwalk_sglue+0x22>
 800696e:	6824      	ldr	r4, [r4, #0]
 8006970:	2c00      	cmp	r4, #0
 8006972:	d1f7      	bne.n	8006964 <_fwalk_sglue+0xc>
 8006974:	4630      	mov	r0, r6
 8006976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800697a:	89ab      	ldrh	r3, [r5, #12]
 800697c:	2b01      	cmp	r3, #1
 800697e:	d907      	bls.n	8006990 <_fwalk_sglue+0x38>
 8006980:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006984:	3301      	adds	r3, #1
 8006986:	d003      	beq.n	8006990 <_fwalk_sglue+0x38>
 8006988:	4629      	mov	r1, r5
 800698a:	4638      	mov	r0, r7
 800698c:	47c0      	blx	r8
 800698e:	4306      	orrs	r6, r0
 8006990:	3568      	adds	r5, #104	@ 0x68
 8006992:	e7e9      	b.n	8006968 <_fwalk_sglue+0x10>

08006994 <_puts_r>:
 8006994:	6a03      	ldr	r3, [r0, #32]
 8006996:	b570      	push	{r4, r5, r6, lr}
 8006998:	6884      	ldr	r4, [r0, #8]
 800699a:	4605      	mov	r5, r0
 800699c:	460e      	mov	r6, r1
 800699e:	b90b      	cbnz	r3, 80069a4 <_puts_r+0x10>
 80069a0:	f7ff ffc2 	bl	8006928 <__sinit>
 80069a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80069a6:	07db      	lsls	r3, r3, #31
 80069a8:	d405      	bmi.n	80069b6 <_puts_r+0x22>
 80069aa:	89a3      	ldrh	r3, [r4, #12]
 80069ac:	0598      	lsls	r0, r3, #22
 80069ae:	d402      	bmi.n	80069b6 <_puts_r+0x22>
 80069b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80069b2:	f000 f890 	bl	8006ad6 <__retarget_lock_acquire_recursive>
 80069b6:	89a3      	ldrh	r3, [r4, #12]
 80069b8:	0719      	lsls	r1, r3, #28
 80069ba:	d502      	bpl.n	80069c2 <_puts_r+0x2e>
 80069bc:	6923      	ldr	r3, [r4, #16]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d135      	bne.n	8006a2e <_puts_r+0x9a>
 80069c2:	4621      	mov	r1, r4
 80069c4:	4628      	mov	r0, r5
 80069c6:	f000 fa01 	bl	8006dcc <__swsetup_r>
 80069ca:	b380      	cbz	r0, 8006a2e <_puts_r+0x9a>
 80069cc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80069d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80069d2:	07da      	lsls	r2, r3, #31
 80069d4:	d405      	bmi.n	80069e2 <_puts_r+0x4e>
 80069d6:	89a3      	ldrh	r3, [r4, #12]
 80069d8:	059b      	lsls	r3, r3, #22
 80069da:	d402      	bmi.n	80069e2 <_puts_r+0x4e>
 80069dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80069de:	f000 f87b 	bl	8006ad8 <__retarget_lock_release_recursive>
 80069e2:	4628      	mov	r0, r5
 80069e4:	bd70      	pop	{r4, r5, r6, pc}
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	da04      	bge.n	80069f4 <_puts_r+0x60>
 80069ea:	69a2      	ldr	r2, [r4, #24]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	dc17      	bgt.n	8006a20 <_puts_r+0x8c>
 80069f0:	290a      	cmp	r1, #10
 80069f2:	d015      	beq.n	8006a20 <_puts_r+0x8c>
 80069f4:	6823      	ldr	r3, [r4, #0]
 80069f6:	1c5a      	adds	r2, r3, #1
 80069f8:	6022      	str	r2, [r4, #0]
 80069fa:	7019      	strb	r1, [r3, #0]
 80069fc:	68a3      	ldr	r3, [r4, #8]
 80069fe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006a02:	3b01      	subs	r3, #1
 8006a04:	60a3      	str	r3, [r4, #8]
 8006a06:	2900      	cmp	r1, #0
 8006a08:	d1ed      	bne.n	80069e6 <_puts_r+0x52>
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	da11      	bge.n	8006a32 <_puts_r+0x9e>
 8006a0e:	4622      	mov	r2, r4
 8006a10:	210a      	movs	r1, #10
 8006a12:	4628      	mov	r0, r5
 8006a14:	f000 f99b 	bl	8006d4e <__swbuf_r>
 8006a18:	3001      	adds	r0, #1
 8006a1a:	d0d7      	beq.n	80069cc <_puts_r+0x38>
 8006a1c:	250a      	movs	r5, #10
 8006a1e:	e7d7      	b.n	80069d0 <_puts_r+0x3c>
 8006a20:	4622      	mov	r2, r4
 8006a22:	4628      	mov	r0, r5
 8006a24:	f000 f993 	bl	8006d4e <__swbuf_r>
 8006a28:	3001      	adds	r0, #1
 8006a2a:	d1e7      	bne.n	80069fc <_puts_r+0x68>
 8006a2c:	e7ce      	b.n	80069cc <_puts_r+0x38>
 8006a2e:	3e01      	subs	r6, #1
 8006a30:	e7e4      	b.n	80069fc <_puts_r+0x68>
 8006a32:	6823      	ldr	r3, [r4, #0]
 8006a34:	1c5a      	adds	r2, r3, #1
 8006a36:	6022      	str	r2, [r4, #0]
 8006a38:	220a      	movs	r2, #10
 8006a3a:	701a      	strb	r2, [r3, #0]
 8006a3c:	e7ee      	b.n	8006a1c <_puts_r+0x88>
	...

08006a40 <puts>:
 8006a40:	4b02      	ldr	r3, [pc, #8]	@ (8006a4c <puts+0xc>)
 8006a42:	4601      	mov	r1, r0
 8006a44:	6818      	ldr	r0, [r3, #0]
 8006a46:	f7ff bfa5 	b.w	8006994 <_puts_r>
 8006a4a:	bf00      	nop
 8006a4c:	20000030 	.word	0x20000030

08006a50 <memset>:
 8006a50:	4402      	add	r2, r0
 8006a52:	4603      	mov	r3, r0
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d100      	bne.n	8006a5a <memset+0xa>
 8006a58:	4770      	bx	lr
 8006a5a:	f803 1b01 	strb.w	r1, [r3], #1
 8006a5e:	e7f9      	b.n	8006a54 <memset+0x4>

08006a60 <_sbrk_r>:
 8006a60:	b538      	push	{r3, r4, r5, lr}
 8006a62:	4d06      	ldr	r5, [pc, #24]	@ (8006a7c <_sbrk_r+0x1c>)
 8006a64:	2300      	movs	r3, #0
 8006a66:	4604      	mov	r4, r0
 8006a68:	4608      	mov	r0, r1
 8006a6a:	602b      	str	r3, [r5, #0]
 8006a6c:	f7fa fce4 	bl	8001438 <_sbrk>
 8006a70:	1c43      	adds	r3, r0, #1
 8006a72:	d102      	bne.n	8006a7a <_sbrk_r+0x1a>
 8006a74:	682b      	ldr	r3, [r5, #0]
 8006a76:	b103      	cbz	r3, 8006a7a <_sbrk_r+0x1a>
 8006a78:	6023      	str	r3, [r4, #0]
 8006a7a:	bd38      	pop	{r3, r4, r5, pc}
 8006a7c:	20000340 	.word	0x20000340

08006a80 <__errno>:
 8006a80:	4b01      	ldr	r3, [pc, #4]	@ (8006a88 <__errno+0x8>)
 8006a82:	6818      	ldr	r0, [r3, #0]
 8006a84:	4770      	bx	lr
 8006a86:	bf00      	nop
 8006a88:	20000030 	.word	0x20000030

08006a8c <__libc_init_array>:
 8006a8c:	b570      	push	{r4, r5, r6, lr}
 8006a8e:	4d0d      	ldr	r5, [pc, #52]	@ (8006ac4 <__libc_init_array+0x38>)
 8006a90:	4c0d      	ldr	r4, [pc, #52]	@ (8006ac8 <__libc_init_array+0x3c>)
 8006a92:	1b64      	subs	r4, r4, r5
 8006a94:	10a4      	asrs	r4, r4, #2
 8006a96:	2600      	movs	r6, #0
 8006a98:	42a6      	cmp	r6, r4
 8006a9a:	d109      	bne.n	8006ab0 <__libc_init_array+0x24>
 8006a9c:	4d0b      	ldr	r5, [pc, #44]	@ (8006acc <__libc_init_array+0x40>)
 8006a9e:	4c0c      	ldr	r4, [pc, #48]	@ (8006ad0 <__libc_init_array+0x44>)
 8006aa0:	f000 fab4 	bl	800700c <_init>
 8006aa4:	1b64      	subs	r4, r4, r5
 8006aa6:	10a4      	asrs	r4, r4, #2
 8006aa8:	2600      	movs	r6, #0
 8006aaa:	42a6      	cmp	r6, r4
 8006aac:	d105      	bne.n	8006aba <__libc_init_array+0x2e>
 8006aae:	bd70      	pop	{r4, r5, r6, pc}
 8006ab0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ab4:	4798      	blx	r3
 8006ab6:	3601      	adds	r6, #1
 8006ab8:	e7ee      	b.n	8006a98 <__libc_init_array+0xc>
 8006aba:	f855 3b04 	ldr.w	r3, [r5], #4
 8006abe:	4798      	blx	r3
 8006ac0:	3601      	adds	r6, #1
 8006ac2:	e7f2      	b.n	8006aaa <__libc_init_array+0x1e>
 8006ac4:	08007170 	.word	0x08007170
 8006ac8:	08007170 	.word	0x08007170
 8006acc:	08007170 	.word	0x08007170
 8006ad0:	08007174 	.word	0x08007174

08006ad4 <__retarget_lock_init_recursive>:
 8006ad4:	4770      	bx	lr

08006ad6 <__retarget_lock_acquire_recursive>:
 8006ad6:	4770      	bx	lr

08006ad8 <__retarget_lock_release_recursive>:
 8006ad8:	4770      	bx	lr
	...

08006adc <_free_r>:
 8006adc:	b538      	push	{r3, r4, r5, lr}
 8006ade:	4605      	mov	r5, r0
 8006ae0:	2900      	cmp	r1, #0
 8006ae2:	d041      	beq.n	8006b68 <_free_r+0x8c>
 8006ae4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ae8:	1f0c      	subs	r4, r1, #4
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	bfb8      	it	lt
 8006aee:	18e4      	addlt	r4, r4, r3
 8006af0:	f7ff fe82 	bl	80067f8 <__malloc_lock>
 8006af4:	4a1d      	ldr	r2, [pc, #116]	@ (8006b6c <_free_r+0x90>)
 8006af6:	6813      	ldr	r3, [r2, #0]
 8006af8:	b933      	cbnz	r3, 8006b08 <_free_r+0x2c>
 8006afa:	6063      	str	r3, [r4, #4]
 8006afc:	6014      	str	r4, [r2, #0]
 8006afe:	4628      	mov	r0, r5
 8006b00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b04:	f7ff be7e 	b.w	8006804 <__malloc_unlock>
 8006b08:	42a3      	cmp	r3, r4
 8006b0a:	d908      	bls.n	8006b1e <_free_r+0x42>
 8006b0c:	6820      	ldr	r0, [r4, #0]
 8006b0e:	1821      	adds	r1, r4, r0
 8006b10:	428b      	cmp	r3, r1
 8006b12:	bf01      	itttt	eq
 8006b14:	6819      	ldreq	r1, [r3, #0]
 8006b16:	685b      	ldreq	r3, [r3, #4]
 8006b18:	1809      	addeq	r1, r1, r0
 8006b1a:	6021      	streq	r1, [r4, #0]
 8006b1c:	e7ed      	b.n	8006afa <_free_r+0x1e>
 8006b1e:	461a      	mov	r2, r3
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	b10b      	cbz	r3, 8006b28 <_free_r+0x4c>
 8006b24:	42a3      	cmp	r3, r4
 8006b26:	d9fa      	bls.n	8006b1e <_free_r+0x42>
 8006b28:	6811      	ldr	r1, [r2, #0]
 8006b2a:	1850      	adds	r0, r2, r1
 8006b2c:	42a0      	cmp	r0, r4
 8006b2e:	d10b      	bne.n	8006b48 <_free_r+0x6c>
 8006b30:	6820      	ldr	r0, [r4, #0]
 8006b32:	4401      	add	r1, r0
 8006b34:	1850      	adds	r0, r2, r1
 8006b36:	4283      	cmp	r3, r0
 8006b38:	6011      	str	r1, [r2, #0]
 8006b3a:	d1e0      	bne.n	8006afe <_free_r+0x22>
 8006b3c:	6818      	ldr	r0, [r3, #0]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	6053      	str	r3, [r2, #4]
 8006b42:	4408      	add	r0, r1
 8006b44:	6010      	str	r0, [r2, #0]
 8006b46:	e7da      	b.n	8006afe <_free_r+0x22>
 8006b48:	d902      	bls.n	8006b50 <_free_r+0x74>
 8006b4a:	230c      	movs	r3, #12
 8006b4c:	602b      	str	r3, [r5, #0]
 8006b4e:	e7d6      	b.n	8006afe <_free_r+0x22>
 8006b50:	6820      	ldr	r0, [r4, #0]
 8006b52:	1821      	adds	r1, r4, r0
 8006b54:	428b      	cmp	r3, r1
 8006b56:	bf04      	itt	eq
 8006b58:	6819      	ldreq	r1, [r3, #0]
 8006b5a:	685b      	ldreq	r3, [r3, #4]
 8006b5c:	6063      	str	r3, [r4, #4]
 8006b5e:	bf04      	itt	eq
 8006b60:	1809      	addeq	r1, r1, r0
 8006b62:	6021      	streq	r1, [r4, #0]
 8006b64:	6054      	str	r4, [r2, #4]
 8006b66:	e7ca      	b.n	8006afe <_free_r+0x22>
 8006b68:	bd38      	pop	{r3, r4, r5, pc}
 8006b6a:	bf00      	nop
 8006b6c:	200001fc 	.word	0x200001fc

08006b70 <__sflush_r>:
 8006b70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b78:	0716      	lsls	r6, r2, #28
 8006b7a:	4605      	mov	r5, r0
 8006b7c:	460c      	mov	r4, r1
 8006b7e:	d454      	bmi.n	8006c2a <__sflush_r+0xba>
 8006b80:	684b      	ldr	r3, [r1, #4]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	dc02      	bgt.n	8006b8c <__sflush_r+0x1c>
 8006b86:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	dd48      	ble.n	8006c1e <__sflush_r+0xae>
 8006b8c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006b8e:	2e00      	cmp	r6, #0
 8006b90:	d045      	beq.n	8006c1e <__sflush_r+0xae>
 8006b92:	2300      	movs	r3, #0
 8006b94:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006b98:	682f      	ldr	r7, [r5, #0]
 8006b9a:	6a21      	ldr	r1, [r4, #32]
 8006b9c:	602b      	str	r3, [r5, #0]
 8006b9e:	d030      	beq.n	8006c02 <__sflush_r+0x92>
 8006ba0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006ba2:	89a3      	ldrh	r3, [r4, #12]
 8006ba4:	0759      	lsls	r1, r3, #29
 8006ba6:	d505      	bpl.n	8006bb4 <__sflush_r+0x44>
 8006ba8:	6863      	ldr	r3, [r4, #4]
 8006baa:	1ad2      	subs	r2, r2, r3
 8006bac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006bae:	b10b      	cbz	r3, 8006bb4 <__sflush_r+0x44>
 8006bb0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006bb2:	1ad2      	subs	r2, r2, r3
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006bb8:	6a21      	ldr	r1, [r4, #32]
 8006bba:	4628      	mov	r0, r5
 8006bbc:	47b0      	blx	r6
 8006bbe:	1c43      	adds	r3, r0, #1
 8006bc0:	89a3      	ldrh	r3, [r4, #12]
 8006bc2:	d106      	bne.n	8006bd2 <__sflush_r+0x62>
 8006bc4:	6829      	ldr	r1, [r5, #0]
 8006bc6:	291d      	cmp	r1, #29
 8006bc8:	d82b      	bhi.n	8006c22 <__sflush_r+0xb2>
 8006bca:	4a2a      	ldr	r2, [pc, #168]	@ (8006c74 <__sflush_r+0x104>)
 8006bcc:	410a      	asrs	r2, r1
 8006bce:	07d6      	lsls	r6, r2, #31
 8006bd0:	d427      	bmi.n	8006c22 <__sflush_r+0xb2>
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	6062      	str	r2, [r4, #4]
 8006bd6:	04d9      	lsls	r1, r3, #19
 8006bd8:	6922      	ldr	r2, [r4, #16]
 8006bda:	6022      	str	r2, [r4, #0]
 8006bdc:	d504      	bpl.n	8006be8 <__sflush_r+0x78>
 8006bde:	1c42      	adds	r2, r0, #1
 8006be0:	d101      	bne.n	8006be6 <__sflush_r+0x76>
 8006be2:	682b      	ldr	r3, [r5, #0]
 8006be4:	b903      	cbnz	r3, 8006be8 <__sflush_r+0x78>
 8006be6:	6560      	str	r0, [r4, #84]	@ 0x54
 8006be8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006bea:	602f      	str	r7, [r5, #0]
 8006bec:	b1b9      	cbz	r1, 8006c1e <__sflush_r+0xae>
 8006bee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006bf2:	4299      	cmp	r1, r3
 8006bf4:	d002      	beq.n	8006bfc <__sflush_r+0x8c>
 8006bf6:	4628      	mov	r0, r5
 8006bf8:	f7ff ff70 	bl	8006adc <_free_r>
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	6363      	str	r3, [r4, #52]	@ 0x34
 8006c00:	e00d      	b.n	8006c1e <__sflush_r+0xae>
 8006c02:	2301      	movs	r3, #1
 8006c04:	4628      	mov	r0, r5
 8006c06:	47b0      	blx	r6
 8006c08:	4602      	mov	r2, r0
 8006c0a:	1c50      	adds	r0, r2, #1
 8006c0c:	d1c9      	bne.n	8006ba2 <__sflush_r+0x32>
 8006c0e:	682b      	ldr	r3, [r5, #0]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d0c6      	beq.n	8006ba2 <__sflush_r+0x32>
 8006c14:	2b1d      	cmp	r3, #29
 8006c16:	d001      	beq.n	8006c1c <__sflush_r+0xac>
 8006c18:	2b16      	cmp	r3, #22
 8006c1a:	d11e      	bne.n	8006c5a <__sflush_r+0xea>
 8006c1c:	602f      	str	r7, [r5, #0]
 8006c1e:	2000      	movs	r0, #0
 8006c20:	e022      	b.n	8006c68 <__sflush_r+0xf8>
 8006c22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c26:	b21b      	sxth	r3, r3
 8006c28:	e01b      	b.n	8006c62 <__sflush_r+0xf2>
 8006c2a:	690f      	ldr	r7, [r1, #16]
 8006c2c:	2f00      	cmp	r7, #0
 8006c2e:	d0f6      	beq.n	8006c1e <__sflush_r+0xae>
 8006c30:	0793      	lsls	r3, r2, #30
 8006c32:	680e      	ldr	r6, [r1, #0]
 8006c34:	bf08      	it	eq
 8006c36:	694b      	ldreq	r3, [r1, #20]
 8006c38:	600f      	str	r7, [r1, #0]
 8006c3a:	bf18      	it	ne
 8006c3c:	2300      	movne	r3, #0
 8006c3e:	eba6 0807 	sub.w	r8, r6, r7
 8006c42:	608b      	str	r3, [r1, #8]
 8006c44:	f1b8 0f00 	cmp.w	r8, #0
 8006c48:	dde9      	ble.n	8006c1e <__sflush_r+0xae>
 8006c4a:	6a21      	ldr	r1, [r4, #32]
 8006c4c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006c4e:	4643      	mov	r3, r8
 8006c50:	463a      	mov	r2, r7
 8006c52:	4628      	mov	r0, r5
 8006c54:	47b0      	blx	r6
 8006c56:	2800      	cmp	r0, #0
 8006c58:	dc08      	bgt.n	8006c6c <__sflush_r+0xfc>
 8006c5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c62:	81a3      	strh	r3, [r4, #12]
 8006c64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c6c:	4407      	add	r7, r0
 8006c6e:	eba8 0800 	sub.w	r8, r8, r0
 8006c72:	e7e7      	b.n	8006c44 <__sflush_r+0xd4>
 8006c74:	dfbffffe 	.word	0xdfbffffe

08006c78 <_fflush_r>:
 8006c78:	b538      	push	{r3, r4, r5, lr}
 8006c7a:	690b      	ldr	r3, [r1, #16]
 8006c7c:	4605      	mov	r5, r0
 8006c7e:	460c      	mov	r4, r1
 8006c80:	b913      	cbnz	r3, 8006c88 <_fflush_r+0x10>
 8006c82:	2500      	movs	r5, #0
 8006c84:	4628      	mov	r0, r5
 8006c86:	bd38      	pop	{r3, r4, r5, pc}
 8006c88:	b118      	cbz	r0, 8006c92 <_fflush_r+0x1a>
 8006c8a:	6a03      	ldr	r3, [r0, #32]
 8006c8c:	b90b      	cbnz	r3, 8006c92 <_fflush_r+0x1a>
 8006c8e:	f7ff fe4b 	bl	8006928 <__sinit>
 8006c92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d0f3      	beq.n	8006c82 <_fflush_r+0xa>
 8006c9a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006c9c:	07d0      	lsls	r0, r2, #31
 8006c9e:	d404      	bmi.n	8006caa <_fflush_r+0x32>
 8006ca0:	0599      	lsls	r1, r3, #22
 8006ca2:	d402      	bmi.n	8006caa <_fflush_r+0x32>
 8006ca4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006ca6:	f7ff ff16 	bl	8006ad6 <__retarget_lock_acquire_recursive>
 8006caa:	4628      	mov	r0, r5
 8006cac:	4621      	mov	r1, r4
 8006cae:	f7ff ff5f 	bl	8006b70 <__sflush_r>
 8006cb2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006cb4:	07da      	lsls	r2, r3, #31
 8006cb6:	4605      	mov	r5, r0
 8006cb8:	d4e4      	bmi.n	8006c84 <_fflush_r+0xc>
 8006cba:	89a3      	ldrh	r3, [r4, #12]
 8006cbc:	059b      	lsls	r3, r3, #22
 8006cbe:	d4e1      	bmi.n	8006c84 <_fflush_r+0xc>
 8006cc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006cc2:	f7ff ff09 	bl	8006ad8 <__retarget_lock_release_recursive>
 8006cc6:	e7dd      	b.n	8006c84 <_fflush_r+0xc>

08006cc8 <__sread>:
 8006cc8:	b510      	push	{r4, lr}
 8006cca:	460c      	mov	r4, r1
 8006ccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cd0:	f000 f978 	bl	8006fc4 <_read_r>
 8006cd4:	2800      	cmp	r0, #0
 8006cd6:	bfab      	itete	ge
 8006cd8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006cda:	89a3      	ldrhlt	r3, [r4, #12]
 8006cdc:	181b      	addge	r3, r3, r0
 8006cde:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006ce2:	bfac      	ite	ge
 8006ce4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006ce6:	81a3      	strhlt	r3, [r4, #12]
 8006ce8:	bd10      	pop	{r4, pc}

08006cea <__swrite>:
 8006cea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cee:	461f      	mov	r7, r3
 8006cf0:	898b      	ldrh	r3, [r1, #12]
 8006cf2:	05db      	lsls	r3, r3, #23
 8006cf4:	4605      	mov	r5, r0
 8006cf6:	460c      	mov	r4, r1
 8006cf8:	4616      	mov	r6, r2
 8006cfa:	d505      	bpl.n	8006d08 <__swrite+0x1e>
 8006cfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d00:	2302      	movs	r3, #2
 8006d02:	2200      	movs	r2, #0
 8006d04:	f000 f94c 	bl	8006fa0 <_lseek_r>
 8006d08:	89a3      	ldrh	r3, [r4, #12]
 8006d0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d0e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006d12:	81a3      	strh	r3, [r4, #12]
 8006d14:	4632      	mov	r2, r6
 8006d16:	463b      	mov	r3, r7
 8006d18:	4628      	mov	r0, r5
 8006d1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d1e:	f000 b963 	b.w	8006fe8 <_write_r>

08006d22 <__sseek>:
 8006d22:	b510      	push	{r4, lr}
 8006d24:	460c      	mov	r4, r1
 8006d26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d2a:	f000 f939 	bl	8006fa0 <_lseek_r>
 8006d2e:	1c43      	adds	r3, r0, #1
 8006d30:	89a3      	ldrh	r3, [r4, #12]
 8006d32:	bf15      	itete	ne
 8006d34:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006d36:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006d3a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006d3e:	81a3      	strheq	r3, [r4, #12]
 8006d40:	bf18      	it	ne
 8006d42:	81a3      	strhne	r3, [r4, #12]
 8006d44:	bd10      	pop	{r4, pc}

08006d46 <__sclose>:
 8006d46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d4a:	f000 b8f7 	b.w	8006f3c <_close_r>

08006d4e <__swbuf_r>:
 8006d4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d50:	460e      	mov	r6, r1
 8006d52:	4614      	mov	r4, r2
 8006d54:	4605      	mov	r5, r0
 8006d56:	b118      	cbz	r0, 8006d60 <__swbuf_r+0x12>
 8006d58:	6a03      	ldr	r3, [r0, #32]
 8006d5a:	b90b      	cbnz	r3, 8006d60 <__swbuf_r+0x12>
 8006d5c:	f7ff fde4 	bl	8006928 <__sinit>
 8006d60:	69a3      	ldr	r3, [r4, #24]
 8006d62:	60a3      	str	r3, [r4, #8]
 8006d64:	89a3      	ldrh	r3, [r4, #12]
 8006d66:	071a      	lsls	r2, r3, #28
 8006d68:	d501      	bpl.n	8006d6e <__swbuf_r+0x20>
 8006d6a:	6923      	ldr	r3, [r4, #16]
 8006d6c:	b943      	cbnz	r3, 8006d80 <__swbuf_r+0x32>
 8006d6e:	4621      	mov	r1, r4
 8006d70:	4628      	mov	r0, r5
 8006d72:	f000 f82b 	bl	8006dcc <__swsetup_r>
 8006d76:	b118      	cbz	r0, 8006d80 <__swbuf_r+0x32>
 8006d78:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006d7c:	4638      	mov	r0, r7
 8006d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d80:	6823      	ldr	r3, [r4, #0]
 8006d82:	6922      	ldr	r2, [r4, #16]
 8006d84:	1a98      	subs	r0, r3, r2
 8006d86:	6963      	ldr	r3, [r4, #20]
 8006d88:	b2f6      	uxtb	r6, r6
 8006d8a:	4283      	cmp	r3, r0
 8006d8c:	4637      	mov	r7, r6
 8006d8e:	dc05      	bgt.n	8006d9c <__swbuf_r+0x4e>
 8006d90:	4621      	mov	r1, r4
 8006d92:	4628      	mov	r0, r5
 8006d94:	f7ff ff70 	bl	8006c78 <_fflush_r>
 8006d98:	2800      	cmp	r0, #0
 8006d9a:	d1ed      	bne.n	8006d78 <__swbuf_r+0x2a>
 8006d9c:	68a3      	ldr	r3, [r4, #8]
 8006d9e:	3b01      	subs	r3, #1
 8006da0:	60a3      	str	r3, [r4, #8]
 8006da2:	6823      	ldr	r3, [r4, #0]
 8006da4:	1c5a      	adds	r2, r3, #1
 8006da6:	6022      	str	r2, [r4, #0]
 8006da8:	701e      	strb	r6, [r3, #0]
 8006daa:	6962      	ldr	r2, [r4, #20]
 8006dac:	1c43      	adds	r3, r0, #1
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d004      	beq.n	8006dbc <__swbuf_r+0x6e>
 8006db2:	89a3      	ldrh	r3, [r4, #12]
 8006db4:	07db      	lsls	r3, r3, #31
 8006db6:	d5e1      	bpl.n	8006d7c <__swbuf_r+0x2e>
 8006db8:	2e0a      	cmp	r6, #10
 8006dba:	d1df      	bne.n	8006d7c <__swbuf_r+0x2e>
 8006dbc:	4621      	mov	r1, r4
 8006dbe:	4628      	mov	r0, r5
 8006dc0:	f7ff ff5a 	bl	8006c78 <_fflush_r>
 8006dc4:	2800      	cmp	r0, #0
 8006dc6:	d0d9      	beq.n	8006d7c <__swbuf_r+0x2e>
 8006dc8:	e7d6      	b.n	8006d78 <__swbuf_r+0x2a>
	...

08006dcc <__swsetup_r>:
 8006dcc:	b538      	push	{r3, r4, r5, lr}
 8006dce:	4b29      	ldr	r3, [pc, #164]	@ (8006e74 <__swsetup_r+0xa8>)
 8006dd0:	4605      	mov	r5, r0
 8006dd2:	6818      	ldr	r0, [r3, #0]
 8006dd4:	460c      	mov	r4, r1
 8006dd6:	b118      	cbz	r0, 8006de0 <__swsetup_r+0x14>
 8006dd8:	6a03      	ldr	r3, [r0, #32]
 8006dda:	b90b      	cbnz	r3, 8006de0 <__swsetup_r+0x14>
 8006ddc:	f7ff fda4 	bl	8006928 <__sinit>
 8006de0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006de4:	0719      	lsls	r1, r3, #28
 8006de6:	d422      	bmi.n	8006e2e <__swsetup_r+0x62>
 8006de8:	06da      	lsls	r2, r3, #27
 8006dea:	d407      	bmi.n	8006dfc <__swsetup_r+0x30>
 8006dec:	2209      	movs	r2, #9
 8006dee:	602a      	str	r2, [r5, #0]
 8006df0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006df4:	81a3      	strh	r3, [r4, #12]
 8006df6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006dfa:	e033      	b.n	8006e64 <__swsetup_r+0x98>
 8006dfc:	0758      	lsls	r0, r3, #29
 8006dfe:	d512      	bpl.n	8006e26 <__swsetup_r+0x5a>
 8006e00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006e02:	b141      	cbz	r1, 8006e16 <__swsetup_r+0x4a>
 8006e04:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006e08:	4299      	cmp	r1, r3
 8006e0a:	d002      	beq.n	8006e12 <__swsetup_r+0x46>
 8006e0c:	4628      	mov	r0, r5
 8006e0e:	f7ff fe65 	bl	8006adc <_free_r>
 8006e12:	2300      	movs	r3, #0
 8006e14:	6363      	str	r3, [r4, #52]	@ 0x34
 8006e16:	89a3      	ldrh	r3, [r4, #12]
 8006e18:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006e1c:	81a3      	strh	r3, [r4, #12]
 8006e1e:	2300      	movs	r3, #0
 8006e20:	6063      	str	r3, [r4, #4]
 8006e22:	6923      	ldr	r3, [r4, #16]
 8006e24:	6023      	str	r3, [r4, #0]
 8006e26:	89a3      	ldrh	r3, [r4, #12]
 8006e28:	f043 0308 	orr.w	r3, r3, #8
 8006e2c:	81a3      	strh	r3, [r4, #12]
 8006e2e:	6923      	ldr	r3, [r4, #16]
 8006e30:	b94b      	cbnz	r3, 8006e46 <__swsetup_r+0x7a>
 8006e32:	89a3      	ldrh	r3, [r4, #12]
 8006e34:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006e38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e3c:	d003      	beq.n	8006e46 <__swsetup_r+0x7a>
 8006e3e:	4621      	mov	r1, r4
 8006e40:	4628      	mov	r0, r5
 8006e42:	f000 f83f 	bl	8006ec4 <__smakebuf_r>
 8006e46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e4a:	f013 0201 	ands.w	r2, r3, #1
 8006e4e:	d00a      	beq.n	8006e66 <__swsetup_r+0x9a>
 8006e50:	2200      	movs	r2, #0
 8006e52:	60a2      	str	r2, [r4, #8]
 8006e54:	6962      	ldr	r2, [r4, #20]
 8006e56:	4252      	negs	r2, r2
 8006e58:	61a2      	str	r2, [r4, #24]
 8006e5a:	6922      	ldr	r2, [r4, #16]
 8006e5c:	b942      	cbnz	r2, 8006e70 <__swsetup_r+0xa4>
 8006e5e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006e62:	d1c5      	bne.n	8006df0 <__swsetup_r+0x24>
 8006e64:	bd38      	pop	{r3, r4, r5, pc}
 8006e66:	0799      	lsls	r1, r3, #30
 8006e68:	bf58      	it	pl
 8006e6a:	6962      	ldrpl	r2, [r4, #20]
 8006e6c:	60a2      	str	r2, [r4, #8]
 8006e6e:	e7f4      	b.n	8006e5a <__swsetup_r+0x8e>
 8006e70:	2000      	movs	r0, #0
 8006e72:	e7f7      	b.n	8006e64 <__swsetup_r+0x98>
 8006e74:	20000030 	.word	0x20000030

08006e78 <__swhatbuf_r>:
 8006e78:	b570      	push	{r4, r5, r6, lr}
 8006e7a:	460c      	mov	r4, r1
 8006e7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e80:	2900      	cmp	r1, #0
 8006e82:	b096      	sub	sp, #88	@ 0x58
 8006e84:	4615      	mov	r5, r2
 8006e86:	461e      	mov	r6, r3
 8006e88:	da0d      	bge.n	8006ea6 <__swhatbuf_r+0x2e>
 8006e8a:	89a3      	ldrh	r3, [r4, #12]
 8006e8c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006e90:	f04f 0100 	mov.w	r1, #0
 8006e94:	bf14      	ite	ne
 8006e96:	2340      	movne	r3, #64	@ 0x40
 8006e98:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006e9c:	2000      	movs	r0, #0
 8006e9e:	6031      	str	r1, [r6, #0]
 8006ea0:	602b      	str	r3, [r5, #0]
 8006ea2:	b016      	add	sp, #88	@ 0x58
 8006ea4:	bd70      	pop	{r4, r5, r6, pc}
 8006ea6:	466a      	mov	r2, sp
 8006ea8:	f000 f858 	bl	8006f5c <_fstat_r>
 8006eac:	2800      	cmp	r0, #0
 8006eae:	dbec      	blt.n	8006e8a <__swhatbuf_r+0x12>
 8006eb0:	9901      	ldr	r1, [sp, #4]
 8006eb2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006eb6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006eba:	4259      	negs	r1, r3
 8006ebc:	4159      	adcs	r1, r3
 8006ebe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006ec2:	e7eb      	b.n	8006e9c <__swhatbuf_r+0x24>

08006ec4 <__smakebuf_r>:
 8006ec4:	898b      	ldrh	r3, [r1, #12]
 8006ec6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ec8:	079d      	lsls	r5, r3, #30
 8006eca:	4606      	mov	r6, r0
 8006ecc:	460c      	mov	r4, r1
 8006ece:	d507      	bpl.n	8006ee0 <__smakebuf_r+0x1c>
 8006ed0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006ed4:	6023      	str	r3, [r4, #0]
 8006ed6:	6123      	str	r3, [r4, #16]
 8006ed8:	2301      	movs	r3, #1
 8006eda:	6163      	str	r3, [r4, #20]
 8006edc:	b003      	add	sp, #12
 8006ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ee0:	ab01      	add	r3, sp, #4
 8006ee2:	466a      	mov	r2, sp
 8006ee4:	f7ff ffc8 	bl	8006e78 <__swhatbuf_r>
 8006ee8:	9f00      	ldr	r7, [sp, #0]
 8006eea:	4605      	mov	r5, r0
 8006eec:	4639      	mov	r1, r7
 8006eee:	4630      	mov	r0, r6
 8006ef0:	f7ff fc02 	bl	80066f8 <_malloc_r>
 8006ef4:	b948      	cbnz	r0, 8006f0a <__smakebuf_r+0x46>
 8006ef6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006efa:	059a      	lsls	r2, r3, #22
 8006efc:	d4ee      	bmi.n	8006edc <__smakebuf_r+0x18>
 8006efe:	f023 0303 	bic.w	r3, r3, #3
 8006f02:	f043 0302 	orr.w	r3, r3, #2
 8006f06:	81a3      	strh	r3, [r4, #12]
 8006f08:	e7e2      	b.n	8006ed0 <__smakebuf_r+0xc>
 8006f0a:	89a3      	ldrh	r3, [r4, #12]
 8006f0c:	6020      	str	r0, [r4, #0]
 8006f0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f12:	81a3      	strh	r3, [r4, #12]
 8006f14:	9b01      	ldr	r3, [sp, #4]
 8006f16:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006f1a:	b15b      	cbz	r3, 8006f34 <__smakebuf_r+0x70>
 8006f1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f20:	4630      	mov	r0, r6
 8006f22:	f000 f82d 	bl	8006f80 <_isatty_r>
 8006f26:	b128      	cbz	r0, 8006f34 <__smakebuf_r+0x70>
 8006f28:	89a3      	ldrh	r3, [r4, #12]
 8006f2a:	f023 0303 	bic.w	r3, r3, #3
 8006f2e:	f043 0301 	orr.w	r3, r3, #1
 8006f32:	81a3      	strh	r3, [r4, #12]
 8006f34:	89a3      	ldrh	r3, [r4, #12]
 8006f36:	431d      	orrs	r5, r3
 8006f38:	81a5      	strh	r5, [r4, #12]
 8006f3a:	e7cf      	b.n	8006edc <__smakebuf_r+0x18>

08006f3c <_close_r>:
 8006f3c:	b538      	push	{r3, r4, r5, lr}
 8006f3e:	4d06      	ldr	r5, [pc, #24]	@ (8006f58 <_close_r+0x1c>)
 8006f40:	2300      	movs	r3, #0
 8006f42:	4604      	mov	r4, r0
 8006f44:	4608      	mov	r0, r1
 8006f46:	602b      	str	r3, [r5, #0]
 8006f48:	f7fa fa41 	bl	80013ce <_close>
 8006f4c:	1c43      	adds	r3, r0, #1
 8006f4e:	d102      	bne.n	8006f56 <_close_r+0x1a>
 8006f50:	682b      	ldr	r3, [r5, #0]
 8006f52:	b103      	cbz	r3, 8006f56 <_close_r+0x1a>
 8006f54:	6023      	str	r3, [r4, #0]
 8006f56:	bd38      	pop	{r3, r4, r5, pc}
 8006f58:	20000340 	.word	0x20000340

08006f5c <_fstat_r>:
 8006f5c:	b538      	push	{r3, r4, r5, lr}
 8006f5e:	4d07      	ldr	r5, [pc, #28]	@ (8006f7c <_fstat_r+0x20>)
 8006f60:	2300      	movs	r3, #0
 8006f62:	4604      	mov	r4, r0
 8006f64:	4608      	mov	r0, r1
 8006f66:	4611      	mov	r1, r2
 8006f68:	602b      	str	r3, [r5, #0]
 8006f6a:	f7fa fa3c 	bl	80013e6 <_fstat>
 8006f6e:	1c43      	adds	r3, r0, #1
 8006f70:	d102      	bne.n	8006f78 <_fstat_r+0x1c>
 8006f72:	682b      	ldr	r3, [r5, #0]
 8006f74:	b103      	cbz	r3, 8006f78 <_fstat_r+0x1c>
 8006f76:	6023      	str	r3, [r4, #0]
 8006f78:	bd38      	pop	{r3, r4, r5, pc}
 8006f7a:	bf00      	nop
 8006f7c:	20000340 	.word	0x20000340

08006f80 <_isatty_r>:
 8006f80:	b538      	push	{r3, r4, r5, lr}
 8006f82:	4d06      	ldr	r5, [pc, #24]	@ (8006f9c <_isatty_r+0x1c>)
 8006f84:	2300      	movs	r3, #0
 8006f86:	4604      	mov	r4, r0
 8006f88:	4608      	mov	r0, r1
 8006f8a:	602b      	str	r3, [r5, #0]
 8006f8c:	f7fa fa3b 	bl	8001406 <_isatty>
 8006f90:	1c43      	adds	r3, r0, #1
 8006f92:	d102      	bne.n	8006f9a <_isatty_r+0x1a>
 8006f94:	682b      	ldr	r3, [r5, #0]
 8006f96:	b103      	cbz	r3, 8006f9a <_isatty_r+0x1a>
 8006f98:	6023      	str	r3, [r4, #0]
 8006f9a:	bd38      	pop	{r3, r4, r5, pc}
 8006f9c:	20000340 	.word	0x20000340

08006fa0 <_lseek_r>:
 8006fa0:	b538      	push	{r3, r4, r5, lr}
 8006fa2:	4d07      	ldr	r5, [pc, #28]	@ (8006fc0 <_lseek_r+0x20>)
 8006fa4:	4604      	mov	r4, r0
 8006fa6:	4608      	mov	r0, r1
 8006fa8:	4611      	mov	r1, r2
 8006faa:	2200      	movs	r2, #0
 8006fac:	602a      	str	r2, [r5, #0]
 8006fae:	461a      	mov	r2, r3
 8006fb0:	f7fa fa34 	bl	800141c <_lseek>
 8006fb4:	1c43      	adds	r3, r0, #1
 8006fb6:	d102      	bne.n	8006fbe <_lseek_r+0x1e>
 8006fb8:	682b      	ldr	r3, [r5, #0]
 8006fba:	b103      	cbz	r3, 8006fbe <_lseek_r+0x1e>
 8006fbc:	6023      	str	r3, [r4, #0]
 8006fbe:	bd38      	pop	{r3, r4, r5, pc}
 8006fc0:	20000340 	.word	0x20000340

08006fc4 <_read_r>:
 8006fc4:	b538      	push	{r3, r4, r5, lr}
 8006fc6:	4d07      	ldr	r5, [pc, #28]	@ (8006fe4 <_read_r+0x20>)
 8006fc8:	4604      	mov	r4, r0
 8006fca:	4608      	mov	r0, r1
 8006fcc:	4611      	mov	r1, r2
 8006fce:	2200      	movs	r2, #0
 8006fd0:	602a      	str	r2, [r5, #0]
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	f7fa f9de 	bl	8001394 <_read>
 8006fd8:	1c43      	adds	r3, r0, #1
 8006fda:	d102      	bne.n	8006fe2 <_read_r+0x1e>
 8006fdc:	682b      	ldr	r3, [r5, #0]
 8006fde:	b103      	cbz	r3, 8006fe2 <_read_r+0x1e>
 8006fe0:	6023      	str	r3, [r4, #0]
 8006fe2:	bd38      	pop	{r3, r4, r5, pc}
 8006fe4:	20000340 	.word	0x20000340

08006fe8 <_write_r>:
 8006fe8:	b538      	push	{r3, r4, r5, lr}
 8006fea:	4d07      	ldr	r5, [pc, #28]	@ (8007008 <_write_r+0x20>)
 8006fec:	4604      	mov	r4, r0
 8006fee:	4608      	mov	r0, r1
 8006ff0:	4611      	mov	r1, r2
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	602a      	str	r2, [r5, #0]
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	f7fa faa2 	bl	8001540 <_write>
 8006ffc:	1c43      	adds	r3, r0, #1
 8006ffe:	d102      	bne.n	8007006 <_write_r+0x1e>
 8007000:	682b      	ldr	r3, [r5, #0]
 8007002:	b103      	cbz	r3, 8007006 <_write_r+0x1e>
 8007004:	6023      	str	r3, [r4, #0]
 8007006:	bd38      	pop	{r3, r4, r5, pc}
 8007008:	20000340 	.word	0x20000340

0800700c <_init>:
 800700c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800700e:	bf00      	nop
 8007010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007012:	bc08      	pop	{r3}
 8007014:	469e      	mov	lr, r3
 8007016:	4770      	bx	lr

08007018 <_fini>:
 8007018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800701a:	bf00      	nop
 800701c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800701e:	bc08      	pop	{r3}
 8007020:	469e      	mov	lr, r3
 8007022:	4770      	bx	lr
